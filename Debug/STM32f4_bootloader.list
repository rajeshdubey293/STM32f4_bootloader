
STM32f4_bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000380c  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000584  080039b8  080039b8  000139b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f3c  08003f3c  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  08003f3c  08003f3c  00013f3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003f44  08003f44  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f44  08003f44  00013f44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003f48  08003f48  00013f48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08003f4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000190  20000018  08003f64  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001a8  08003f64  000201a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007af2  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001822  00000000  00000000  00027b3a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000008b8  00000000  00000000  00029360  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000007f0  00000000  00000000  00029c18  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021e6e  00000000  00000000  0002a408  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006e81  00000000  00000000  0004c276  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cd7b9  00000000  00000000  000530f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001208b0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000022c4  00000000  00000000  0012092c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000018 	.word	0x20000018
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080039a0 	.word	0x080039a0

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	2000001c 	.word	0x2000001c
 80001e8:	080039a0 	.word	0x080039a0

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b972 	b.w	80004e8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9e08      	ldr	r6, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	4688      	mov	r8, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14b      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022a:	428a      	cmp	r2, r1
 800022c:	4615      	mov	r5, r2
 800022e:	d967      	bls.n	8000300 <__udivmoddi4+0xe4>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0720 	rsb	r7, r2, #32
 800023a:	fa01 f302 	lsl.w	r3, r1, r2
 800023e:	fa20 f707 	lsr.w	r7, r0, r7
 8000242:	4095      	lsls	r5, r2
 8000244:	ea47 0803 	orr.w	r8, r7, r3
 8000248:	4094      	lsls	r4, r2
 800024a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800024e:	0c23      	lsrs	r3, r4, #16
 8000250:	fbb8 f7fe 	udiv	r7, r8, lr
 8000254:	fa1f fc85 	uxth.w	ip, r5
 8000258:	fb0e 8817 	mls	r8, lr, r7, r8
 800025c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000260:	fb07 f10c 	mul.w	r1, r7, ip
 8000264:	4299      	cmp	r1, r3
 8000266:	d909      	bls.n	800027c <__udivmoddi4+0x60>
 8000268:	18eb      	adds	r3, r5, r3
 800026a:	f107 30ff 	add.w	r0, r7, #4294967295
 800026e:	f080 811b 	bcs.w	80004a8 <__udivmoddi4+0x28c>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 8118 	bls.w	80004a8 <__udivmoddi4+0x28c>
 8000278:	3f02      	subs	r7, #2
 800027a:	442b      	add	r3, r5
 800027c:	1a5b      	subs	r3, r3, r1
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb3 f0fe 	udiv	r0, r3, lr
 8000284:	fb0e 3310 	mls	r3, lr, r0, r3
 8000288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000290:	45a4      	cmp	ip, r4
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x8c>
 8000294:	192c      	adds	r4, r5, r4
 8000296:	f100 33ff 	add.w	r3, r0, #4294967295
 800029a:	f080 8107 	bcs.w	80004ac <__udivmoddi4+0x290>
 800029e:	45a4      	cmp	ip, r4
 80002a0:	f240 8104 	bls.w	80004ac <__udivmoddi4+0x290>
 80002a4:	3802      	subs	r0, #2
 80002a6:	442c      	add	r4, r5
 80002a8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002ac:	eba4 040c 	sub.w	r4, r4, ip
 80002b0:	2700      	movs	r7, #0
 80002b2:	b11e      	cbz	r6, 80002bc <__udivmoddi4+0xa0>
 80002b4:	40d4      	lsrs	r4, r2
 80002b6:	2300      	movs	r3, #0
 80002b8:	e9c6 4300 	strd	r4, r3, [r6]
 80002bc:	4639      	mov	r1, r7
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d909      	bls.n	80002da <__udivmoddi4+0xbe>
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	f000 80eb 	beq.w	80004a2 <__udivmoddi4+0x286>
 80002cc:	2700      	movs	r7, #0
 80002ce:	e9c6 0100 	strd	r0, r1, [r6]
 80002d2:	4638      	mov	r0, r7
 80002d4:	4639      	mov	r1, r7
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	fab3 f783 	clz	r7, r3
 80002de:	2f00      	cmp	r7, #0
 80002e0:	d147      	bne.n	8000372 <__udivmoddi4+0x156>
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0xd0>
 80002e6:	4282      	cmp	r2, r0
 80002e8:	f200 80fa 	bhi.w	80004e0 <__udivmoddi4+0x2c4>
 80002ec:	1a84      	subs	r4, r0, r2
 80002ee:	eb61 0303 	sbc.w	r3, r1, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	4698      	mov	r8, r3
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	d0e0      	beq.n	80002bc <__udivmoddi4+0xa0>
 80002fa:	e9c6 4800 	strd	r4, r8, [r6]
 80002fe:	e7dd      	b.n	80002bc <__udivmoddi4+0xa0>
 8000300:	b902      	cbnz	r2, 8000304 <__udivmoddi4+0xe8>
 8000302:	deff      	udf	#255	; 0xff
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	2a00      	cmp	r2, #0
 800030a:	f040 808f 	bne.w	800042c <__udivmoddi4+0x210>
 800030e:	1b49      	subs	r1, r1, r5
 8000310:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000314:	fa1f f885 	uxth.w	r8, r5
 8000318:	2701      	movs	r7, #1
 800031a:	fbb1 fcfe 	udiv	ip, r1, lr
 800031e:	0c23      	lsrs	r3, r4, #16
 8000320:	fb0e 111c 	mls	r1, lr, ip, r1
 8000324:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000328:	fb08 f10c 	mul.w	r1, r8, ip
 800032c:	4299      	cmp	r1, r3
 800032e:	d907      	bls.n	8000340 <__udivmoddi4+0x124>
 8000330:	18eb      	adds	r3, r5, r3
 8000332:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x122>
 8000338:	4299      	cmp	r1, r3
 800033a:	f200 80cd 	bhi.w	80004d8 <__udivmoddi4+0x2bc>
 800033e:	4684      	mov	ip, r0
 8000340:	1a59      	subs	r1, r3, r1
 8000342:	b2a3      	uxth	r3, r4
 8000344:	fbb1 f0fe 	udiv	r0, r1, lr
 8000348:	fb0e 1410 	mls	r4, lr, r0, r1
 800034c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000350:	fb08 f800 	mul.w	r8, r8, r0
 8000354:	45a0      	cmp	r8, r4
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0x14c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x14a>
 8000360:	45a0      	cmp	r8, r4
 8000362:	f200 80b6 	bhi.w	80004d2 <__udivmoddi4+0x2b6>
 8000366:	4618      	mov	r0, r3
 8000368:	eba4 0408 	sub.w	r4, r4, r8
 800036c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000370:	e79f      	b.n	80002b2 <__udivmoddi4+0x96>
 8000372:	f1c7 0c20 	rsb	ip, r7, #32
 8000376:	40bb      	lsls	r3, r7
 8000378:	fa22 fe0c 	lsr.w	lr, r2, ip
 800037c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000380:	fa01 f407 	lsl.w	r4, r1, r7
 8000384:	fa20 f50c 	lsr.w	r5, r0, ip
 8000388:	fa21 f30c 	lsr.w	r3, r1, ip
 800038c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000390:	4325      	orrs	r5, r4
 8000392:	fbb3 f9f8 	udiv	r9, r3, r8
 8000396:	0c2c      	lsrs	r4, r5, #16
 8000398:	fb08 3319 	mls	r3, r8, r9, r3
 800039c:	fa1f fa8e 	uxth.w	sl, lr
 80003a0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003a4:	fb09 f40a 	mul.w	r4, r9, sl
 80003a8:	429c      	cmp	r4, r3
 80003aa:	fa02 f207 	lsl.w	r2, r2, r7
 80003ae:	fa00 f107 	lsl.w	r1, r0, r7
 80003b2:	d90b      	bls.n	80003cc <__udivmoddi4+0x1b0>
 80003b4:	eb1e 0303 	adds.w	r3, lr, r3
 80003b8:	f109 30ff 	add.w	r0, r9, #4294967295
 80003bc:	f080 8087 	bcs.w	80004ce <__udivmoddi4+0x2b2>
 80003c0:	429c      	cmp	r4, r3
 80003c2:	f240 8084 	bls.w	80004ce <__udivmoddi4+0x2b2>
 80003c6:	f1a9 0902 	sub.w	r9, r9, #2
 80003ca:	4473      	add	r3, lr
 80003cc:	1b1b      	subs	r3, r3, r4
 80003ce:	b2ad      	uxth	r5, r5
 80003d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003d4:	fb08 3310 	mls	r3, r8, r0, r3
 80003d8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003dc:	fb00 fa0a 	mul.w	sl, r0, sl
 80003e0:	45a2      	cmp	sl, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x1da>
 80003e4:	eb1e 0404 	adds.w	r4, lr, r4
 80003e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80003ec:	d26b      	bcs.n	80004c6 <__udivmoddi4+0x2aa>
 80003ee:	45a2      	cmp	sl, r4
 80003f0:	d969      	bls.n	80004c6 <__udivmoddi4+0x2aa>
 80003f2:	3802      	subs	r0, #2
 80003f4:	4474      	add	r4, lr
 80003f6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fa:	fba0 8902 	umull	r8, r9, r0, r2
 80003fe:	eba4 040a 	sub.w	r4, r4, sl
 8000402:	454c      	cmp	r4, r9
 8000404:	46c2      	mov	sl, r8
 8000406:	464b      	mov	r3, r9
 8000408:	d354      	bcc.n	80004b4 <__udivmoddi4+0x298>
 800040a:	d051      	beq.n	80004b0 <__udivmoddi4+0x294>
 800040c:	2e00      	cmp	r6, #0
 800040e:	d069      	beq.n	80004e4 <__udivmoddi4+0x2c8>
 8000410:	ebb1 050a 	subs.w	r5, r1, sl
 8000414:	eb64 0403 	sbc.w	r4, r4, r3
 8000418:	fa04 fc0c 	lsl.w	ip, r4, ip
 800041c:	40fd      	lsrs	r5, r7
 800041e:	40fc      	lsrs	r4, r7
 8000420:	ea4c 0505 	orr.w	r5, ip, r5
 8000424:	e9c6 5400 	strd	r5, r4, [r6]
 8000428:	2700      	movs	r7, #0
 800042a:	e747      	b.n	80002bc <__udivmoddi4+0xa0>
 800042c:	f1c2 0320 	rsb	r3, r2, #32
 8000430:	fa20 f703 	lsr.w	r7, r0, r3
 8000434:	4095      	lsls	r5, r2
 8000436:	fa01 f002 	lsl.w	r0, r1, r2
 800043a:	fa21 f303 	lsr.w	r3, r1, r3
 800043e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000442:	4338      	orrs	r0, r7
 8000444:	0c01      	lsrs	r1, r0, #16
 8000446:	fbb3 f7fe 	udiv	r7, r3, lr
 800044a:	fa1f f885 	uxth.w	r8, r5
 800044e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000452:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000456:	fb07 f308 	mul.w	r3, r7, r8
 800045a:	428b      	cmp	r3, r1
 800045c:	fa04 f402 	lsl.w	r4, r4, r2
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x256>
 8000462:	1869      	adds	r1, r5, r1
 8000464:	f107 3cff 	add.w	ip, r7, #4294967295
 8000468:	d22f      	bcs.n	80004ca <__udivmoddi4+0x2ae>
 800046a:	428b      	cmp	r3, r1
 800046c:	d92d      	bls.n	80004ca <__udivmoddi4+0x2ae>
 800046e:	3f02      	subs	r7, #2
 8000470:	4429      	add	r1, r5
 8000472:	1acb      	subs	r3, r1, r3
 8000474:	b281      	uxth	r1, r0
 8000476:	fbb3 f0fe 	udiv	r0, r3, lr
 800047a:	fb0e 3310 	mls	r3, lr, r0, r3
 800047e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000482:	fb00 f308 	mul.w	r3, r0, r8
 8000486:	428b      	cmp	r3, r1
 8000488:	d907      	bls.n	800049a <__udivmoddi4+0x27e>
 800048a:	1869      	adds	r1, r5, r1
 800048c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000490:	d217      	bcs.n	80004c2 <__udivmoddi4+0x2a6>
 8000492:	428b      	cmp	r3, r1
 8000494:	d915      	bls.n	80004c2 <__udivmoddi4+0x2a6>
 8000496:	3802      	subs	r0, #2
 8000498:	4429      	add	r1, r5
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004a0:	e73b      	b.n	800031a <__udivmoddi4+0xfe>
 80004a2:	4637      	mov	r7, r6
 80004a4:	4630      	mov	r0, r6
 80004a6:	e709      	b.n	80002bc <__udivmoddi4+0xa0>
 80004a8:	4607      	mov	r7, r0
 80004aa:	e6e7      	b.n	800027c <__udivmoddi4+0x60>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6fb      	b.n	80002a8 <__udivmoddi4+0x8c>
 80004b0:	4541      	cmp	r1, r8
 80004b2:	d2ab      	bcs.n	800040c <__udivmoddi4+0x1f0>
 80004b4:	ebb8 0a02 	subs.w	sl, r8, r2
 80004b8:	eb69 020e 	sbc.w	r2, r9, lr
 80004bc:	3801      	subs	r0, #1
 80004be:	4613      	mov	r3, r2
 80004c0:	e7a4      	b.n	800040c <__udivmoddi4+0x1f0>
 80004c2:	4660      	mov	r0, ip
 80004c4:	e7e9      	b.n	800049a <__udivmoddi4+0x27e>
 80004c6:	4618      	mov	r0, r3
 80004c8:	e795      	b.n	80003f6 <__udivmoddi4+0x1da>
 80004ca:	4667      	mov	r7, ip
 80004cc:	e7d1      	b.n	8000472 <__udivmoddi4+0x256>
 80004ce:	4681      	mov	r9, r0
 80004d0:	e77c      	b.n	80003cc <__udivmoddi4+0x1b0>
 80004d2:	3802      	subs	r0, #2
 80004d4:	442c      	add	r4, r5
 80004d6:	e747      	b.n	8000368 <__udivmoddi4+0x14c>
 80004d8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004dc:	442b      	add	r3, r5
 80004de:	e72f      	b.n	8000340 <__udivmoddi4+0x124>
 80004e0:	4638      	mov	r0, r7
 80004e2:	e708      	b.n	80002f6 <__udivmoddi4+0xda>
 80004e4:	4637      	mov	r7, r6
 80004e6:	e6e9      	b.n	80002bc <__udivmoddi4+0xa0>

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80004f0:	f001 f90c 	bl	800170c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80004f4:	f000 f824 	bl	8000540 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80004f8:	f000 f908 	bl	800070c <MX_GPIO_Init>
	MX_USART3_UART_Init();
 80004fc:	f000 f8d8 	bl	80006b0 <MX_USART3_UART_Init>
	MX_CRC_Init();
 8000500:	f000 f890 	bl	8000624 <MX_CRC_Init>
	MX_USART1_UART_Init();
 8000504:	f000 f8a6 	bl	8000654 <MX_USART1_UART_Init>

	//{
	/* USER CODE END WHILE */

	/* USER CODE BEGIN 3 */
	if ( HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET )
 8000508:	2101      	movs	r1, #1
 800050a:	480a      	ldr	r0, [pc, #40]	; (8000534 <main+0x48>)
 800050c:	f002 f812 	bl	8002534 <HAL_GPIO_ReadPin>
 8000510:	4603      	mov	r3, r0
 8000512:	2b01      	cmp	r3, #1
 8000514:	d105      	bne.n	8000522 <main+0x36>
	{
		printmsg("BL_DEBUG_MSG:Button is pressed .. going to BL mode\r\n");
 8000516:	4808      	ldr	r0, [pc, #32]	; (8000538 <main+0x4c>)
 8000518:	f000 fa36 	bl	8000988 <printmsg>

		//we should continue in bootloader mode
		bootloader_uart_read_data();
 800051c:	f000 f980 	bl	8000820 <bootloader_uart_read_data>
 8000520:	e004      	b.n	800052c <main+0x40>

	}
	else
	{
		printmsg("BL_DEBUG_MSG:Button is not pressed .. executing user app\r\n");
 8000522:	4806      	ldr	r0, [pc, #24]	; (800053c <main+0x50>)
 8000524:	f000 fa30 	bl	8000988 <printmsg>

		//jump to user application
		bootloader_jump_to_user_app_1();
 8000528:	f000 f9fc 	bl	8000924 <bootloader_jump_to_user_app_1>
 800052c:	2300      	movs	r3, #0

	}
	// }
	/* USER CODE END 3 */
}
 800052e:	4618      	mov	r0, r3
 8000530:	bd80      	pop	{r7, pc}
 8000532:	bf00      	nop
 8000534:	40020000 	.word	0x40020000
 8000538:	080039b8 	.word	0x080039b8
 800053c:	080039f0 	.word	0x080039f0

08000540 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b094      	sub	sp, #80	; 0x50
 8000544:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000546:	f107 0320 	add.w	r3, r7, #32
 800054a:	2230      	movs	r2, #48	; 0x30
 800054c:	2100      	movs	r1, #0
 800054e:	4618      	mov	r0, r3
 8000550:	f003 fa1e 	bl	8003990 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000554:	f107 030c 	add.w	r3, r7, #12
 8000558:	2200      	movs	r2, #0
 800055a:	601a      	str	r2, [r3, #0]
 800055c:	605a      	str	r2, [r3, #4]
 800055e:	609a      	str	r2, [r3, #8]
 8000560:	60da      	str	r2, [r3, #12]
 8000562:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000564:	2300      	movs	r3, #0
 8000566:	60bb      	str	r3, [r7, #8]
 8000568:	4b2b      	ldr	r3, [pc, #172]	; (8000618 <SystemClock_Config+0xd8>)
 800056a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800056c:	4a2a      	ldr	r2, [pc, #168]	; (8000618 <SystemClock_Config+0xd8>)
 800056e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000572:	6413      	str	r3, [r2, #64]	; 0x40
 8000574:	4b28      	ldr	r3, [pc, #160]	; (8000618 <SystemClock_Config+0xd8>)
 8000576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000578:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800057c:	60bb      	str	r3, [r7, #8]
 800057e:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000580:	2300      	movs	r3, #0
 8000582:	607b      	str	r3, [r7, #4]
 8000584:	4b25      	ldr	r3, [pc, #148]	; (800061c <SystemClock_Config+0xdc>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800058c:	4a23      	ldr	r2, [pc, #140]	; (800061c <SystemClock_Config+0xdc>)
 800058e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000592:	6013      	str	r3, [r2, #0]
 8000594:	4b21      	ldr	r3, [pc, #132]	; (800061c <SystemClock_Config+0xdc>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800059c:	607b      	str	r3, [r7, #4]
 800059e:	687b      	ldr	r3, [r7, #4]
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005a0:	2302      	movs	r3, #2
 80005a2:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005a4:	2301      	movs	r3, #1
 80005a6:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005a8:	2310      	movs	r3, #16
 80005aa:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ac:	2302      	movs	r3, #2
 80005ae:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005b0:	2300      	movs	r3, #0
 80005b2:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 80005b4:	2308      	movs	r3, #8
 80005b6:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 84;
 80005b8:	2354      	movs	r3, #84	; 0x54
 80005ba:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005bc:	2302      	movs	r3, #2
 80005be:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 80005c0:	2307      	movs	r3, #7
 80005c2:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c4:	f107 0320 	add.w	r3, r7, #32
 80005c8:	4618      	mov	r0, r3
 80005ca:	f002 f809 	bl	80025e0 <HAL_RCC_OscConfig>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d003      	beq.n	80005dc <SystemClock_Config+0x9c>
	{
		Error_Handler();
 80005d4:	21b1      	movs	r1, #177	; 0xb1
 80005d6:	4812      	ldr	r0, [pc, #72]	; (8000620 <SystemClock_Config+0xe0>)
 80005d8:	f000 ff51 	bl	800147e <_Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005dc:	230f      	movs	r3, #15
 80005de:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005e0:	2302      	movs	r3, #2
 80005e2:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e4:	2300      	movs	r3, #0
 80005e6:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005ec:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80005ee:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005f2:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005f4:	f107 030c 	add.w	r3, r7, #12
 80005f8:	2102      	movs	r1, #2
 80005fa:	4618      	mov	r0, r3
 80005fc:	f002 fa60 	bl	8002ac0 <HAL_RCC_ClockConfig>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d003      	beq.n	800060e <SystemClock_Config+0xce>
	{
		Error_Handler();
 8000606:	21be      	movs	r1, #190	; 0xbe
 8000608:	4805      	ldr	r0, [pc, #20]	; (8000620 <SystemClock_Config+0xe0>)
 800060a:	f000 ff38 	bl	800147e <_Error_Handler>
	}
}
 800060e:	bf00      	nop
 8000610:	3750      	adds	r7, #80	; 0x50
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	40023800 	.word	0x40023800
 800061c:	40007000 	.word	0x40007000
 8000620:	08003a2c 	.word	0x08003a2c

08000624 <MX_CRC_Init>:
 * @brief CRC Initialization Function
 * @param None
 * @retval None
 */
static void MX_CRC_Init(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
	/* USER CODE END CRC_Init 0 */

	/* USER CODE BEGIN CRC_Init 1 */

	/* USER CODE END CRC_Init 1 */
	hcrc.Instance = CRC;
 8000628:	4b07      	ldr	r3, [pc, #28]	; (8000648 <MX_CRC_Init+0x24>)
 800062a:	4a08      	ldr	r2, [pc, #32]	; (800064c <MX_CRC_Init+0x28>)
 800062c:	601a      	str	r2, [r3, #0]
	if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800062e:	4806      	ldr	r0, [pc, #24]	; (8000648 <MX_CRC_Init+0x24>)
 8000630:	f001 f9ef 	bl	8001a12 <HAL_CRC_Init>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d003      	beq.n	8000642 <MX_CRC_Init+0x1e>
	{
		Error_Handler();
 800063a:	21d4      	movs	r1, #212	; 0xd4
 800063c:	4804      	ldr	r0, [pc, #16]	; (8000650 <MX_CRC_Init+0x2c>)
 800063e:	f000 ff1e 	bl	800147e <_Error_Handler>
	}
	/* USER CODE BEGIN CRC_Init 2 */

	/* USER CODE END CRC_Init 2 */

}
 8000642:	bf00      	nop
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	20000074 	.word	0x20000074
 800064c:	40023000 	.word	0x40023000
 8000650:	08003a2c 	.word	0x08003a2c

08000654 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000658:	4b12      	ldr	r3, [pc, #72]	; (80006a4 <MX_USART1_UART_Init+0x50>)
 800065a:	4a13      	ldr	r2, [pc, #76]	; (80006a8 <MX_USART1_UART_Init+0x54>)
 800065c:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 800065e:	4b11      	ldr	r3, [pc, #68]	; (80006a4 <MX_USART1_UART_Init+0x50>)
 8000660:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000664:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000666:	4b0f      	ldr	r3, [pc, #60]	; (80006a4 <MX_USART1_UART_Init+0x50>)
 8000668:	2200      	movs	r2, #0
 800066a:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 800066c:	4b0d      	ldr	r3, [pc, #52]	; (80006a4 <MX_USART1_UART_Init+0x50>)
 800066e:	2200      	movs	r2, #0
 8000670:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000672:	4b0c      	ldr	r3, [pc, #48]	; (80006a4 <MX_USART1_UART_Init+0x50>)
 8000674:	2200      	movs	r2, #0
 8000676:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000678:	4b0a      	ldr	r3, [pc, #40]	; (80006a4 <MX_USART1_UART_Init+0x50>)
 800067a:	220c      	movs	r2, #12
 800067c:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800067e:	4b09      	ldr	r3, [pc, #36]	; (80006a4 <MX_USART1_UART_Init+0x50>)
 8000680:	2200      	movs	r2, #0
 8000682:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000684:	4b07      	ldr	r3, [pc, #28]	; (80006a4 <MX_USART1_UART_Init+0x50>)
 8000686:	2200      	movs	r2, #0
 8000688:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 800068a:	4806      	ldr	r0, [pc, #24]	; (80006a4 <MX_USART1_UART_Init+0x50>)
 800068c:	f002 fc0a 	bl	8002ea4 <HAL_UART_Init>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d003      	beq.n	800069e <MX_USART1_UART_Init+0x4a>
	{
		Error_Handler();
 8000696:	21f5      	movs	r1, #245	; 0xf5
 8000698:	4804      	ldr	r0, [pc, #16]	; (80006ac <MX_USART1_UART_Init+0x58>)
 800069a:	f000 fef0 	bl	800147e <_Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 800069e:	bf00      	nop
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	2000007c 	.word	0x2000007c
 80006a8:	40011000 	.word	0x40011000
 80006ac:	08003a2c 	.word	0x08003a2c

080006b0 <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 80006b4:	4b12      	ldr	r3, [pc, #72]	; (8000700 <MX_USART3_UART_Init+0x50>)
 80006b6:	4a13      	ldr	r2, [pc, #76]	; (8000704 <MX_USART3_UART_Init+0x54>)
 80006b8:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 80006ba:	4b11      	ldr	r3, [pc, #68]	; (8000700 <MX_USART3_UART_Init+0x50>)
 80006bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006c0:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80006c2:	4b0f      	ldr	r3, [pc, #60]	; (8000700 <MX_USART3_UART_Init+0x50>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 80006c8:	4b0d      	ldr	r3, [pc, #52]	; (8000700 <MX_USART3_UART_Init+0x50>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 80006ce:	4b0c      	ldr	r3, [pc, #48]	; (8000700 <MX_USART3_UART_Init+0x50>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 80006d4:	4b0a      	ldr	r3, [pc, #40]	; (8000700 <MX_USART3_UART_Init+0x50>)
 80006d6:	220c      	movs	r2, #12
 80006d8:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006da:	4b09      	ldr	r3, [pc, #36]	; (8000700 <MX_USART3_UART_Init+0x50>)
 80006dc:	2200      	movs	r2, #0
 80006de:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80006e0:	4b07      	ldr	r3, [pc, #28]	; (8000700 <MX_USART3_UART_Init+0x50>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK)
 80006e6:	4806      	ldr	r0, [pc, #24]	; (8000700 <MX_USART3_UART_Init+0x50>)
 80006e8:	f002 fbdc 	bl	8002ea4 <HAL_UART_Init>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d004      	beq.n	80006fc <MX_USART3_UART_Init+0x4c>
	{
		Error_Handler();
 80006f2:	f44f 718b 	mov.w	r1, #278	; 0x116
 80006f6:	4804      	ldr	r0, [pc, #16]	; (8000708 <MX_USART3_UART_Init+0x58>)
 80006f8:	f000 fec1 	bl	800147e <_Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 80006fc:	bf00      	nop
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	20000034 	.word	0x20000034
 8000704:	40004800 	.word	0x40004800
 8000708:	08003a2c 	.word	0x08003a2c

0800070c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b08a      	sub	sp, #40	; 0x28
 8000710:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000712:	f107 0314 	add.w	r3, r7, #20
 8000716:	2200      	movs	r2, #0
 8000718:	601a      	str	r2, [r3, #0]
 800071a:	605a      	str	r2, [r3, #4]
 800071c:	609a      	str	r2, [r3, #8]
 800071e:	60da      	str	r2, [r3, #12]
 8000720:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000722:	2300      	movs	r3, #0
 8000724:	613b      	str	r3, [r7, #16]
 8000726:	4b39      	ldr	r3, [pc, #228]	; (800080c <MX_GPIO_Init+0x100>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	4a38      	ldr	r2, [pc, #224]	; (800080c <MX_GPIO_Init+0x100>)
 800072c:	f043 0301 	orr.w	r3, r3, #1
 8000730:	6313      	str	r3, [r2, #48]	; 0x30
 8000732:	4b36      	ldr	r3, [pc, #216]	; (800080c <MX_GPIO_Init+0x100>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	f003 0301 	and.w	r3, r3, #1
 800073a:	613b      	str	r3, [r7, #16]
 800073c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800073e:	2300      	movs	r3, #0
 8000740:	60fb      	str	r3, [r7, #12]
 8000742:	4b32      	ldr	r3, [pc, #200]	; (800080c <MX_GPIO_Init+0x100>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	4a31      	ldr	r2, [pc, #196]	; (800080c <MX_GPIO_Init+0x100>)
 8000748:	f043 0302 	orr.w	r3, r3, #2
 800074c:	6313      	str	r3, [r2, #48]	; 0x30
 800074e:	4b2f      	ldr	r3, [pc, #188]	; (800080c <MX_GPIO_Init+0x100>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	f003 0302 	and.w	r3, r3, #2
 8000756:	60fb      	str	r3, [r7, #12]
 8000758:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	60bb      	str	r3, [r7, #8]
 800075e:	4b2b      	ldr	r3, [pc, #172]	; (800080c <MX_GPIO_Init+0x100>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	4a2a      	ldr	r2, [pc, #168]	; (800080c <MX_GPIO_Init+0x100>)
 8000764:	f043 0308 	orr.w	r3, r3, #8
 8000768:	6313      	str	r3, [r2, #48]	; 0x30
 800076a:	4b28      	ldr	r3, [pc, #160]	; (800080c <MX_GPIO_Init+0x100>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	f003 0308 	and.w	r3, r3, #8
 8000772:	60bb      	str	r3, [r7, #8]
 8000774:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	607b      	str	r3, [r7, #4]
 800077a:	4b24      	ldr	r3, [pc, #144]	; (800080c <MX_GPIO_Init+0x100>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	4a23      	ldr	r2, [pc, #140]	; (800080c <MX_GPIO_Init+0x100>)
 8000780:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000784:	6313      	str	r3, [r2, #48]	; 0x30
 8000786:	4b21      	ldr	r3, [pc, #132]	; (800080c <MX_GPIO_Init+0x100>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800078e:	607b      	str	r3, [r7, #4]
 8000790:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_RESET);
 8000792:	2200      	movs	r2, #0
 8000794:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000798:	481d      	ldr	r0, [pc, #116]	; (8000810 <MX_GPIO_Init+0x104>)
 800079a:	f001 fee3 	bl	8002564 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PA0 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 800079e:	2301      	movs	r3, #1
 80007a0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007a2:	4b1c      	ldr	r3, [pc, #112]	; (8000814 <MX_GPIO_Init+0x108>)
 80007a4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a6:	2300      	movs	r3, #0
 80007a8:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007aa:	f107 0314 	add.w	r3, r7, #20
 80007ae:	4619      	mov	r1, r3
 80007b0:	4819      	ldr	r0, [pc, #100]	; (8000818 <MX_GPIO_Init+0x10c>)
 80007b2:	f001 fd15 	bl	80021e0 <HAL_GPIO_Init>

	/*Configure GPIO pins : PD5 PD6 */
	GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80007b6:	2360      	movs	r3, #96	; 0x60
 80007b8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ba:	2302      	movs	r3, #2
 80007bc:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007be:	2300      	movs	r3, #0
 80007c0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007c2:	2303      	movs	r3, #3
 80007c4:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80007c6:	2307      	movs	r3, #7
 80007c8:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007ca:	f107 0314 	add.w	r3, r7, #20
 80007ce:	4619      	mov	r1, r3
 80007d0:	4812      	ldr	r0, [pc, #72]	; (800081c <MX_GPIO_Init+0x110>)
 80007d2:	f001 fd05 	bl	80021e0 <HAL_GPIO_Init>

	/*Configure GPIO pin : PG13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 80007d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007da:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007dc:	2301      	movs	r3, #1
 80007de:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e0:	2300      	movs	r3, #0
 80007e2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e4:	2300      	movs	r3, #0
 80007e6:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007e8:	f107 0314 	add.w	r3, r7, #20
 80007ec:	4619      	mov	r1, r3
 80007ee:	4808      	ldr	r0, [pc, #32]	; (8000810 <MX_GPIO_Init+0x104>)
 80007f0:	f001 fcf6 	bl	80021e0 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80007f4:	2200      	movs	r2, #0
 80007f6:	2100      	movs	r1, #0
 80007f8:	2006      	movs	r0, #6
 80007fa:	f001 f8d4 	bl	80019a6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80007fe:	2006      	movs	r0, #6
 8000800:	f001 f8ed 	bl	80019de <HAL_NVIC_EnableIRQ>

}
 8000804:	bf00      	nop
 8000806:	3728      	adds	r7, #40	; 0x28
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	40023800 	.word	0x40023800
 8000810:	40021800 	.word	0x40021800
 8000814:	10210000 	.word	0x10210000
 8000818:	40020000 	.word	0x40020000
 800081c:	40020c00 	.word	0x40020c00

08000820 <bootloader_uart_read_data>:

/* USER CODE BEGIN 4 */
void  bootloader_uart_read_data(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
	uint8_t rcv_len=0;
 8000826:	2300      	movs	r3, #0
 8000828:	71fb      	strb	r3, [r7, #7]

	while(1)
	{
		memset(bl_rx_buffer,0,200);
 800082a:	22c8      	movs	r2, #200	; 0xc8
 800082c:	2100      	movs	r1, #0
 800082e:	4839      	ldr	r0, [pc, #228]	; (8000914 <bootloader_uart_read_data+0xf4>)
 8000830:	f003 f8ae 	bl	8003990 <memset>
		//here we will read and decode the commands coming from host
		//first read only one byte from the host , which is the "length" field of the command packet
		HAL_UART_Receive(C_UART,bl_rx_buffer,1,HAL_MAX_DELAY);
 8000834:	f04f 33ff 	mov.w	r3, #4294967295
 8000838:	2201      	movs	r2, #1
 800083a:	4936      	ldr	r1, [pc, #216]	; (8000914 <bootloader_uart_read_data+0xf4>)
 800083c:	4836      	ldr	r0, [pc, #216]	; (8000918 <bootloader_uart_read_data+0xf8>)
 800083e:	f002 fc17 	bl	8003070 <HAL_UART_Receive>
		rcv_len= bl_rx_buffer[0];
 8000842:	4b34      	ldr	r3, [pc, #208]	; (8000914 <bootloader_uart_read_data+0xf4>)
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	71fb      	strb	r3, [r7, #7]
		HAL_UART_Receive(C_UART,&bl_rx_buffer[1],rcv_len,HAL_MAX_DELAY);
 8000848:	79fb      	ldrb	r3, [r7, #7]
 800084a:	b29a      	uxth	r2, r3
 800084c:	f04f 33ff 	mov.w	r3, #4294967295
 8000850:	4932      	ldr	r1, [pc, #200]	; (800091c <bootloader_uart_read_data+0xfc>)
 8000852:	4831      	ldr	r0, [pc, #196]	; (8000918 <bootloader_uart_read_data+0xf8>)
 8000854:	f002 fc0c 	bl	8003070 <HAL_UART_Receive>
		switch(bl_rx_buffer[1])
 8000858:	4b2e      	ldr	r3, [pc, #184]	; (8000914 <bootloader_uart_read_data+0xf4>)
 800085a:	785b      	ldrb	r3, [r3, #1]
 800085c:	3b51      	subs	r3, #81	; 0x51
 800085e:	2b0d      	cmp	r3, #13
 8000860:	d852      	bhi.n	8000908 <bootloader_uart_read_data+0xe8>
 8000862:	a201      	add	r2, pc, #4	; (adr r2, 8000868 <bootloader_uart_read_data+0x48>)
 8000864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000868:	080008a1 	.word	0x080008a1
 800086c:	080008a9 	.word	0x080008a9
 8000870:	080008b1 	.word	0x080008b1
 8000874:	080008b9 	.word	0x080008b9
 8000878:	080008c1 	.word	0x080008c1
 800087c:	080008c9 	.word	0x080008c9
 8000880:	080008d1 	.word	0x080008d1
 8000884:	080008d9 	.word	0x080008d9
 8000888:	080008e1 	.word	0x080008e1
 800088c:	080008e9 	.word	0x080008e9
 8000890:	080008f1 	.word	0x080008f1
 8000894:	080008f9 	.word	0x080008f9
 8000898:	08000901 	.word	0x08000901
 800089c:	08000905 	.word	0x08000905
		{
		case BL_GET_VER:
			bootloader_handle_getver_cmd(bl_rx_buffer);
 80008a0:	481c      	ldr	r0, [pc, #112]	; (8000914 <bootloader_uart_read_data+0xf4>)
 80008a2:	f000 f87b 	bl	800099c <bootloader_handle_getver_cmd>
			break;
 80008a6:	e033      	b.n	8000910 <bootloader_uart_read_data+0xf0>
		case BL_GET_HELP:
			bootloader_handle_gethelp_cmd(bl_rx_buffer);
 80008a8:	481a      	ldr	r0, [pc, #104]	; (8000914 <bootloader_uart_read_data+0xf4>)
 80008aa:	f000 f8bf 	bl	8000a2c <bootloader_handle_gethelp_cmd>
			break;
 80008ae:	e02f      	b.n	8000910 <bootloader_uart_read_data+0xf0>
		case BL_GET_CID:
			bootloader_handle_getcid_cmd(bl_rx_buffer);
 80008b0:	4818      	ldr	r0, [pc, #96]	; (8000914 <bootloader_uart_read_data+0xf4>)
 80008b2:	f000 f8f7 	bl	8000aa4 <bootloader_handle_getcid_cmd>
			break;
 80008b6:	e02b      	b.n	8000910 <bootloader_uart_read_data+0xf0>
		case BL_GET_RDP_STATUS:
			bootloader_handle_getrdp_cmd(bl_rx_buffer);
 80008b8:	4816      	ldr	r0, [pc, #88]	; (8000914 <bootloader_uart_read_data+0xf4>)
 80008ba:	f000 f93f 	bl	8000b3c <bootloader_handle_getrdp_cmd>
			break;
 80008be:	e027      	b.n	8000910 <bootloader_uart_read_data+0xf0>
		case BL_GO_TO_ADDR:
			bootloader_handle_go_cmd(bl_rx_buffer);
 80008c0:	4814      	ldr	r0, [pc, #80]	; (8000914 <bootloader_uart_read_data+0xf4>)
 80008c2:	f000 f987 	bl	8000bd4 <bootloader_handle_go_cmd>
			break;
 80008c6:	e023      	b.n	8000910 <bootloader_uart_read_data+0xf0>
		case BL_FLASH_ERASE:
			bootloader_handle_flash_erase_cmd(bl_rx_buffer);
 80008c8:	4812      	ldr	r0, [pc, #72]	; (8000914 <bootloader_uart_read_data+0xf4>)
 80008ca:	f000 f9ed 	bl	8000ca8 <bootloader_handle_flash_erase_cmd>
			break;
 80008ce:	e01f      	b.n	8000910 <bootloader_uart_read_data+0xf0>
		case BL_MEM_WRITE:
			bootloader_handle_mem_write_cmd(bl_rx_buffer);
 80008d0:	4810      	ldr	r0, [pc, #64]	; (8000914 <bootloader_uart_read_data+0xf4>)
 80008d2:	f000 fa55 	bl	8000d80 <bootloader_handle_mem_write_cmd>
			break;
 80008d6:	e01b      	b.n	8000910 <bootloader_uart_read_data+0xf0>
		case BL_EN_RW_PROTECT:
			bootloader_handle_en_rw_protect(bl_rx_buffer);
 80008d8:	480e      	ldr	r0, [pc, #56]	; (8000914 <bootloader_uart_read_data+0xf4>)
 80008da:	f000 fadb 	bl	8000e94 <bootloader_handle_en_rw_protect>
			break;
 80008de:	e017      	b.n	8000910 <bootloader_uart_read_data+0xf0>
		case BL_MEM_READ:
			bootloader_handle_mem_read(bl_rx_buffer);
 80008e0:	480c      	ldr	r0, [pc, #48]	; (8000914 <bootloader_uart_read_data+0xf4>)
 80008e2:	f000 fb75 	bl	8000fd0 <bootloader_handle_mem_read>
			break;
 80008e6:	e013      	b.n	8000910 <bootloader_uart_read_data+0xf0>
		case BL_READ_SECTOR_P_STATUS:
			bootloader_handle_read_sector_protection_status(bl_rx_buffer);
 80008e8:	480a      	ldr	r0, [pc, #40]	; (8000914 <bootloader_uart_read_data+0xf4>)
 80008ea:	f000 fb7b 	bl	8000fe4 <bootloader_handle_read_sector_protection_status>
			break;
 80008ee:	e00f      	b.n	8000910 <bootloader_uart_read_data+0xf0>
		case BL_OTP_READ:
			bootloader_handle_read_otp(bl_rx_buffer);
 80008f0:	4808      	ldr	r0, [pc, #32]	; (8000914 <bootloader_uart_read_data+0xf4>)
 80008f2:	f000 fbbf 	bl	8001074 <bootloader_handle_read_otp>
			break;
 80008f6:	e00b      	b.n	8000910 <bootloader_uart_read_data+0xf0>
		case BL_DIS_R_W_PROTECT:
			bootloader_handle_dis_rw_protect(bl_rx_buffer);
 80008f8:	4806      	ldr	r0, [pc, #24]	; (8000914 <bootloader_uart_read_data+0xf4>)
 80008fa:	f000 fb1d 	bl	8000f38 <bootloader_handle_dis_rw_protect>
			break;
 80008fe:	e007      	b.n	8000910 <bootloader_uart_read_data+0xf0>
		case BL_BOOT_APPLICATION_1:
			bootloader_jump_to_user_app_1();
 8000900:	f000 f810 	bl	8000924 <bootloader_jump_to_user_app_1>
		case BL_BOOT_APPLICATION_2:
					bootloader_jump_to_user_app_1();
 8000904:	f000 f80e 	bl	8000924 <bootloader_jump_to_user_app_1>
		default:
			printmsg("BL_DEBUG_MSG:Invalid command code received from host \r\n");
 8000908:	4805      	ldr	r0, [pc, #20]	; (8000920 <bootloader_uart_read_data+0x100>)
 800090a:	f000 f83d 	bl	8000988 <printmsg>
			break;
 800090e:	bf00      	nop
	{
 8000910:	e78b      	b.n	800082a <bootloader_uart_read_data+0xa>
 8000912:	bf00      	nop
 8000914:	200000bc 	.word	0x200000bc
 8000918:	2000007c 	.word	0x2000007c
 800091c:	200000bd 	.word	0x200000bd
 8000920:	08003a40 	.word	0x08003a40

08000924 <bootloader_jump_to_user_app_1>:
 *is where the user application is stored
 */


void bootloader_jump_to_user_app_1(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b084      	sub	sp, #16
 8000928:	af00      	add	r7, sp, #0

	//just a function pointer to hold the address of the reset handler of the user app.
	void (*app_reset_handler)(void);

	printmsg("BL_DEBUG_MSG:bootloader_jump_to_user_app\r\n");
 800092a:	4811      	ldr	r0, [pc, #68]	; (8000970 <bootloader_jump_to_user_app_1+0x4c>)
 800092c:	f000 f82c 	bl	8000988 <printmsg>


	// 1. configure the MSP by reading the value from the base address of the sector 2
	uint32_t msp_value = *(volatile uint32_t *)FLASH_SECTOR2_BASE_ADDRESS;
 8000930:	4b10      	ldr	r3, [pc, #64]	; (8000974 <bootloader_jump_to_user_app_1+0x50>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	60fb      	str	r3, [r7, #12]
	printmsg("BL_DEBUG_MSG:MSP value : %#x\r\n",msp_value);
 8000936:	68f9      	ldr	r1, [r7, #12]
 8000938:	480f      	ldr	r0, [pc, #60]	; (8000978 <bootloader_jump_to_user_app_1+0x54>)
 800093a:	f000 f825 	bl	8000988 <printmsg>
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000942:	683b      	ldr	r3, [r7, #0]
 8000944:	f383 8808 	msr	MSP, r3
	//SCB->VTOR = FLASH_SECTOR1_BASE_ADDRESS;

	/* 2. Now fetch the reset handler address of the user application
	 * from the location FLASH_SECTOR2_BASE_ADDRESS+4
	 */
	uint32_t resethandler_address = *(volatile uint32_t *) (FLASH_SECTOR2_BASE_ADDRESS + 4);
 8000948:	4b0c      	ldr	r3, [pc, #48]	; (800097c <bootloader_jump_to_user_app_1+0x58>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	60bb      	str	r3, [r7, #8]
	printmsg("BL_DEBUG_MSG: Reset Handler Addr_1st : %#x\r\n",resethandler_address);
 800094e:	68b9      	ldr	r1, [r7, #8]
 8000950:	480b      	ldr	r0, [pc, #44]	; (8000980 <bootloader_jump_to_user_app_1+0x5c>)
 8000952:	f000 f819 	bl	8000988 <printmsg>


	app_reset_handler = (void*) resethandler_address;
 8000956:	68bb      	ldr	r3, [r7, #8]
 8000958:	607b      	str	r3, [r7, #4]
	//app_reset_handler =(void*) 0x08008789U;
	printmsg("BL_DEBUG_MSG: Application Reset Handler Addr : %#x\r\n",app_reset_handler);
 800095a:	6879      	ldr	r1, [r7, #4]
 800095c:	4809      	ldr	r0, [pc, #36]	; (8000984 <bootloader_jump_to_user_app_1+0x60>)
 800095e:	f000 f813 	bl	8000988 <printmsg>


	//3. jump to reset handler of the user application
	app_reset_handler();
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	4798      	blx	r3

}
 8000966:	bf00      	nop
 8000968:	3710      	adds	r7, #16
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	08003a78 	.word	0x08003a78
 8000974:	08008000 	.word	0x08008000
 8000978:	08003aa4 	.word	0x08003aa4
 800097c:	08008004 	.word	0x08008004
 8000980:	08003ac4 	.word	0x08003ac4
 8000984:	08003af4 	.word	0x08003af4

08000988 <printmsg>:
	//3. jump to reset handler of the user application
	app_reset_handler();

}
void printmsg(char *format,...)
{
 8000988:	b40f      	push	{r0, r1, r2, r3}
 800098a:	b480      	push	{r7}
 800098c:	af00      	add	r7, sp, #0
	va_start(args, format);
	vsprintf(str, format,args);
	HAL_UART_Transmit(D_UART,(uint8_t *)str, strlen(str),HAL_MAX_DELAY);
	va_end(args);
#endif
}
 800098e:	bf00      	nop
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	b004      	add	sp, #16
 8000998:	4770      	bx	lr
	...

0800099c <bootloader_handle_getver_cmd>:

/**************Implementation of Boot-loader Command Handle functions *********/

/*Helper function to handle BL_GET_VER command */
void bootloader_handle_getver_cmd(uint8_t *bl_rx_buffer)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b086      	sub	sp, #24
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
	uint8_t bl_version;

	// 1) verify the checksum
	printmsg("BL_DEBUG_MSG:bootloader_handle_getver_cmd\r\n");
 80009a4:	481d      	ldr	r0, [pc, #116]	; (8000a1c <bootloader_handle_getver_cmd+0x80>)
 80009a6:	f7ff ffef 	bl	8000988 <printmsg>

	//Total length of the command packet
	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	3301      	adds	r3, #1
 80009b0:	617b      	str	r3, [r7, #20]

	//extract the CRC32 sent by the Host
	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 80009b2:	697b      	ldr	r3, [r7, #20]
 80009b4:	3b04      	subs	r3, #4
 80009b6:	687a      	ldr	r2, [r7, #4]
 80009b8:	4413      	add	r3, r2
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	613b      	str	r3, [r7, #16]

	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 80009be:	697b      	ldr	r3, [r7, #20]
 80009c0:	3b04      	subs	r3, #4
 80009c2:	693a      	ldr	r2, [r7, #16]
 80009c4:	4619      	mov	r1, r3
 80009c6:	6878      	ldr	r0, [r7, #4]
 80009c8:	f000 fb8a 	bl	80010e0 <bootloader_verify_crc>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d11a      	bne.n	8000a08 <bootloader_handle_getver_cmd+0x6c>
	{
		printmsg("BL_DEBUG_MSG:checksum success !!\r\n");
 80009d2:	4813      	ldr	r0, [pc, #76]	; (8000a20 <bootloader_handle_getver_cmd+0x84>)
 80009d4:	f7ff ffd8 	bl	8000988 <printmsg>
		// checksum is correct..
		bootloader_send_ack(bl_rx_buffer[0],1);
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	2101      	movs	r1, #1
 80009de:	4618      	mov	r0, r3
 80009e0:	f000 fb52 	bl	8001088 <bootloader_send_ack>
		bl_version=get_bootloader_version();
 80009e4:	f000 fbc4 	bl	8001170 <get_bootloader_version>
 80009e8:	4603      	mov	r3, r0
 80009ea:	73fb      	strb	r3, [r7, #15]
		printmsg("BL_DEBUG_MSG:BL_VER : %d %#x\r\n",bl_version,bl_version);
 80009ec:	7bfb      	ldrb	r3, [r7, #15]
 80009ee:	4619      	mov	r1, r3
 80009f0:	7bfb      	ldrb	r3, [r7, #15]
 80009f2:	461a      	mov	r2, r3
 80009f4:	480b      	ldr	r0, [pc, #44]	; (8000a24 <bootloader_handle_getver_cmd+0x88>)
 80009f6:	f7ff ffc7 	bl	8000988 <printmsg>
		bootloader_uart_write_data(&bl_version,1);
 80009fa:	f107 030f 	add.w	r3, r7, #15
 80009fe:	2101      	movs	r1, #1
 8000a00:	4618      	mov	r0, r3
 8000a02:	f000 fba1 	bl	8001148 <bootloader_uart_write_data>
		//checksum is wrong send nack
		bootloader_send_nack();
	}


}
 8000a06:	e004      	b.n	8000a12 <bootloader_handle_getver_cmd+0x76>
		printmsg("BL_DEBUG_MSG:checksum fail !!\r\n");
 8000a08:	4807      	ldr	r0, [pc, #28]	; (8000a28 <bootloader_handle_getver_cmd+0x8c>)
 8000a0a:	f7ff ffbd 	bl	8000988 <printmsg>
		bootloader_send_nack();
 8000a0e:	f000 fb55 	bl	80010bc <bootloader_send_nack>
}
 8000a12:	bf00      	nop
 8000a14:	3718      	adds	r7, #24
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	08003b2c 	.word	0x08003b2c
 8000a20:	08003b58 	.word	0x08003b58
 8000a24:	08003b7c 	.word	0x08003b7c
 8000a28:	08003b9c 	.word	0x08003b9c

08000a2c <bootloader_handle_gethelp_cmd>:

/*Helper function to handle BL_GET_HELP command
 * Bootloader sends out All supported Command codes
 */
void bootloader_handle_gethelp_cmd(uint8_t *pBuffer)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b084      	sub	sp, #16
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
	printmsg("BL_DEBUG_MSG:bootloader_handle_gethelp_cmd\r\n");
 8000a34:	4816      	ldr	r0, [pc, #88]	; (8000a90 <bootloader_handle_gethelp_cmd+0x64>)
 8000a36:	f7ff ffa7 	bl	8000988 <printmsg>

	//Total length of the command packet
	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 8000a3a:	4b16      	ldr	r3, [pc, #88]	; (8000a94 <bootloader_handle_gethelp_cmd+0x68>)
 8000a3c:	781b      	ldrb	r3, [r3, #0]
 8000a3e:	3301      	adds	r3, #1
 8000a40:	60fb      	str	r3, [r7, #12]

	//extract the CRC32 sent by the Host
	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	3b04      	subs	r3, #4
 8000a46:	4a13      	ldr	r2, [pc, #76]	; (8000a94 <bootloader_handle_gethelp_cmd+0x68>)
 8000a48:	4413      	add	r3, r2
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	60bb      	str	r3, [r7, #8]

	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	3b04      	subs	r3, #4
 8000a52:	68ba      	ldr	r2, [r7, #8]
 8000a54:	4619      	mov	r1, r3
 8000a56:	480f      	ldr	r0, [pc, #60]	; (8000a94 <bootloader_handle_gethelp_cmd+0x68>)
 8000a58:	f000 fb42 	bl	80010e0 <bootloader_verify_crc>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d10d      	bne.n	8000a7e <bootloader_handle_gethelp_cmd+0x52>
	{
		printmsg("BL_DEBUG_MSG:checksum success !!\r\n");
 8000a62:	480d      	ldr	r0, [pc, #52]	; (8000a98 <bootloader_handle_gethelp_cmd+0x6c>)
 8000a64:	f7ff ff90 	bl	8000988 <printmsg>
		bootloader_send_ack(pBuffer[0],sizeof(supported_commands));
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	210a      	movs	r1, #10
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f000 fb0a 	bl	8001088 <bootloader_send_ack>
		bootloader_uart_write_data(supported_commands,sizeof(supported_commands) );
 8000a74:	210a      	movs	r1, #10
 8000a76:	4809      	ldr	r0, [pc, #36]	; (8000a9c <bootloader_handle_gethelp_cmd+0x70>)
 8000a78:	f000 fb66 	bl	8001148 <bootloader_uart_write_data>
	{
		printmsg("BL_DEBUG_MSG:checksum fail !!\r\n");
		bootloader_send_nack();
	}

}
 8000a7c:	e004      	b.n	8000a88 <bootloader_handle_gethelp_cmd+0x5c>
		printmsg("BL_DEBUG_MSG:checksum fail !!\r\n");
 8000a7e:	4808      	ldr	r0, [pc, #32]	; (8000aa0 <bootloader_handle_gethelp_cmd+0x74>)
 8000a80:	f7ff ff82 	bl	8000988 <printmsg>
		bootloader_send_nack();
 8000a84:	f000 fb1a 	bl	80010bc <bootloader_send_nack>
}
 8000a88:	bf00      	nop
 8000a8a:	3710      	adds	r7, #16
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	08003bbc 	.word	0x08003bbc
 8000a94:	200000bc 	.word	0x200000bc
 8000a98:	08003b58 	.word	0x08003b58
 8000a9c:	20000000 	.word	0x20000000
 8000aa0:	08003b9c 	.word	0x08003b9c

08000aa4 <bootloader_handle_getcid_cmd>:

/*Helper function to handle BL_GET_CID command */
void bootloader_handle_getcid_cmd(uint8_t *pBuffer)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b086      	sub	sp, #24
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
	uint16_t bl_cid_num = 0;
 8000aac:	2300      	movs	r3, #0
 8000aae:	81fb      	strh	r3, [r7, #14]
	printmsg("BL_DEBUG_MSG:bootloader_handle_getcid_cmd\r\n");
 8000ab0:	481d      	ldr	r0, [pc, #116]	; (8000b28 <bootloader_handle_getcid_cmd+0x84>)
 8000ab2:	f7ff ff69 	bl	8000988 <printmsg>

	//Total length of the command packet
	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 8000ab6:	4b1d      	ldr	r3, [pc, #116]	; (8000b2c <bootloader_handle_getcid_cmd+0x88>)
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	3301      	adds	r3, #1
 8000abc:	617b      	str	r3, [r7, #20]

	//extract the CRC32 sent by the Host
	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 8000abe:	697b      	ldr	r3, [r7, #20]
 8000ac0:	3b04      	subs	r3, #4
 8000ac2:	4a1a      	ldr	r2, [pc, #104]	; (8000b2c <bootloader_handle_getcid_cmd+0x88>)
 8000ac4:	4413      	add	r3, r2
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	613b      	str	r3, [r7, #16]

	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 8000aca:	697b      	ldr	r3, [r7, #20]
 8000acc:	3b04      	subs	r3, #4
 8000ace:	693a      	ldr	r2, [r7, #16]
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4816      	ldr	r0, [pc, #88]	; (8000b2c <bootloader_handle_getcid_cmd+0x88>)
 8000ad4:	f000 fb04 	bl	80010e0 <bootloader_verify_crc>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d11a      	bne.n	8000b14 <bootloader_handle_getcid_cmd+0x70>
	{
		printmsg("BL_DEBUG_MSG:checksum success !!\r\n");
 8000ade:	4814      	ldr	r0, [pc, #80]	; (8000b30 <bootloader_handle_getcid_cmd+0x8c>)
 8000ae0:	f7ff ff52 	bl	8000988 <printmsg>
		bootloader_send_ack(pBuffer[0],2);
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	2102      	movs	r1, #2
 8000aea:	4618      	mov	r0, r3
 8000aec:	f000 facc 	bl	8001088 <bootloader_send_ack>
		bl_cid_num = get_mcu_chip_id();
 8000af0:	f000 fb46 	bl	8001180 <get_mcu_chip_id>
 8000af4:	4603      	mov	r3, r0
 8000af6:	81fb      	strh	r3, [r7, #14]
		printmsg("BL_DEBUG_MSG:MCU id : %d %#x !!\r\n",bl_cid_num, bl_cid_num);
 8000af8:	89fb      	ldrh	r3, [r7, #14]
 8000afa:	4619      	mov	r1, r3
 8000afc:	89fb      	ldrh	r3, [r7, #14]
 8000afe:	461a      	mov	r2, r3
 8000b00:	480c      	ldr	r0, [pc, #48]	; (8000b34 <bootloader_handle_getcid_cmd+0x90>)
 8000b02:	f7ff ff41 	bl	8000988 <printmsg>
		bootloader_uart_write_data((uint8_t *)&bl_cid_num,2);
 8000b06:	f107 030e 	add.w	r3, r7, #14
 8000b0a:	2102      	movs	r1, #2
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f000 fb1b 	bl	8001148 <bootloader_uart_write_data>
		printmsg("BL_DEBUG_MSG:checksum fail !!\r\n");
		bootloader_send_nack();
	}


}
 8000b12:	e004      	b.n	8000b1e <bootloader_handle_getcid_cmd+0x7a>
		printmsg("BL_DEBUG_MSG:checksum fail !!\r\n");
 8000b14:	4808      	ldr	r0, [pc, #32]	; (8000b38 <bootloader_handle_getcid_cmd+0x94>)
 8000b16:	f7ff ff37 	bl	8000988 <printmsg>
		bootloader_send_nack();
 8000b1a:	f000 facf 	bl	80010bc <bootloader_send_nack>
}
 8000b1e:	bf00      	nop
 8000b20:	3718      	adds	r7, #24
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	08003bec 	.word	0x08003bec
 8000b2c:	200000bc 	.word	0x200000bc
 8000b30:	08003b58 	.word	0x08003b58
 8000b34:	08003c18 	.word	0x08003c18
 8000b38:	08003b9c 	.word	0x08003b9c

08000b3c <bootloader_handle_getrdp_cmd>:

/*Helper function to handle BL_GET_RDP_STATUS command */
void bootloader_handle_getrdp_cmd(uint8_t *pBuffer)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b086      	sub	sp, #24
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
	uint8_t rdp_level = 0x00;
 8000b44:	2300      	movs	r3, #0
 8000b46:	73fb      	strb	r3, [r7, #15]
	printmsg("BL_DEBUG_MSG:bootloader_handle_getrdp_cmd\r\n");
 8000b48:	481d      	ldr	r0, [pc, #116]	; (8000bc0 <bootloader_handle_getrdp_cmd+0x84>)
 8000b4a:	f7ff ff1d 	bl	8000988 <printmsg>

	//Total length of the command packet
	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 8000b4e:	4b1d      	ldr	r3, [pc, #116]	; (8000bc4 <bootloader_handle_getrdp_cmd+0x88>)
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	3301      	adds	r3, #1
 8000b54:	617b      	str	r3, [r7, #20]

	//extract the CRC32 sent by the Host
	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 8000b56:	697b      	ldr	r3, [r7, #20]
 8000b58:	3b04      	subs	r3, #4
 8000b5a:	4a1a      	ldr	r2, [pc, #104]	; (8000bc4 <bootloader_handle_getrdp_cmd+0x88>)
 8000b5c:	4413      	add	r3, r2
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	613b      	str	r3, [r7, #16]

	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 8000b62:	697b      	ldr	r3, [r7, #20]
 8000b64:	3b04      	subs	r3, #4
 8000b66:	693a      	ldr	r2, [r7, #16]
 8000b68:	4619      	mov	r1, r3
 8000b6a:	4816      	ldr	r0, [pc, #88]	; (8000bc4 <bootloader_handle_getrdp_cmd+0x88>)
 8000b6c:	f000 fab8 	bl	80010e0 <bootloader_verify_crc>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d11a      	bne.n	8000bac <bootloader_handle_getrdp_cmd+0x70>
	{
		printmsg("BL_DEBUG_MSG:checksum success !!\r\n");
 8000b76:	4814      	ldr	r0, [pc, #80]	; (8000bc8 <bootloader_handle_getrdp_cmd+0x8c>)
 8000b78:	f7ff ff06 	bl	8000988 <printmsg>
		bootloader_send_ack(pBuffer[0],1);
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	2101      	movs	r1, #1
 8000b82:	4618      	mov	r0, r3
 8000b84:	f000 fa80 	bl	8001088 <bootloader_send_ack>
		rdp_level = get_flash_rdp_level();
 8000b88:	f000 fb0c 	bl	80011a4 <get_flash_rdp_level>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	73fb      	strb	r3, [r7, #15]
		printmsg("BL_DEBUG_MSG:RDP level: %d %#x\r\n",rdp_level,rdp_level);
 8000b90:	7bfb      	ldrb	r3, [r7, #15]
 8000b92:	4619      	mov	r1, r3
 8000b94:	7bfb      	ldrb	r3, [r7, #15]
 8000b96:	461a      	mov	r2, r3
 8000b98:	480c      	ldr	r0, [pc, #48]	; (8000bcc <bootloader_handle_getrdp_cmd+0x90>)
 8000b9a:	f7ff fef5 	bl	8000988 <printmsg>
		bootloader_uart_write_data(&rdp_level,1);
 8000b9e:	f107 030f 	add.w	r3, r7, #15
 8000ba2:	2101      	movs	r1, #1
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f000 facf 	bl	8001148 <bootloader_uart_write_data>
		printmsg("BL_DEBUG_MSG:checksum fail !!\r\n");
		bootloader_send_nack();
	}


}
 8000baa:	e004      	b.n	8000bb6 <bootloader_handle_getrdp_cmd+0x7a>
		printmsg("BL_DEBUG_MSG:checksum fail !!\r\n");
 8000bac:	4808      	ldr	r0, [pc, #32]	; (8000bd0 <bootloader_handle_getrdp_cmd+0x94>)
 8000bae:	f7ff feeb 	bl	8000988 <printmsg>
		bootloader_send_nack();
 8000bb2:	f000 fa83 	bl	80010bc <bootloader_send_nack>
}
 8000bb6:	bf00      	nop
 8000bb8:	3718      	adds	r7, #24
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	08003c3c 	.word	0x08003c3c
 8000bc4:	200000bc 	.word	0x200000bc
 8000bc8:	08003b58 	.word	0x08003b58
 8000bcc:	08003c68 	.word	0x08003c68
 8000bd0:	08003b9c 	.word	0x08003b9c

08000bd4 <bootloader_handle_go_cmd>:

/*Helper function to handle BL_GO_TO_ADDR command */
void bootloader_handle_go_cmd(uint8_t *pBuffer)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b088      	sub	sp, #32
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
	uint32_t go_address = 0;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	61fb      	str	r3, [r7, #28]
	uint8_t addr_valid = ADDR_VALID;
 8000be0:	2300      	movs	r3, #0
 8000be2:	73fb      	strb	r3, [r7, #15]
	uint8_t addr_invalid = ADDR_INVALID;
 8000be4:	2301      	movs	r3, #1
 8000be6:	73bb      	strb	r3, [r7, #14]

	printmsg("BL_DEBUG_MSG:bootloader_handle_go_cmd\r\n");
 8000be8:	4828      	ldr	r0, [pc, #160]	; (8000c8c <bootloader_handle_go_cmd+0xb8>)
 8000bea:	f7ff fecd 	bl	8000988 <printmsg>

	//Total length of the command packet
	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 8000bee:	4b28      	ldr	r3, [pc, #160]	; (8000c90 <bootloader_handle_go_cmd+0xbc>)
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	3301      	adds	r3, #1
 8000bf4:	61bb      	str	r3, [r7, #24]

	//extract the CRC32 sent by the Host
	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 8000bf6:	69bb      	ldr	r3, [r7, #24]
 8000bf8:	3b04      	subs	r3, #4
 8000bfa:	4a25      	ldr	r2, [pc, #148]	; (8000c90 <bootloader_handle_go_cmd+0xbc>)
 8000bfc:	4413      	add	r3, r2
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	617b      	str	r3, [r7, #20]

	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 8000c02:	69bb      	ldr	r3, [r7, #24]
 8000c04:	3b04      	subs	r3, #4
 8000c06:	697a      	ldr	r2, [r7, #20]
 8000c08:	4619      	mov	r1, r3
 8000c0a:	4821      	ldr	r0, [pc, #132]	; (8000c90 <bootloader_handle_go_cmd+0xbc>)
 8000c0c:	f000 fa68 	bl	80010e0 <bootloader_verify_crc>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d131      	bne.n	8000c7a <bootloader_handle_go_cmd+0xa6>
	{
		printmsg("BL_DEBUG_MSG:checksum success !!\r\n");
 8000c16:	481f      	ldr	r0, [pc, #124]	; (8000c94 <bootloader_handle_go_cmd+0xc0>)
 8000c18:	f7ff feb6 	bl	8000988 <printmsg>

		bootloader_send_ack(pBuffer[0],1);
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	2101      	movs	r1, #1
 8000c22:	4618      	mov	r0, r3
 8000c24:	f000 fa30 	bl	8001088 <bootloader_send_ack>

		//extract the go address
		go_address = *((uint32_t *)&pBuffer[2] );
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8000c2e:	61fb      	str	r3, [r7, #28]
		printmsg("BL_DEBUG_MSG:GO addr: %#x\r\n",go_address);
 8000c30:	69f9      	ldr	r1, [r7, #28]
 8000c32:	4819      	ldr	r0, [pc, #100]	; (8000c98 <bootloader_handle_go_cmd+0xc4>)
 8000c34:	f7ff fea8 	bl	8000988 <printmsg>

		if( verify_address(go_address) == ADDR_VALID )
 8000c38:	69f8      	ldr	r0, [r7, #28]
 8000c3a:	f000 fac7 	bl	80011cc <verify_address>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d110      	bne.n	8000c66 <bootloader_handle_go_cmd+0x92>
		{
			//tell host that address is fine
			bootloader_uart_write_data(&addr_valid,1);
 8000c44:	f107 030f 	add.w	r3, r7, #15
 8000c48:	2101      	movs	r1, #1
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f000 fa7c 	bl	8001148 <bootloader_uart_write_data>
            Its not the duty of bootloader. so just trust and jump */

			/* Not doing the below line will result in hardfault exception for ARM cortex M */
			//watch : https://www.youtube.com/watch?v=VX_12SjnNhY

			go_address+=1; //make T bit =1
 8000c50:	69fb      	ldr	r3, [r7, #28]
 8000c52:	3301      	adds	r3, #1
 8000c54:	61fb      	str	r3, [r7, #28]

			void (*lets_jump)(void) = (void *)go_address;
 8000c56:	69fb      	ldr	r3, [r7, #28]
 8000c58:	613b      	str	r3, [r7, #16]

			printmsg("BL_DEBUG_MSG: jumping to go address!\r \n");
 8000c5a:	4810      	ldr	r0, [pc, #64]	; (8000c9c <bootloader_handle_go_cmd+0xc8>)
 8000c5c:	f7ff fe94 	bl	8000988 <printmsg>

			lets_jump();
 8000c60:	693b      	ldr	r3, [r7, #16]
 8000c62:	4798      	blx	r3
		printmsg("BL_DEBUG_MSG:checksum fail !!\r\n");
		bootloader_send_nack();
	}


}
 8000c64:	e00e      	b.n	8000c84 <bootloader_handle_go_cmd+0xb0>
			printmsg("BL_DEBUG_MSG:GO addr invalid ! \r\n");
 8000c66:	480e      	ldr	r0, [pc, #56]	; (8000ca0 <bootloader_handle_go_cmd+0xcc>)
 8000c68:	f7ff fe8e 	bl	8000988 <printmsg>
			bootloader_uart_write_data(&addr_invalid,1);
 8000c6c:	f107 030e 	add.w	r3, r7, #14
 8000c70:	2101      	movs	r1, #1
 8000c72:	4618      	mov	r0, r3
 8000c74:	f000 fa68 	bl	8001148 <bootloader_uart_write_data>
}
 8000c78:	e004      	b.n	8000c84 <bootloader_handle_go_cmd+0xb0>
		printmsg("BL_DEBUG_MSG:checksum fail !!\r\n");
 8000c7a:	480a      	ldr	r0, [pc, #40]	; (8000ca4 <bootloader_handle_go_cmd+0xd0>)
 8000c7c:	f7ff fe84 	bl	8000988 <printmsg>
		bootloader_send_nack();
 8000c80:	f000 fa1c 	bl	80010bc <bootloader_send_nack>
}
 8000c84:	bf00      	nop
 8000c86:	3720      	adds	r7, #32
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	08003c8c 	.word	0x08003c8c
 8000c90:	200000bc 	.word	0x200000bc
 8000c94:	08003b58 	.word	0x08003b58
 8000c98:	08003cb4 	.word	0x08003cb4
 8000c9c:	08003cd0 	.word	0x08003cd0
 8000ca0:	08003cf8 	.word	0x08003cf8
 8000ca4:	08003b9c 	.word	0x08003b9c

08000ca8 <bootloader_handle_flash_erase_cmd>:

/*Helper function to handle BL_FLASH_ERASE command */
void bootloader_handle_flash_erase_cmd(uint8_t *pBuffer)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b086      	sub	sp, #24
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
	uint8_t erase_status = 0x00;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	73fb      	strb	r3, [r7, #15]
	printmsg("BL_DEBUG_MSG:bootloader_handle_flash_erase_cmd\r\n");
 8000cb4:	482b      	ldr	r0, [pc, #172]	; (8000d64 <bootloader_handle_flash_erase_cmd+0xbc>)
 8000cb6:	f7ff fe67 	bl	8000988 <printmsg>

	//Total length of the command packet
	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 8000cba:	4b2b      	ldr	r3, [pc, #172]	; (8000d68 <bootloader_handle_flash_erase_cmd+0xc0>)
 8000cbc:	781b      	ldrb	r3, [r3, #0]
 8000cbe:	3301      	adds	r3, #1
 8000cc0:	617b      	str	r3, [r7, #20]

	//extract the CRC32 sent by the Host
	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 8000cc2:	697b      	ldr	r3, [r7, #20]
 8000cc4:	3b04      	subs	r3, #4
 8000cc6:	4a28      	ldr	r2, [pc, #160]	; (8000d68 <bootloader_handle_flash_erase_cmd+0xc0>)
 8000cc8:	4413      	add	r3, r2
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	613b      	str	r3, [r7, #16]

	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	3b04      	subs	r3, #4
 8000cd2:	693a      	ldr	r2, [r7, #16]
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4824      	ldr	r0, [pc, #144]	; (8000d68 <bootloader_handle_flash_erase_cmd+0xc0>)
 8000cd8:	f000 fa02 	bl	80010e0 <bootloader_verify_crc>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d137      	bne.n	8000d52 <bootloader_handle_flash_erase_cmd+0xaa>
	{
		printmsg("BL_DEBUG_MSG:checksum success !!\r\n");
 8000ce2:	4822      	ldr	r0, [pc, #136]	; (8000d6c <bootloader_handle_flash_erase_cmd+0xc4>)
 8000ce4:	f7ff fe50 	bl	8000988 <printmsg>
		bootloader_send_ack(pBuffer[0],1);
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	2101      	movs	r1, #1
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f000 f9ca 	bl	8001088 <bootloader_send_ack>
		printmsg("BL_DEBUG_MSG:initial_sector : %d  no_ofsectors: %d\r\n",pBuffer[2],pBuffer[3]);
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	3302      	adds	r3, #2
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	3303      	adds	r3, #3
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	461a      	mov	r2, r3
 8000d04:	481a      	ldr	r0, [pc, #104]	; (8000d70 <bootloader_handle_flash_erase_cmd+0xc8>)
 8000d06:	f7ff fe3f 	bl	8000988 <printmsg>

		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13,1);
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d10:	4818      	ldr	r0, [pc, #96]	; (8000d74 <bootloader_handle_flash_erase_cmd+0xcc>)
 8000d12:	f001 fc27 	bl	8002564 <HAL_GPIO_WritePin>
		erase_status = execute_flash_erase(pBuffer[2] , pBuffer[3]);
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	3302      	adds	r3, #2
 8000d1a:	781a      	ldrb	r2, [r3, #0]
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	3303      	adds	r3, #3
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	4619      	mov	r1, r3
 8000d24:	4610      	mov	r0, r2
 8000d26:	f000 fa8f 	bl	8001248 <execute_flash_erase>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	73fb      	strb	r3, [r7, #15]
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13,0);
 8000d2e:	2200      	movs	r2, #0
 8000d30:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d34:	480f      	ldr	r0, [pc, #60]	; (8000d74 <bootloader_handle_flash_erase_cmd+0xcc>)
 8000d36:	f001 fc15 	bl	8002564 <HAL_GPIO_WritePin>

		printmsg("BL_DEBUG_MSG: flash erase status: %#x\r\n",erase_status);
 8000d3a:	7bfb      	ldrb	r3, [r7, #15]
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	480e      	ldr	r0, [pc, #56]	; (8000d78 <bootloader_handle_flash_erase_cmd+0xd0>)
 8000d40:	f7ff fe22 	bl	8000988 <printmsg>

		bootloader_uart_write_data(&erase_status,1);
 8000d44:	f107 030f 	add.w	r3, r7, #15
 8000d48:	2101      	movs	r1, #1
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f000 f9fc 	bl	8001148 <bootloader_uart_write_data>
	}else
	{
		printmsg("BL_DEBUG_MSG:checksum fail !!\r\n");
		bootloader_send_nack();
	}
}
 8000d50:	e004      	b.n	8000d5c <bootloader_handle_flash_erase_cmd+0xb4>
		printmsg("BL_DEBUG_MSG:checksum fail !!\r\n");
 8000d52:	480a      	ldr	r0, [pc, #40]	; (8000d7c <bootloader_handle_flash_erase_cmd+0xd4>)
 8000d54:	f7ff fe18 	bl	8000988 <printmsg>
		bootloader_send_nack();
 8000d58:	f000 f9b0 	bl	80010bc <bootloader_send_nack>
}
 8000d5c:	bf00      	nop
 8000d5e:	3718      	adds	r7, #24
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	08003d1c 	.word	0x08003d1c
 8000d68:	200000bc 	.word	0x200000bc
 8000d6c:	08003b58 	.word	0x08003b58
 8000d70:	08003d50 	.word	0x08003d50
 8000d74:	40021800 	.word	0x40021800
 8000d78:	08003d88 	.word	0x08003d88
 8000d7c:	08003b9c 	.word	0x08003b9c

08000d80 <bootloader_handle_mem_write_cmd>:

/*Helper function to handle BL_MEM_WRITE command */
void bootloader_handle_mem_write_cmd(uint8_t *pBuffer)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b088      	sub	sp, #32
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
	uint8_t addr_valid = ADDR_VALID;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	77fb      	strb	r3, [r7, #31]
	uint8_t write_status = 0x00;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	73fb      	strb	r3, [r7, #15]
	uint8_t chksum =0, len=0;
 8000d90:	2300      	movs	r3, #0
 8000d92:	77bb      	strb	r3, [r7, #30]
 8000d94:	2300      	movs	r3, #0
 8000d96:	777b      	strb	r3, [r7, #29]
	len = pBuffer[0];
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	777b      	strb	r3, [r7, #29]
	uint8_t payload_len = pBuffer[6];
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	799b      	ldrb	r3, [r3, #6]
 8000da2:	773b      	strb	r3, [r7, #28]

	uint32_t mem_address = *((uint32_t *) ( &pBuffer[2]) );
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8000daa:	61bb      	str	r3, [r7, #24]

	chksum = pBuffer[len];
 8000dac:	7f7b      	ldrb	r3, [r7, #29]
 8000dae:	687a      	ldr	r2, [r7, #4]
 8000db0:	4413      	add	r3, r2
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	77bb      	strb	r3, [r7, #30]

	printmsg("BL_DEBUG_MSG:bootloader_handle_mem_write_cmd\r\n");
 8000db6:	482f      	ldr	r0, [pc, #188]	; (8000e74 <bootloader_handle_mem_write_cmd+0xf4>)
 8000db8:	f7ff fde6 	bl	8000988 <printmsg>

	//Total length of the command packet
	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 8000dbc:	4b2e      	ldr	r3, [pc, #184]	; (8000e78 <bootloader_handle_mem_write_cmd+0xf8>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	3301      	adds	r3, #1
 8000dc2:	617b      	str	r3, [r7, #20]

	//extract the CRC32 sent by the Host
	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	3b04      	subs	r3, #4
 8000dc8:	4a2b      	ldr	r2, [pc, #172]	; (8000e78 <bootloader_handle_mem_write_cmd+0xf8>)
 8000dca:	4413      	add	r3, r2
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	613b      	str	r3, [r7, #16]


	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	3b04      	subs	r3, #4
 8000dd4:	693a      	ldr	r2, [r7, #16]
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	4827      	ldr	r0, [pc, #156]	; (8000e78 <bootloader_handle_mem_write_cmd+0xf8>)
 8000dda:	f000 f981 	bl	80010e0 <bootloader_verify_crc>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d13d      	bne.n	8000e60 <bootloader_handle_mem_write_cmd+0xe0>
	{
		printmsg("BL_DEBUG_MSG:checksum success !!\r\n");
 8000de4:	4825      	ldr	r0, [pc, #148]	; (8000e7c <bootloader_handle_mem_write_cmd+0xfc>)
 8000de6:	f7ff fdcf 	bl	8000988 <printmsg>

		bootloader_send_ack(pBuffer[0],1);
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	781b      	ldrb	r3, [r3, #0]
 8000dee:	2101      	movs	r1, #1
 8000df0:	4618      	mov	r0, r3
 8000df2:	f000 f949 	bl	8001088 <bootloader_send_ack>

		printmsg("BL_DEBUG_MSG: mem write address : %#x\r\n",mem_address);
 8000df6:	69b9      	ldr	r1, [r7, #24]
 8000df8:	4821      	ldr	r0, [pc, #132]	; (8000e80 <bootloader_handle_mem_write_cmd+0x100>)
 8000dfa:	f7ff fdc5 	bl	8000988 <printmsg>

		if( verify_address(mem_address) == ADDR_VALID )
 8000dfe:	69b8      	ldr	r0, [r7, #24]
 8000e00:	f000 f9e4 	bl	80011cc <verify_address>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d11e      	bne.n	8000e48 <bootloader_handle_mem_write_cmd+0xc8>
		{

			printmsg("BL_DEBUG_MSG: valid mem write address\r\n");
 8000e0a:	481e      	ldr	r0, [pc, #120]	; (8000e84 <bootloader_handle_mem_write_cmd+0x104>)
 8000e0c:	f7ff fdbc 	bl	8000988 <printmsg>

			//glow the led to indicate bootloader is currently writing to memory
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_SET);
 8000e10:	2201      	movs	r2, #1
 8000e12:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e16:	481c      	ldr	r0, [pc, #112]	; (8000e88 <bootloader_handle_mem_write_cmd+0x108>)
 8000e18:	f001 fba4 	bl	8002564 <HAL_GPIO_WritePin>

			//execute mem write
			write_status = execute_mem_write(&pBuffer[7],mem_address, payload_len);
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	3307      	adds	r3, #7
 8000e20:	7f3a      	ldrb	r2, [r7, #28]
 8000e22:	69b9      	ldr	r1, [r7, #24]
 8000e24:	4618      	mov	r0, r3
 8000e26:	f000 fa56 	bl	80012d6 <execute_mem_write>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	73fb      	strb	r3, [r7, #15]

			//turn off the led to indicate memory write is over
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_RESET);
 8000e2e:	2200      	movs	r2, #0
 8000e30:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e34:	4814      	ldr	r0, [pc, #80]	; (8000e88 <bootloader_handle_mem_write_cmd+0x108>)
 8000e36:	f001 fb95 	bl	8002564 <HAL_GPIO_WritePin>

			//inform host about the status
			bootloader_uart_write_data(&write_status,1);
 8000e3a:	f107 030f 	add.w	r3, r7, #15
 8000e3e:	2101      	movs	r1, #1
 8000e40:	4618      	mov	r0, r3
 8000e42:	f000 f981 	bl	8001148 <bootloader_uart_write_data>
	{
		printmsg("BL_DEBUG_MSG:checksum fail !!\r\n");
		bootloader_send_nack();
	}

}
 8000e46:	e010      	b.n	8000e6a <bootloader_handle_mem_write_cmd+0xea>
			printmsg("BL_DEBUG_MSG: invalid mem write address\r\n");
 8000e48:	4810      	ldr	r0, [pc, #64]	; (8000e8c <bootloader_handle_mem_write_cmd+0x10c>)
 8000e4a:	f7ff fd9d 	bl	8000988 <printmsg>
			write_status = ADDR_INVALID;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	73fb      	strb	r3, [r7, #15]
			bootloader_uart_write_data(&write_status,1);
 8000e52:	f107 030f 	add.w	r3, r7, #15
 8000e56:	2101      	movs	r1, #1
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f000 f975 	bl	8001148 <bootloader_uart_write_data>
}
 8000e5e:	e004      	b.n	8000e6a <bootloader_handle_mem_write_cmd+0xea>
		printmsg("BL_DEBUG_MSG:checksum fail !!\r\n");
 8000e60:	480b      	ldr	r0, [pc, #44]	; (8000e90 <bootloader_handle_mem_write_cmd+0x110>)
 8000e62:	f7ff fd91 	bl	8000988 <printmsg>
		bootloader_send_nack();
 8000e66:	f000 f929 	bl	80010bc <bootloader_send_nack>
}
 8000e6a:	bf00      	nop
 8000e6c:	3720      	adds	r7, #32
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	08003db0 	.word	0x08003db0
 8000e78:	200000bc 	.word	0x200000bc
 8000e7c:	08003b58 	.word	0x08003b58
 8000e80:	08003de0 	.word	0x08003de0
 8000e84:	08003e08 	.word	0x08003e08
 8000e88:	40021800 	.word	0x40021800
 8000e8c:	08003e30 	.word	0x08003e30
 8000e90:	08003b9c 	.word	0x08003b9c

08000e94 <bootloader_handle_en_rw_protect>:

/*Helper function to handle BL_EN_RW_PROTECT  command */
void bootloader_handle_en_rw_protect(uint8_t *pBuffer)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b086      	sub	sp, #24
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
	uint8_t status = 0x00;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	73fb      	strb	r3, [r7, #15]
	printmsg("BL_DEBUG_MSG:bootloader_handle_endis_rw_protect\r\n");
 8000ea0:	4820      	ldr	r0, [pc, #128]	; (8000f24 <bootloader_handle_en_rw_protect+0x90>)
 8000ea2:	f7ff fd71 	bl	8000988 <printmsg>

	//Total length of the command packet
	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 8000ea6:	4b20      	ldr	r3, [pc, #128]	; (8000f28 <bootloader_handle_en_rw_protect+0x94>)
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	3301      	adds	r3, #1
 8000eac:	617b      	str	r3, [r7, #20]

	//extract the CRC32 sent by the Host
	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 8000eae:	697b      	ldr	r3, [r7, #20]
 8000eb0:	3b04      	subs	r3, #4
 8000eb2:	4a1d      	ldr	r2, [pc, #116]	; (8000f28 <bootloader_handle_en_rw_protect+0x94>)
 8000eb4:	4413      	add	r3, r2
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	613b      	str	r3, [r7, #16]

	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	3b04      	subs	r3, #4
 8000ebe:	693a      	ldr	r2, [r7, #16]
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	4819      	ldr	r0, [pc, #100]	; (8000f28 <bootloader_handle_en_rw_protect+0x94>)
 8000ec4:	f000 f90c 	bl	80010e0 <bootloader_verify_crc>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d120      	bne.n	8000f10 <bootloader_handle_en_rw_protect+0x7c>
	{
		printmsg("BL_DEBUG_MSG:checksum success !!\r\n");
 8000ece:	4817      	ldr	r0, [pc, #92]	; (8000f2c <bootloader_handle_en_rw_protect+0x98>)
 8000ed0:	f7ff fd5a 	bl	8000988 <printmsg>
		bootloader_send_ack(pBuffer[0],1);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	2101      	movs	r1, #1
 8000eda:	4618      	mov	r0, r3
 8000edc:	f000 f8d4 	bl	8001088 <bootloader_send_ack>

		status = configure_flash_sector_rw_protection(pBuffer[2] , pBuffer[3],0);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	3302      	adds	r3, #2
 8000ee4:	7818      	ldrb	r0, [r3, #0]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	3303      	adds	r3, #3
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	2200      	movs	r2, #0
 8000eee:	4619      	mov	r1, r3
 8000ef0:	f000 fa1e 	bl	8001330 <configure_flash_sector_rw_protection>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	73fb      	strb	r3, [r7, #15]

		printmsg("BL_DEBUG_MSG: flash erase status: %#x\r\n",status);
 8000ef8:	7bfb      	ldrb	r3, [r7, #15]
 8000efa:	4619      	mov	r1, r3
 8000efc:	480c      	ldr	r0, [pc, #48]	; (8000f30 <bootloader_handle_en_rw_protect+0x9c>)
 8000efe:	f7ff fd43 	bl	8000988 <printmsg>

		bootloader_uart_write_data(&status,1);
 8000f02:	f107 030f 	add.w	r3, r7, #15
 8000f06:	2101      	movs	r1, #1
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f000 f91d 	bl	8001148 <bootloader_uart_write_data>
		printmsg("BL_DEBUG_MSG:checksum fail !!\r\n");
		bootloader_send_nack();
	}


}
 8000f0e:	e004      	b.n	8000f1a <bootloader_handle_en_rw_protect+0x86>
		printmsg("BL_DEBUG_MSG:checksum fail !!\r\n");
 8000f10:	4808      	ldr	r0, [pc, #32]	; (8000f34 <bootloader_handle_en_rw_protect+0xa0>)
 8000f12:	f7ff fd39 	bl	8000988 <printmsg>
		bootloader_send_nack();
 8000f16:	f000 f8d1 	bl	80010bc <bootloader_send_nack>
}
 8000f1a:	bf00      	nop
 8000f1c:	3718      	adds	r7, #24
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	08003e5c 	.word	0x08003e5c
 8000f28:	200000bc 	.word	0x200000bc
 8000f2c:	08003b58 	.word	0x08003b58
 8000f30:	08003d88 	.word	0x08003d88
 8000f34:	08003b9c 	.word	0x08003b9c

08000f38 <bootloader_handle_dis_rw_protect>:


/*Helper function to handle BL_EN_RW_PROTECT  command */
void bootloader_handle_dis_rw_protect(uint8_t *pBuffer)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b086      	sub	sp, #24
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
	uint8_t status = 0x00;
 8000f40:	2300      	movs	r3, #0
 8000f42:	73fb      	strb	r3, [r7, #15]
	printmsg("BL_DEBUG_MSG:bootloader_handle_dis_rw_protect\r\n");
 8000f44:	481d      	ldr	r0, [pc, #116]	; (8000fbc <bootloader_handle_dis_rw_protect+0x84>)
 8000f46:	f7ff fd1f 	bl	8000988 <printmsg>

	//Total length of the command packet
	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 8000f4a:	4b1d      	ldr	r3, [pc, #116]	; (8000fc0 <bootloader_handle_dis_rw_protect+0x88>)
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	3301      	adds	r3, #1
 8000f50:	617b      	str	r3, [r7, #20]

	//extract the CRC32 sent by the Host
	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	3b04      	subs	r3, #4
 8000f56:	4a1a      	ldr	r2, [pc, #104]	; (8000fc0 <bootloader_handle_dis_rw_protect+0x88>)
 8000f58:	4413      	add	r3, r2
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	613b      	str	r3, [r7, #16]

	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	3b04      	subs	r3, #4
 8000f62:	693a      	ldr	r2, [r7, #16]
 8000f64:	4619      	mov	r1, r3
 8000f66:	4816      	ldr	r0, [pc, #88]	; (8000fc0 <bootloader_handle_dis_rw_protect+0x88>)
 8000f68:	f000 f8ba 	bl	80010e0 <bootloader_verify_crc>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d11b      	bne.n	8000faa <bootloader_handle_dis_rw_protect+0x72>
	{
		printmsg("BL_DEBUG_MSG:checksum success !!\r\n");
 8000f72:	4814      	ldr	r0, [pc, #80]	; (8000fc4 <bootloader_handle_dis_rw_protect+0x8c>)
 8000f74:	f7ff fd08 	bl	8000988 <printmsg>
		bootloader_send_ack(pBuffer[0],1);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	2101      	movs	r1, #1
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f000 f882 	bl	8001088 <bootloader_send_ack>

		status = configure_flash_sector_rw_protection(0,0,1);
 8000f84:	2201      	movs	r2, #1
 8000f86:	2100      	movs	r1, #0
 8000f88:	2000      	movs	r0, #0
 8000f8a:	f000 f9d1 	bl	8001330 <configure_flash_sector_rw_protection>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	73fb      	strb	r3, [r7, #15]

		printmsg("BL_DEBUG_MSG: flash erase status: %#x\r\n",status);
 8000f92:	7bfb      	ldrb	r3, [r7, #15]
 8000f94:	4619      	mov	r1, r3
 8000f96:	480c      	ldr	r0, [pc, #48]	; (8000fc8 <bootloader_handle_dis_rw_protect+0x90>)
 8000f98:	f7ff fcf6 	bl	8000988 <printmsg>

		bootloader_uart_write_data(&status,1);
 8000f9c:	f107 030f 	add.w	r3, r7, #15
 8000fa0:	2101      	movs	r1, #1
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f000 f8d0 	bl	8001148 <bootloader_uart_write_data>
		printmsg("BL_DEBUG_MSG:checksum fail !!\r\n");
		bootloader_send_nack();
	}


}
 8000fa8:	e004      	b.n	8000fb4 <bootloader_handle_dis_rw_protect+0x7c>
		printmsg("BL_DEBUG_MSG:checksum fail !!\r\n");
 8000faa:	4808      	ldr	r0, [pc, #32]	; (8000fcc <bootloader_handle_dis_rw_protect+0x94>)
 8000fac:	f7ff fcec 	bl	8000988 <printmsg>
		bootloader_send_nack();
 8000fb0:	f000 f884 	bl	80010bc <bootloader_send_nack>
}
 8000fb4:	bf00      	nop
 8000fb6:	3718      	adds	r7, #24
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	08003e90 	.word	0x08003e90
 8000fc0:	200000bc 	.word	0x200000bc
 8000fc4:	08003b58 	.word	0x08003b58
 8000fc8:	08003d88 	.word	0x08003d88
 8000fcc:	08003b9c 	.word	0x08003b9c

08000fd0 <bootloader_handle_mem_read>:

/*Helper function to handle BL_MEM_READ command */
void bootloader_handle_mem_read (uint8_t *pBuffer)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]


}
 8000fd8:	bf00      	nop
 8000fda:	370c      	adds	r7, #12
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr

08000fe4 <bootloader_handle_read_sector_protection_status>:

/*Helper function to handle _BL_READ_SECTOR_P_STATUS command */
void bootloader_handle_read_sector_protection_status(uint8_t *pBuffer)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b086      	sub	sp, #24
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
	uint16_t status;
	printmsg("BL_DEBUG_MSG:bootloader_handle_read_sector_protection_status\r\n");
 8000fec:	481c      	ldr	r0, [pc, #112]	; (8001060 <bootloader_handle_read_sector_protection_status+0x7c>)
 8000fee:	f7ff fccb 	bl	8000988 <printmsg>

	//Total length of the command packet
	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 8000ff2:	4b1c      	ldr	r3, [pc, #112]	; (8001064 <bootloader_handle_read_sector_protection_status+0x80>)
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	3301      	adds	r3, #1
 8000ff8:	617b      	str	r3, [r7, #20]

	//extract the CRC32 sent by the Host
	uint32_t host_crc = *((uint32_t * ) (bl_rx_buffer+command_packet_len - 4) ) ;
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	3b04      	subs	r3, #4
 8000ffe:	4a19      	ldr	r2, [pc, #100]	; (8001064 <bootloader_handle_read_sector_protection_status+0x80>)
 8001000:	4413      	add	r3, r2
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	613b      	str	r3, [r7, #16]

	if (! bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
 8001006:	697b      	ldr	r3, [r7, #20]
 8001008:	3b04      	subs	r3, #4
 800100a:	693a      	ldr	r2, [r7, #16]
 800100c:	4619      	mov	r1, r3
 800100e:	4815      	ldr	r0, [pc, #84]	; (8001064 <bootloader_handle_read_sector_protection_status+0x80>)
 8001010:	f000 f866 	bl	80010e0 <bootloader_verify_crc>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d118      	bne.n	800104c <bootloader_handle_read_sector_protection_status+0x68>
	{
		printmsg("BL_DEBUG_MSG:checksum success !!\r\n");
 800101a:	4813      	ldr	r0, [pc, #76]	; (8001068 <bootloader_handle_read_sector_protection_status+0x84>)
 800101c:	f7ff fcb4 	bl	8000988 <printmsg>
		bootloader_send_ack(pBuffer[0],2);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	2102      	movs	r1, #2
 8001026:	4618      	mov	r0, r3
 8001028:	f000 f82e 	bl	8001088 <bootloader_send_ack>
		status=read_OB_rw_protection_status();
 800102c:	f000 fa16 	bl	800145c <read_OB_rw_protection_status>
 8001030:	4603      	mov	r3, r0
 8001032:	81fb      	strh	r3, [r7, #14]
		printmsg("BL_DEBUG_MSG: nWRP status: %#x\r\n",status);
 8001034:	89fb      	ldrh	r3, [r7, #14]
 8001036:	4619      	mov	r1, r3
 8001038:	480c      	ldr	r0, [pc, #48]	; (800106c <bootloader_handle_read_sector_protection_status+0x88>)
 800103a:	f7ff fca5 	bl	8000988 <printmsg>
		bootloader_uart_write_data((uint8_t*)&status,2);
 800103e:	f107 030e 	add.w	r3, r7, #14
 8001042:	2102      	movs	r1, #2
 8001044:	4618      	mov	r0, r3
 8001046:	f000 f87f 	bl	8001148 <bootloader_uart_write_data>
	{
		printmsg("BL_DEBUG_MSG:checksum fail !!\r\n");
		bootloader_send_nack();
	}

}
 800104a:	e004      	b.n	8001056 <bootloader_handle_read_sector_protection_status+0x72>
		printmsg("BL_DEBUG_MSG:checksum fail !!\r\n");
 800104c:	4808      	ldr	r0, [pc, #32]	; (8001070 <bootloader_handle_read_sector_protection_status+0x8c>)
 800104e:	f7ff fc9b 	bl	8000988 <printmsg>
		bootloader_send_nack();
 8001052:	f000 f833 	bl	80010bc <bootloader_send_nack>
}
 8001056:	bf00      	nop
 8001058:	3718      	adds	r7, #24
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	08003ec0 	.word	0x08003ec0
 8001064:	200000bc 	.word	0x200000bc
 8001068:	08003b58 	.word	0x08003b58
 800106c:	08003f00 	.word	0x08003f00
 8001070:	08003b9c 	.word	0x08003b9c

08001074 <bootloader_handle_read_otp>:

/*Helper function to handle BL_OTP_READ command */
void bootloader_handle_read_otp(uint8_t *pBuffer)
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]


}
 800107c:	bf00      	nop
 800107e:	370c      	adds	r7, #12
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr

08001088 <bootloader_send_ack>:

/*This function sends ACK if CRC matches along with "len to follow"*/
void bootloader_send_ack(uint8_t command_code, uint8_t follow_len)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0
 800108e:	4603      	mov	r3, r0
 8001090:	460a      	mov	r2, r1
 8001092:	71fb      	strb	r3, [r7, #7]
 8001094:	4613      	mov	r3, r2
 8001096:	71bb      	strb	r3, [r7, #6]
	//here we send 2 byte.. first byte is ack and the second byte is len value
	uint8_t ack_buf[2];
	ack_buf[0] = BL_ACK;
 8001098:	23a5      	movs	r3, #165	; 0xa5
 800109a:	733b      	strb	r3, [r7, #12]
	ack_buf[1] = follow_len;
 800109c:	79bb      	ldrb	r3, [r7, #6]
 800109e:	737b      	strb	r3, [r7, #13]
	HAL_UART_Transmit(C_UART,ack_buf,2,HAL_MAX_DELAY);
 80010a0:	f107 010c 	add.w	r1, r7, #12
 80010a4:	f04f 33ff 	mov.w	r3, #4294967295
 80010a8:	2202      	movs	r2, #2
 80010aa:	4803      	ldr	r0, [pc, #12]	; (80010b8 <bootloader_send_ack+0x30>)
 80010ac:	f001 ff47 	bl	8002f3e <HAL_UART_Transmit>

}
 80010b0:	bf00      	nop
 80010b2:	3710      	adds	r7, #16
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	2000007c 	.word	0x2000007c

080010bc <bootloader_send_nack>:

/*This function sends NACK */
void bootloader_send_nack(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
	uint8_t nack = BL_NACK;
 80010c2:	237f      	movs	r3, #127	; 0x7f
 80010c4:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(C_UART,&nack,1,HAL_MAX_DELAY);
 80010c6:	1df9      	adds	r1, r7, #7
 80010c8:	f04f 33ff 	mov.w	r3, #4294967295
 80010cc:	2201      	movs	r2, #1
 80010ce:	4803      	ldr	r0, [pc, #12]	; (80010dc <bootloader_send_nack+0x20>)
 80010d0:	f001 ff35 	bl	8002f3e <HAL_UART_Transmit>
}
 80010d4:	bf00      	nop
 80010d6:	3708      	adds	r7, #8
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	2000007c 	.word	0x2000007c

080010e0 <bootloader_verify_crc>:

//This verifies the CRC of the given buffer in pData .
uint8_t bootloader_verify_crc (uint8_t *pData, uint32_t len, uint32_t crc_host)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b088      	sub	sp, #32
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	60f8      	str	r0, [r7, #12]
 80010e8:	60b9      	str	r1, [r7, #8]
 80010ea:	607a      	str	r2, [r7, #4]
	uint32_t uwCRCValue=0xff;
 80010ec:	23ff      	movs	r3, #255	; 0xff
 80010ee:	61fb      	str	r3, [r7, #28]

	for (uint32_t i=0 ; i < len ; i++)
 80010f0:	2300      	movs	r3, #0
 80010f2:	61bb      	str	r3, [r7, #24]
 80010f4:	e00f      	b.n	8001116 <bootloader_verify_crc+0x36>
	{
		uint32_t i_data = pData[i];
 80010f6:	68fa      	ldr	r2, [r7, #12]
 80010f8:	69bb      	ldr	r3, [r7, #24]
 80010fa:	4413      	add	r3, r2
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	617b      	str	r3, [r7, #20]
		uwCRCValue = HAL_CRC_Accumulate(&hcrc, &i_data, 1);
 8001100:	f107 0314 	add.w	r3, r7, #20
 8001104:	2201      	movs	r2, #1
 8001106:	4619      	mov	r1, r3
 8001108:	480e      	ldr	r0, [pc, #56]	; (8001144 <bootloader_verify_crc+0x64>)
 800110a:	f000 fc9e 	bl	8001a4a <HAL_CRC_Accumulate>
 800110e:	61f8      	str	r0, [r7, #28]
	for (uint32_t i=0 ; i < len ; i++)
 8001110:	69bb      	ldr	r3, [r7, #24]
 8001112:	3301      	adds	r3, #1
 8001114:	61bb      	str	r3, [r7, #24]
 8001116:	69ba      	ldr	r2, [r7, #24]
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	429a      	cmp	r2, r3
 800111c:	d3eb      	bcc.n	80010f6 <bootloader_verify_crc+0x16>
	}

	/* Reset CRC Calculation Unit */
	__HAL_CRC_DR_RESET(&hcrc);
 800111e:	4b09      	ldr	r3, [pc, #36]	; (8001144 <bootloader_verify_crc+0x64>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	689a      	ldr	r2, [r3, #8]
 8001124:	4b07      	ldr	r3, [pc, #28]	; (8001144 <bootloader_verify_crc+0x64>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f042 0201 	orr.w	r2, r2, #1
 800112c:	609a      	str	r2, [r3, #8]

	if( uwCRCValue == crc_host)
 800112e:	69fa      	ldr	r2, [r7, #28]
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	429a      	cmp	r2, r3
 8001134:	d101      	bne.n	800113a <bootloader_verify_crc+0x5a>
	{
		return VERIFY_CRC_SUCCESS;
 8001136:	2300      	movs	r3, #0
 8001138:	e000      	b.n	800113c <bootloader_verify_crc+0x5c>
	}

	return VERIFY_CRC_FAIL;
 800113a:	2301      	movs	r3, #1
}
 800113c:	4618      	mov	r0, r3
 800113e:	3720      	adds	r7, #32
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	20000074 	.word	0x20000074

08001148 <bootloader_uart_write_data>:

/* This function writes data in to C_UART */
void bootloader_uart_write_data(uint8_t *pBuffer,uint32_t len)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	6039      	str	r1, [r7, #0]
	/*you can replace the below ST's USART driver API call with your MCUs driver API call */
	HAL_UART_Transmit(C_UART,pBuffer,len,HAL_MAX_DELAY);
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	b29a      	uxth	r2, r3
 8001156:	f04f 33ff 	mov.w	r3, #4294967295
 800115a:	6879      	ldr	r1, [r7, #4]
 800115c:	4803      	ldr	r0, [pc, #12]	; (800116c <bootloader_uart_write_data+0x24>)
 800115e:	f001 feee 	bl	8002f3e <HAL_UART_Transmit>

}
 8001162:	bf00      	nop
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	2000007c 	.word	0x2000007c

08001170 <get_bootloader_version>:


//Just returns the macro value .
uint8_t get_bootloader_version(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
	return (uint8_t)BL_VERSION;
 8001174:	2310      	movs	r3, #16
}
 8001176:	4618      	mov	r0, r3
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr

08001180 <get_mcu_chip_id>:

//Read the chip identifier or device Identifier
uint16_t get_mcu_chip_id(void)
{
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
	and the die revision. It is part of the DBG_MCU component and is mapped on the
	external PPB bus (see Section 33.16 on page 1304). This code is accessible using the
	JTAG debug pCat.2ort (4 to 5 pins) or the SW debug port (two pins) or by the user software.
	It is even accessible while the MCU is under system reset. */
	uint16_t cid;
	cid = (uint16_t)(DBGMCU->IDCODE) & 0x0FFF;
 8001186:	4b06      	ldr	r3, [pc, #24]	; (80011a0 <get_mcu_chip_id+0x20>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	b29b      	uxth	r3, r3
 800118c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001190:	80fb      	strh	r3, [r7, #6]
	return  cid;
 8001192:	88fb      	ldrh	r3, [r7, #6]

}
 8001194:	4618      	mov	r0, r3
 8001196:	370c      	adds	r7, #12
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr
 80011a0:	e0042000 	.word	0xe0042000

080011a4 <get_flash_rdp_level>:

/*This function reads the RDP ( Read protection option byte) value
 *For more info refer "Table 9. Description of the option bytes" in stm32f446xx RM
 */
uint8_t get_flash_rdp_level(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0

	uint8_t rdp_status=0;
 80011aa:	2300      	movs	r3, #0
 80011ac:	71fb      	strb	r3, [r7, #7]
	FLASH_OBProgramInitTypeDef  ob_handle;
	HAL_FLASHEx_OBGetConfig(&ob_handle);
	rdp_status = (uint8_t)ob_handle.RDPLevel;
#else

	volatile uint32_t *pOB_addr = (uint32_t*) 0x1FFFC000;
 80011ae:	4b06      	ldr	r3, [pc, #24]	; (80011c8 <get_flash_rdp_level+0x24>)
 80011b0:	603b      	str	r3, [r7, #0]
	rdp_status =  (uint8_t)(*pOB_addr >> 8) ;
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	0a1b      	lsrs	r3, r3, #8
 80011b8:	71fb      	strb	r3, [r7, #7]
#endif

	return rdp_status;
 80011ba:	79fb      	ldrb	r3, [r7, #7]

}
 80011bc:	4618      	mov	r0, r3
 80011be:	370c      	adds	r7, #12
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr
 80011c8:	1fffc000 	.word	0x1fffc000

080011cc <verify_address>:

//verify the address sent by the host .
uint8_t verify_address(uint32_t go_address)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
	//can we jump to backup sram memory ? yes
	//can we jump to peripheral memory ? its possible , but dont allow. so no
	//can we jump to external memory ? yes.

	//incomplete -poorly written .. optimize it
	if ( go_address >= SRAM1_BASE && go_address <= SRAM1_END)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80011da:	d305      	bcc.n	80011e8 <verify_address+0x1c>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	4a15      	ldr	r2, [pc, #84]	; (8001234 <verify_address+0x68>)
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d801      	bhi.n	80011e8 <verify_address+0x1c>
	{
		return ADDR_VALID;
 80011e4:	2300      	movs	r3, #0
 80011e6:	e01e      	b.n	8001226 <verify_address+0x5a>
	}
	else if ( go_address >= SRAM2_BASE && go_address <= SRAM2_END)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	4a13      	ldr	r2, [pc, #76]	; (8001238 <verify_address+0x6c>)
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d905      	bls.n	80011fc <verify_address+0x30>
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	4a12      	ldr	r2, [pc, #72]	; (800123c <verify_address+0x70>)
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d801      	bhi.n	80011fc <verify_address+0x30>
	{
		return ADDR_VALID;
 80011f8:	2300      	movs	r3, #0
 80011fa:	e014      	b.n	8001226 <verify_address+0x5a>
	}
	else if ( go_address >= FLASH_BASE && go_address <= FLASH_END)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001202:	d305      	bcc.n	8001210 <verify_address+0x44>
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	f1b3 6f02 	cmp.w	r3, #136314880	; 0x8200000
 800120a:	d201      	bcs.n	8001210 <verify_address+0x44>
	{
		return ADDR_VALID;
 800120c:	2300      	movs	r3, #0
 800120e:	e00a      	b.n	8001226 <verify_address+0x5a>
	}
	else if ( go_address >= BKPSRAM_BASE && go_address <= BKPSRAM_END)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	4a0b      	ldr	r2, [pc, #44]	; (8001240 <verify_address+0x74>)
 8001214:	4293      	cmp	r3, r2
 8001216:	d905      	bls.n	8001224 <verify_address+0x58>
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	4a0a      	ldr	r2, [pc, #40]	; (8001244 <verify_address+0x78>)
 800121c:	4293      	cmp	r3, r2
 800121e:	d801      	bhi.n	8001224 <verify_address+0x58>
	{
		return ADDR_VALID;
 8001220:	2300      	movs	r3, #0
 8001222:	e000      	b.n	8001226 <verify_address+0x5a>
	}
	else
		return ADDR_INVALID;
 8001224:	2301      	movs	r3, #1
}
 8001226:	4618      	mov	r0, r3
 8001228:	370c      	adds	r7, #12
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	2001c000 	.word	0x2001c000
 8001238:	2001bfff 	.word	0x2001bfff
 800123c:	20020000 	.word	0x20020000
 8001240:	40023fff 	.word	0x40023fff
 8001244:	40025000 	.word	0x40025000

08001248 <execute_flash_erase>:

uint8_t execute_flash_erase(uint8_t sector_number , uint8_t number_of_sector)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b08a      	sub	sp, #40	; 0x28
 800124c:	af00      	add	r7, sp, #0
 800124e:	4603      	mov	r3, r0
 8001250:	460a      	mov	r2, r1
 8001252:	71fb      	strb	r3, [r7, #7]
 8001254:	4613      	mov	r3, r2
 8001256:	71bb      	strb	r3, [r7, #6]
	FLASH_EraseInitTypeDef flashErase_handle;
	uint32_t sectorError;
	HAL_StatusTypeDef status;


	if( number_of_sector > 8 )
 8001258:	79bb      	ldrb	r3, [r7, #6]
 800125a:	2b08      	cmp	r3, #8
 800125c:	d901      	bls.n	8001262 <execute_flash_erase+0x1a>
		return INVALID_SECTOR;
 800125e:	2304      	movs	r3, #4
 8001260:	e035      	b.n	80012ce <execute_flash_erase+0x86>

	if( (sector_number == 0xff ) || (sector_number <= 7) )
 8001262:	79fb      	ldrb	r3, [r7, #7]
 8001264:	2bff      	cmp	r3, #255	; 0xff
 8001266:	d002      	beq.n	800126e <execute_flash_erase+0x26>
 8001268:	79fb      	ldrb	r3, [r7, #7]
 800126a:	2b07      	cmp	r3, #7
 800126c:	d82e      	bhi.n	80012cc <execute_flash_erase+0x84>
	{
		if(sector_number == (uint8_t) 0xff)
 800126e:	79fb      	ldrb	r3, [r7, #7]
 8001270:	2bff      	cmp	r3, #255	; 0xff
 8001272:	d102      	bne.n	800127a <execute_flash_erase+0x32>
		{
			flashErase_handle.TypeErase = FLASH_TYPEERASE_MASSERASE;
 8001274:	2301      	movs	r3, #1
 8001276:	613b      	str	r3, [r7, #16]
 8001278:	e012      	b.n	80012a0 <execute_flash_erase+0x58>
		}else
		{
			/*Here we are just calculating how many sectors needs to erased */
			uint8_t remanining_sector = 8 - sector_number;
 800127a:	79fb      	ldrb	r3, [r7, #7]
 800127c:	f1c3 0308 	rsb	r3, r3, #8
 8001280:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if( number_of_sector > remanining_sector)
 8001284:	79ba      	ldrb	r2, [r7, #6]
 8001286:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800128a:	429a      	cmp	r2, r3
 800128c:	d902      	bls.n	8001294 <execute_flash_erase+0x4c>
			{
				number_of_sector = remanining_sector;
 800128e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001292:	71bb      	strb	r3, [r7, #6]
			}
			flashErase_handle.TypeErase = FLASH_TYPEERASE_SECTORS;
 8001294:	2300      	movs	r3, #0
 8001296:	613b      	str	r3, [r7, #16]
			flashErase_handle.Sector = sector_number; // this is the initial sector
 8001298:	79fb      	ldrb	r3, [r7, #7]
 800129a:	61bb      	str	r3, [r7, #24]
			flashErase_handle.NbSectors = number_of_sector;
 800129c:	79bb      	ldrb	r3, [r7, #6]
 800129e:	61fb      	str	r3, [r7, #28]
		}
		flashErase_handle.Banks = FLASH_BANK_1;
 80012a0:	2301      	movs	r3, #1
 80012a2:	617b      	str	r3, [r7, #20]

		/*Get access to touch the flash registers */
		HAL_FLASH_Unlock();
 80012a4:	f000 fc50 	bl	8001b48 <HAL_FLASH_Unlock>
		flashErase_handle.VoltageRange = FLASH_VOLTAGE_RANGE_3;  // our mcu will work on this voltage range
 80012a8:	2302      	movs	r3, #2
 80012aa:	623b      	str	r3, [r7, #32]
		status = (uint8_t) HAL_FLASHEx_Erase(&flashErase_handle, &sectorError);
 80012ac:	f107 020c 	add.w	r2, r7, #12
 80012b0:	f107 0310 	add.w	r3, r7, #16
 80012b4:	4611      	mov	r1, r2
 80012b6:	4618      	mov	r0, r3
 80012b8:	f000 fde2 	bl	8001e80 <HAL_FLASHEx_Erase>
 80012bc:	4603      	mov	r3, r0
 80012be:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		HAL_FLASH_Lock();
 80012c2:	f000 fc63 	bl	8001b8c <HAL_FLASH_Lock>

		return status;
 80012c6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80012ca:	e000      	b.n	80012ce <execute_flash_erase+0x86>
	}


	return INVALID_SECTOR;
 80012cc:	2304      	movs	r3, #4
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3728      	adds	r7, #40	; 0x28
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}

080012d6 <execute_mem_write>:

/*This function writes the contents of pBuffer to  "mem_address" byte by byte */
//Note1 : Currently this function supports writing to Flash only .
//Note2 : This functions does not check whether "mem_address" is a valid address of the flash range.
uint8_t execute_mem_write(uint8_t *pBuffer, uint32_t mem_address, uint32_t len)
{
 80012d6:	b590      	push	{r4, r7, lr}
 80012d8:	b087      	sub	sp, #28
 80012da:	af00      	add	r7, sp, #0
 80012dc:	60f8      	str	r0, [r7, #12]
 80012de:	60b9      	str	r1, [r7, #8]
 80012e0:	607a      	str	r2, [r7, #4]
	uint8_t status=HAL_OK;
 80012e2:	2300      	movs	r3, #0
 80012e4:	75fb      	strb	r3, [r7, #23]

	//We have to unlock flash module to get control of registers
	HAL_FLASH_Unlock();
 80012e6:	f000 fc2f 	bl	8001b48 <HAL_FLASH_Unlock>

	for(uint32_t i = 0 ; i <len ; i++)
 80012ea:	2300      	movs	r3, #0
 80012ec:	613b      	str	r3, [r7, #16]
 80012ee:	e013      	b.n	8001318 <execute_mem_write+0x42>
	{
		//Here we program the flash byte by byte
		status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE,mem_address+i,pBuffer[i] );
 80012f0:	68ba      	ldr	r2, [r7, #8]
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	18d1      	adds	r1, r2, r3
 80012f6:	68fa      	ldr	r2, [r7, #12]
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	4413      	add	r3, r2
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	b2db      	uxtb	r3, r3
 8001300:	f04f 0400 	mov.w	r4, #0
 8001304:	461a      	mov	r2, r3
 8001306:	4623      	mov	r3, r4
 8001308:	2000      	movs	r0, #0
 800130a:	f000 fbc9 	bl	8001aa0 <HAL_FLASH_Program>
 800130e:	4603      	mov	r3, r0
 8001310:	75fb      	strb	r3, [r7, #23]
	for(uint32_t i = 0 ; i <len ; i++)
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	3301      	adds	r3, #1
 8001316:	613b      	str	r3, [r7, #16]
 8001318:	693a      	ldr	r2, [r7, #16]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	429a      	cmp	r2, r3
 800131e:	d3e7      	bcc.n	80012f0 <execute_mem_write+0x1a>
	}

	HAL_FLASH_Lock();
 8001320:	f000 fc34 	bl	8001b8c <HAL_FLASH_Lock>

	return status;
 8001324:	7dfb      	ldrb	r3, [r7, #23]
}
 8001326:	4618      	mov	r0, r3
 8001328:	371c      	adds	r7, #28
 800132a:	46bd      	mov	sp, r7
 800132c:	bd90      	pop	{r4, r7, pc}
	...

08001330 <configure_flash_sector_rw_protection>:
2. Write the desired option value in the FLASH_OPTCR register.
3. Set the option start bit (OPTSTRT) in the FLASH_OPTCR register
4. Wait for the BSY bit to be cleared.
 */
uint8_t configure_flash_sector_rw_protection(uint8_t sector_details, uint8_t protection_mode, uint8_t disable)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0
 8001336:	4603      	mov	r3, r0
 8001338:	71fb      	strb	r3, [r7, #7]
 800133a:	460b      	mov	r3, r1
 800133c:	71bb      	strb	r3, [r7, #6]
 800133e:	4613      	mov	r3, r2
 8001340:	717b      	strb	r3, [r7, #5]
	//protection_mode =1 , means write protect of the user flash sectors
	//protection_mode =2, means read/write protect of the user flash sectors
	//According to RM of stm32f446xx TABLE 9, We have to modify the address 0x1FFF C008 bit 15(SPRMOD)

	//Flash option control register (OPTCR)
	volatile uint32_t *pOPTCR = (uint32_t*) 0x40023C14;
 8001342:	4b44      	ldr	r3, [pc, #272]	; (8001454 <configure_flash_sector_rw_protection+0x124>)
 8001344:	60fb      	str	r3, [r7, #12]

	if(disable)
 8001346:	797b      	ldrb	r3, [r7, #5]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d025      	beq.n	8001398 <configure_flash_sector_rw_protection+0x68>
	{

		//disable all r/w protection on sectors

		//Option byte configuration unlock
		HAL_FLASH_OB_Unlock();
 800134c:	f000 fc2e 	bl	8001bac <HAL_FLASH_OB_Unlock>

		//wait till no active operation on flash
		while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET);
 8001350:	bf00      	nop
 8001352:	4b41      	ldr	r3, [pc, #260]	; (8001458 <configure_flash_sector_rw_protection+0x128>)
 8001354:	68db      	ldr	r3, [r3, #12]
 8001356:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800135a:	2b00      	cmp	r3, #0
 800135c:	d1f9      	bne.n	8001352 <configure_flash_sector_rw_protection+0x22>

		//clear the 31st bit (default state)
		//please refer : Flash option control register (FLASH_OPTCR) in RM
		*pOPTCR &= ~(1 << 31);
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	601a      	str	r2, [r3, #0]

		//clear the protection : make all bits belonging to sectors as 1
		*pOPTCR |= (0xFF << 16);
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f443 027f 	orr.w	r2, r3, #16711680	; 0xff0000
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	601a      	str	r2, [r3, #0]

		//Set the option start bit (OPTSTRT) in the FLASH_OPTCR register
		*pOPTCR |= ( 1 << 1);
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f043 0202 	orr.w	r2, r3, #2
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	601a      	str	r2, [r3, #0]

		//wait till no active operation on flash
		while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET);
 8001382:	bf00      	nop
 8001384:	4b34      	ldr	r3, [pc, #208]	; (8001458 <configure_flash_sector_rw_protection+0x128>)
 8001386:	68db      	ldr	r3, [r3, #12]
 8001388:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800138c:	2b00      	cmp	r3, #0
 800138e:	d1f9      	bne.n	8001384 <configure_flash_sector_rw_protection+0x54>

		HAL_FLASH_OB_Lock();
 8001390:	f000 fc28 	bl	8001be4 <HAL_FLASH_OB_Lock>

		return 0;
 8001394:	2300      	movs	r3, #0
 8001396:	e058      	b.n	800144a <configure_flash_sector_rw_protection+0x11a>

	}

	if(protection_mode == (uint8_t) 1)
 8001398:	79bb      	ldrb	r3, [r7, #6]
 800139a:	2b01      	cmp	r3, #1
 800139c:	d126      	bne.n	80013ec <configure_flash_sector_rw_protection+0xbc>
	{
		//we are putting write protection on the sectors encoded in sector_details argument

		//Option byte configuration unlock
		HAL_FLASH_OB_Unlock();
 800139e:	f000 fc05 	bl	8001bac <HAL_FLASH_OB_Unlock>

		//wait till no active operation on flash
		while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET);
 80013a2:	bf00      	nop
 80013a4:	4b2c      	ldr	r3, [pc, #176]	; (8001458 <configure_flash_sector_rw_protection+0x128>)
 80013a6:	68db      	ldr	r3, [r3, #12]
 80013a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d1f9      	bne.n	80013a4 <configure_flash_sector_rw_protection+0x74>

		//here we are setting just write protection for the sectors
		//clear the 31st bit
		//please refer : Flash option control register (FLASH_OPTCR) in RM
		*pOPTCR &= ~(1 << 31);
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	601a      	str	r2, [r3, #0]

		//put write protection on sectors
		*pOPTCR &= ~ (sector_details << 16);
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	79fa      	ldrb	r2, [r7, #7]
 80013c2:	0412      	lsls	r2, r2, #16
 80013c4:	43d2      	mvns	r2, r2
 80013c6:	401a      	ands	r2, r3
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	601a      	str	r2, [r3, #0]

		//Set the option start bit (OPTSTRT) in the FLASH_OPTCR register
		*pOPTCR |= ( 1 << 1);
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f043 0202 	orr.w	r2, r3, #2
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	601a      	str	r2, [r3, #0]

		//wait till no active operation on flash
		while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET);
 80013d8:	bf00      	nop
 80013da:	4b1f      	ldr	r3, [pc, #124]	; (8001458 <configure_flash_sector_rw_protection+0x128>)
 80013dc:	68db      	ldr	r3, [r3, #12]
 80013de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d1f9      	bne.n	80013da <configure_flash_sector_rw_protection+0xaa>

		HAL_FLASH_OB_Lock();
 80013e6:	f000 fbfd 	bl	8001be4 <HAL_FLASH_OB_Lock>
 80013ea:	e02d      	b.n	8001448 <configure_flash_sector_rw_protection+0x118>
	}

	else if (protection_mode == (uint8_t) 2)
 80013ec:	79bb      	ldrb	r3, [r7, #6]
 80013ee:	2b02      	cmp	r3, #2
 80013f0:	d12a      	bne.n	8001448 <configure_flash_sector_rw_protection+0x118>
	{
		//Option byte configuration unlock
		HAL_FLASH_OB_Unlock();
 80013f2:	f000 fbdb 	bl	8001bac <HAL_FLASH_OB_Unlock>

		//wait till no active operation on flash
		while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET);
 80013f6:	bf00      	nop
 80013f8:	4b17      	ldr	r3, [pc, #92]	; (8001458 <configure_flash_sector_rw_protection+0x128>)
 80013fa:	68db      	ldr	r3, [r3, #12]
 80013fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001400:	2b00      	cmp	r3, #0
 8001402:	d1f9      	bne.n	80013f8 <configure_flash_sector_rw_protection+0xc8>

		//here wer are setting read and write protection for the sectors
		//set the 31st bit
		//please refer : Flash option control register (FLASH_OPTCR) in RM
		*pOPTCR |= (1 << 31);
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	601a      	str	r2, [r3, #0]

		//put read and write protection on sectors
		*pOPTCR &= ~(0xff << 16);
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	601a      	str	r2, [r3, #0]
		*pOPTCR |= (sector_details << 16);
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	79fa      	ldrb	r2, [r7, #7]
 8001422:	0412      	lsls	r2, r2, #16
 8001424:	431a      	orrs	r2, r3
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	601a      	str	r2, [r3, #0]

		//Set the option start bit (OPTSTRT) in the FLASH_OPTCR register
		*pOPTCR |= ( 1 << 1);
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f043 0202 	orr.w	r2, r3, #2
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	601a      	str	r2, [r3, #0]

		//wait till no active operation on flash
		while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET);
 8001436:	bf00      	nop
 8001438:	4b07      	ldr	r3, [pc, #28]	; (8001458 <configure_flash_sector_rw_protection+0x128>)
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001440:	2b00      	cmp	r3, #0
 8001442:	d1f9      	bne.n	8001438 <configure_flash_sector_rw_protection+0x108>

		HAL_FLASH_OB_Lock();
 8001444:	f000 fbce 	bl	8001be4 <HAL_FLASH_OB_Lock>
	}

	return 0;
 8001448:	2300      	movs	r3, #0
}
 800144a:	4618      	mov	r0, r3
 800144c:	3710      	adds	r7, #16
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	40023c14 	.word	0x40023c14
 8001458:	40023c00 	.word	0x40023c00

0800145c <read_OB_rw_protection_status>:

uint16_t read_OB_rw_protection_status(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b088      	sub	sp, #32
 8001460:	af00      	add	r7, sp, #0
	//This structure is given by ST Flash driver to hold the OB(Option Byte) contents .
	FLASH_OBProgramInitTypeDef OBInit;

	//First unlock the OB(Option Byte) memory access
	HAL_FLASH_OB_Unlock();
 8001462:	f000 fba3 	bl	8001bac <HAL_FLASH_OB_Unlock>
	//get the OB configuration details
	HAL_FLASHEx_OBGetConfig(&OBInit);
 8001466:	1d3b      	adds	r3, r7, #4
 8001468:	4618      	mov	r0, r3
 800146a:	f000 fd7b 	bl	8001f64 <HAL_FLASHEx_OBGetConfig>
	//Lock back .
	HAL_FLASH_Lock();
 800146e:	f000 fb8d 	bl	8001b8c <HAL_FLASH_Lock>

	//We are just interested in r/w protection status of the sectors.
	return (uint16_t)OBInit.WRPSector;
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	b29b      	uxth	r3, r3

}
 8001476:	4618      	mov	r0, r3
 8001478:	3720      	adds	r7, #32
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}

0800147e <_Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void _Error_Handler(char * file, int line)
{
 800147e:	b480      	push	{r7}
 8001480:	b083      	sub	sp, #12
 8001482:	af00      	add	r7, sp, #0
 8001484:	6078      	str	r0, [r7, #4]
 8001486:	6039      	str	r1, [r7, #0]
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	while(1)
 8001488:	e7fe      	b.n	8001488 <_Error_Handler+0xa>
	...

0800148c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001492:	2300      	movs	r3, #0
 8001494:	607b      	str	r3, [r7, #4]
 8001496:	4b10      	ldr	r3, [pc, #64]	; (80014d8 <HAL_MspInit+0x4c>)
 8001498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800149a:	4a0f      	ldr	r2, [pc, #60]	; (80014d8 <HAL_MspInit+0x4c>)
 800149c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014a0:	6453      	str	r3, [r2, #68]	; 0x44
 80014a2:	4b0d      	ldr	r3, [pc, #52]	; (80014d8 <HAL_MspInit+0x4c>)
 80014a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014aa:	607b      	str	r3, [r7, #4]
 80014ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014ae:	2300      	movs	r3, #0
 80014b0:	603b      	str	r3, [r7, #0]
 80014b2:	4b09      	ldr	r3, [pc, #36]	; (80014d8 <HAL_MspInit+0x4c>)
 80014b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b6:	4a08      	ldr	r2, [pc, #32]	; (80014d8 <HAL_MspInit+0x4c>)
 80014b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014bc:	6413      	str	r3, [r2, #64]	; 0x40
 80014be:	4b06      	ldr	r3, [pc, #24]	; (80014d8 <HAL_MspInit+0x4c>)
 80014c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014c6:	603b      	str	r3, [r7, #0]
 80014c8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80014ca:	2007      	movs	r0, #7
 80014cc:	f000 fa60 	bl	8001990 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014d0:	bf00      	nop
 80014d2:	3708      	adds	r7, #8
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	40023800 	.word	0x40023800

080014dc <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80014dc:	b480      	push	{r7}
 80014de:	b085      	sub	sp, #20
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a0b      	ldr	r2, [pc, #44]	; (8001518 <HAL_CRC_MspInit+0x3c>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d10d      	bne.n	800150a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80014ee:	2300      	movs	r3, #0
 80014f0:	60fb      	str	r3, [r7, #12]
 80014f2:	4b0a      	ldr	r3, [pc, #40]	; (800151c <HAL_CRC_MspInit+0x40>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f6:	4a09      	ldr	r2, [pc, #36]	; (800151c <HAL_CRC_MspInit+0x40>)
 80014f8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80014fc:	6313      	str	r3, [r2, #48]	; 0x30
 80014fe:	4b07      	ldr	r3, [pc, #28]	; (800151c <HAL_CRC_MspInit+0x40>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001502:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001506:	60fb      	str	r3, [r7, #12]
 8001508:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800150a:	bf00      	nop
 800150c:	3714      	adds	r7, #20
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	40023000 	.word	0x40023000
 800151c:	40023800 	.word	0x40023800

08001520 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b08c      	sub	sp, #48	; 0x30
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001528:	f107 031c 	add.w	r3, r7, #28
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]
 8001530:	605a      	str	r2, [r3, #4]
 8001532:	609a      	str	r2, [r3, #8]
 8001534:	60da      	str	r2, [r3, #12]
 8001536:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a33      	ldr	r2, [pc, #204]	; (800160c <HAL_UART_MspInit+0xec>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d12d      	bne.n	800159e <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001542:	2300      	movs	r3, #0
 8001544:	61bb      	str	r3, [r7, #24]
 8001546:	4b32      	ldr	r3, [pc, #200]	; (8001610 <HAL_UART_MspInit+0xf0>)
 8001548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800154a:	4a31      	ldr	r2, [pc, #196]	; (8001610 <HAL_UART_MspInit+0xf0>)
 800154c:	f043 0310 	orr.w	r3, r3, #16
 8001550:	6453      	str	r3, [r2, #68]	; 0x44
 8001552:	4b2f      	ldr	r3, [pc, #188]	; (8001610 <HAL_UART_MspInit+0xf0>)
 8001554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001556:	f003 0310 	and.w	r3, r3, #16
 800155a:	61bb      	str	r3, [r7, #24]
 800155c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800155e:	2300      	movs	r3, #0
 8001560:	617b      	str	r3, [r7, #20]
 8001562:	4b2b      	ldr	r3, [pc, #172]	; (8001610 <HAL_UART_MspInit+0xf0>)
 8001564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001566:	4a2a      	ldr	r2, [pc, #168]	; (8001610 <HAL_UART_MspInit+0xf0>)
 8001568:	f043 0301 	orr.w	r3, r3, #1
 800156c:	6313      	str	r3, [r2, #48]	; 0x30
 800156e:	4b28      	ldr	r3, [pc, #160]	; (8001610 <HAL_UART_MspInit+0xf0>)
 8001570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001572:	f003 0301 	and.w	r3, r3, #1
 8001576:	617b      	str	r3, [r7, #20]
 8001578:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800157a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800157e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001580:	2302      	movs	r3, #2
 8001582:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001584:	2300      	movs	r3, #0
 8001586:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001588:	2303      	movs	r3, #3
 800158a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800158c:	2307      	movs	r3, #7
 800158e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001590:	f107 031c 	add.w	r3, r7, #28
 8001594:	4619      	mov	r1, r3
 8001596:	481f      	ldr	r0, [pc, #124]	; (8001614 <HAL_UART_MspInit+0xf4>)
 8001598:	f000 fe22 	bl	80021e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800159c:	e031      	b.n	8001602 <HAL_UART_MspInit+0xe2>
  else if(huart->Instance==USART3)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a1d      	ldr	r2, [pc, #116]	; (8001618 <HAL_UART_MspInit+0xf8>)
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d12c      	bne.n	8001602 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART3_CLK_ENABLE();
 80015a8:	2300      	movs	r3, #0
 80015aa:	613b      	str	r3, [r7, #16]
 80015ac:	4b18      	ldr	r3, [pc, #96]	; (8001610 <HAL_UART_MspInit+0xf0>)
 80015ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b0:	4a17      	ldr	r2, [pc, #92]	; (8001610 <HAL_UART_MspInit+0xf0>)
 80015b2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015b6:	6413      	str	r3, [r2, #64]	; 0x40
 80015b8:	4b15      	ldr	r3, [pc, #84]	; (8001610 <HAL_UART_MspInit+0xf0>)
 80015ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015c0:	613b      	str	r3, [r7, #16]
 80015c2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015c4:	2300      	movs	r3, #0
 80015c6:	60fb      	str	r3, [r7, #12]
 80015c8:	4b11      	ldr	r3, [pc, #68]	; (8001610 <HAL_UART_MspInit+0xf0>)
 80015ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015cc:	4a10      	ldr	r2, [pc, #64]	; (8001610 <HAL_UART_MspInit+0xf0>)
 80015ce:	f043 0302 	orr.w	r3, r3, #2
 80015d2:	6313      	str	r3, [r2, #48]	; 0x30
 80015d4:	4b0e      	ldr	r3, [pc, #56]	; (8001610 <HAL_UART_MspInit+0xf0>)
 80015d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d8:	f003 0302 	and.w	r3, r3, #2
 80015dc:	60fb      	str	r3, [r7, #12]
 80015de:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80015e0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80015e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e6:	2302      	movs	r3, #2
 80015e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ea:	2300      	movs	r3, #0
 80015ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ee:	2303      	movs	r3, #3
 80015f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80015f2:	2307      	movs	r3, #7
 80015f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015f6:	f107 031c 	add.w	r3, r7, #28
 80015fa:	4619      	mov	r1, r3
 80015fc:	4807      	ldr	r0, [pc, #28]	; (800161c <HAL_UART_MspInit+0xfc>)
 80015fe:	f000 fdef 	bl	80021e0 <HAL_GPIO_Init>
}
 8001602:	bf00      	nop
 8001604:	3730      	adds	r7, #48	; 0x30
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	40011000 	.word	0x40011000
 8001610:	40023800 	.word	0x40023800
 8001614:	40020000 	.word	0x40020000
 8001618:	40004800 	.word	0x40004800
 800161c:	40020400 	.word	0x40020400

08001620 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001624:	bf00      	nop
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr

0800162e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800162e:	b480      	push	{r7}
 8001630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001632:	e7fe      	b.n	8001632 <HardFault_Handler+0x4>

08001634 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001638:	e7fe      	b.n	8001638 <MemManage_Handler+0x4>

0800163a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800163a:	b480      	push	{r7}
 800163c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800163e:	e7fe      	b.n	800163e <BusFault_Handler+0x4>

08001640 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001644:	e7fe      	b.n	8001644 <UsageFault_Handler+0x4>

08001646 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001646:	b480      	push	{r7}
 8001648:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800164a:	bf00      	nop
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr

08001654 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001658:	bf00      	nop
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr

08001662 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001662:	b480      	push	{r7}
 8001664:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001666:	bf00      	nop
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr

08001670 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001674:	f000 f89c 	bl	80017b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001678:	bf00      	nop
 800167a:	bd80      	pop	{r7, pc}

0800167c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001680:	2001      	movs	r0, #1
 8001682:	f000 ff89 	bl	8002598 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001686:	bf00      	nop
 8001688:	bd80      	pop	{r7, pc}
	...

0800168c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001690:	4b08      	ldr	r3, [pc, #32]	; (80016b4 <SystemInit+0x28>)
 8001692:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001696:	4a07      	ldr	r2, [pc, #28]	; (80016b4 <SystemInit+0x28>)
 8001698:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800169c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80016a0:	4b04      	ldr	r3, [pc, #16]	; (80016b4 <SystemInit+0x28>)
 80016a2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80016a6:	609a      	str	r2, [r3, #8]
#endif
}
 80016a8:	bf00      	nop
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	e000ed00 	.word	0xe000ed00

080016b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80016b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016f0 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80016bc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80016be:	e003      	b.n	80016c8 <LoopCopyDataInit>

080016c0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80016c0:	4b0c      	ldr	r3, [pc, #48]	; (80016f4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80016c2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80016c4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80016c6:	3104      	adds	r1, #4

080016c8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80016c8:	480b      	ldr	r0, [pc, #44]	; (80016f8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80016ca:	4b0c      	ldr	r3, [pc, #48]	; (80016fc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80016cc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80016ce:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80016d0:	d3f6      	bcc.n	80016c0 <CopyDataInit>
  ldr  r2, =_sbss
 80016d2:	4a0b      	ldr	r2, [pc, #44]	; (8001700 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80016d4:	e002      	b.n	80016dc <LoopFillZerobss>

080016d6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80016d6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80016d8:	f842 3b04 	str.w	r3, [r2], #4

080016dc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80016dc:	4b09      	ldr	r3, [pc, #36]	; (8001704 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80016de:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80016e0:	d3f9      	bcc.n	80016d6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80016e2:	f7ff ffd3 	bl	800168c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016e6:	f002 f92f 	bl	8003948 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016ea:	f7fe feff 	bl	80004ec <main>
  bx  lr    
 80016ee:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80016f0:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80016f4:	08003f4c 	.word	0x08003f4c
  ldr  r0, =_sdata
 80016f8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80016fc:	20000018 	.word	0x20000018
  ldr  r2, =_sbss
 8001700:	20000018 	.word	0x20000018
  ldr  r3, = _ebss
 8001704:	200001a8 	.word	0x200001a8

08001708 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001708:	e7fe      	b.n	8001708 <ADC_IRQHandler>
	...

0800170c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001710:	4b0e      	ldr	r3, [pc, #56]	; (800174c <HAL_Init+0x40>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a0d      	ldr	r2, [pc, #52]	; (800174c <HAL_Init+0x40>)
 8001716:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800171a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800171c:	4b0b      	ldr	r3, [pc, #44]	; (800174c <HAL_Init+0x40>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a0a      	ldr	r2, [pc, #40]	; (800174c <HAL_Init+0x40>)
 8001722:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001726:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001728:	4b08      	ldr	r3, [pc, #32]	; (800174c <HAL_Init+0x40>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a07      	ldr	r2, [pc, #28]	; (800174c <HAL_Init+0x40>)
 800172e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001732:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001734:	2003      	movs	r0, #3
 8001736:	f000 f92b 	bl	8001990 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800173a:	2000      	movs	r0, #0
 800173c:	f000 f808 	bl	8001750 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001740:	f7ff fea4 	bl	800148c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001744:	2300      	movs	r3, #0
}
 8001746:	4618      	mov	r0, r3
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	40023c00 	.word	0x40023c00

08001750 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001758:	4b12      	ldr	r3, [pc, #72]	; (80017a4 <HAL_InitTick+0x54>)
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	4b12      	ldr	r3, [pc, #72]	; (80017a8 <HAL_InitTick+0x58>)
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	4619      	mov	r1, r3
 8001762:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001766:	fbb3 f3f1 	udiv	r3, r3, r1
 800176a:	fbb2 f3f3 	udiv	r3, r2, r3
 800176e:	4618      	mov	r0, r3
 8001770:	f000 f943 	bl	80019fa <HAL_SYSTICK_Config>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e00e      	b.n	800179c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2b0f      	cmp	r3, #15
 8001782:	d80a      	bhi.n	800179a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001784:	2200      	movs	r2, #0
 8001786:	6879      	ldr	r1, [r7, #4]
 8001788:	f04f 30ff 	mov.w	r0, #4294967295
 800178c:	f000 f90b 	bl	80019a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001790:	4a06      	ldr	r2, [pc, #24]	; (80017ac <HAL_InitTick+0x5c>)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001796:	2300      	movs	r3, #0
 8001798:	e000      	b.n	800179c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
}
 800179c:	4618      	mov	r0, r3
 800179e:	3708      	adds	r7, #8
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	2000000c 	.word	0x2000000c
 80017a8:	20000014 	.word	0x20000014
 80017ac:	20000010 	.word	0x20000010

080017b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017b4:	4b06      	ldr	r3, [pc, #24]	; (80017d0 <HAL_IncTick+0x20>)
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	461a      	mov	r2, r3
 80017ba:	4b06      	ldr	r3, [pc, #24]	; (80017d4 <HAL_IncTick+0x24>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4413      	add	r3, r2
 80017c0:	4a04      	ldr	r2, [pc, #16]	; (80017d4 <HAL_IncTick+0x24>)
 80017c2:	6013      	str	r3, [r2, #0]
}
 80017c4:	bf00      	nop
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	20000014 	.word	0x20000014
 80017d4:	20000184 	.word	0x20000184

080017d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  return uwTick;
 80017dc:	4b03      	ldr	r3, [pc, #12]	; (80017ec <HAL_GetTick+0x14>)
 80017de:	681b      	ldr	r3, [r3, #0]
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	20000184 	.word	0x20000184

080017f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b085      	sub	sp, #20
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	f003 0307 	and.w	r3, r3, #7
 80017fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001800:	4b0c      	ldr	r3, [pc, #48]	; (8001834 <__NVIC_SetPriorityGrouping+0x44>)
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001806:	68ba      	ldr	r2, [r7, #8]
 8001808:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800180c:	4013      	ands	r3, r2
 800180e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001818:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800181c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001820:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001822:	4a04      	ldr	r2, [pc, #16]	; (8001834 <__NVIC_SetPriorityGrouping+0x44>)
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	60d3      	str	r3, [r2, #12]
}
 8001828:	bf00      	nop
 800182a:	3714      	adds	r7, #20
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr
 8001834:	e000ed00 	.word	0xe000ed00

08001838 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800183c:	4b04      	ldr	r3, [pc, #16]	; (8001850 <__NVIC_GetPriorityGrouping+0x18>)
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	0a1b      	lsrs	r3, r3, #8
 8001842:	f003 0307 	and.w	r3, r3, #7
}
 8001846:	4618      	mov	r0, r3
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr
 8001850:	e000ed00 	.word	0xe000ed00

08001854 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
 800185a:	4603      	mov	r3, r0
 800185c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800185e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001862:	2b00      	cmp	r3, #0
 8001864:	db0b      	blt.n	800187e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001866:	79fb      	ldrb	r3, [r7, #7]
 8001868:	f003 021f 	and.w	r2, r3, #31
 800186c:	4907      	ldr	r1, [pc, #28]	; (800188c <__NVIC_EnableIRQ+0x38>)
 800186e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001872:	095b      	lsrs	r3, r3, #5
 8001874:	2001      	movs	r0, #1
 8001876:	fa00 f202 	lsl.w	r2, r0, r2
 800187a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800187e:	bf00      	nop
 8001880:	370c      	adds	r7, #12
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	e000e100 	.word	0xe000e100

08001890 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	4603      	mov	r3, r0
 8001898:	6039      	str	r1, [r7, #0]
 800189a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800189c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	db0a      	blt.n	80018ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	b2da      	uxtb	r2, r3
 80018a8:	490c      	ldr	r1, [pc, #48]	; (80018dc <__NVIC_SetPriority+0x4c>)
 80018aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ae:	0112      	lsls	r2, r2, #4
 80018b0:	b2d2      	uxtb	r2, r2
 80018b2:	440b      	add	r3, r1
 80018b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018b8:	e00a      	b.n	80018d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	b2da      	uxtb	r2, r3
 80018be:	4908      	ldr	r1, [pc, #32]	; (80018e0 <__NVIC_SetPriority+0x50>)
 80018c0:	79fb      	ldrb	r3, [r7, #7]
 80018c2:	f003 030f 	and.w	r3, r3, #15
 80018c6:	3b04      	subs	r3, #4
 80018c8:	0112      	lsls	r2, r2, #4
 80018ca:	b2d2      	uxtb	r2, r2
 80018cc:	440b      	add	r3, r1
 80018ce:	761a      	strb	r2, [r3, #24]
}
 80018d0:	bf00      	nop
 80018d2:	370c      	adds	r7, #12
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr
 80018dc:	e000e100 	.word	0xe000e100
 80018e0:	e000ed00 	.word	0xe000ed00

080018e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b089      	sub	sp, #36	; 0x24
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	60f8      	str	r0, [r7, #12]
 80018ec:	60b9      	str	r1, [r7, #8]
 80018ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	f003 0307 	and.w	r3, r3, #7
 80018f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018f8:	69fb      	ldr	r3, [r7, #28]
 80018fa:	f1c3 0307 	rsb	r3, r3, #7
 80018fe:	2b04      	cmp	r3, #4
 8001900:	bf28      	it	cs
 8001902:	2304      	movcs	r3, #4
 8001904:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	3304      	adds	r3, #4
 800190a:	2b06      	cmp	r3, #6
 800190c:	d902      	bls.n	8001914 <NVIC_EncodePriority+0x30>
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	3b03      	subs	r3, #3
 8001912:	e000      	b.n	8001916 <NVIC_EncodePriority+0x32>
 8001914:	2300      	movs	r3, #0
 8001916:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001918:	f04f 32ff 	mov.w	r2, #4294967295
 800191c:	69bb      	ldr	r3, [r7, #24]
 800191e:	fa02 f303 	lsl.w	r3, r2, r3
 8001922:	43da      	mvns	r2, r3
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	401a      	ands	r2, r3
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800192c:	f04f 31ff 	mov.w	r1, #4294967295
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	fa01 f303 	lsl.w	r3, r1, r3
 8001936:	43d9      	mvns	r1, r3
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800193c:	4313      	orrs	r3, r2
         );
}
 800193e:	4618      	mov	r0, r3
 8001940:	3724      	adds	r7, #36	; 0x24
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
	...

0800194c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	3b01      	subs	r3, #1
 8001958:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800195c:	d301      	bcc.n	8001962 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800195e:	2301      	movs	r3, #1
 8001960:	e00f      	b.n	8001982 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001962:	4a0a      	ldr	r2, [pc, #40]	; (800198c <SysTick_Config+0x40>)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	3b01      	subs	r3, #1
 8001968:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800196a:	210f      	movs	r1, #15
 800196c:	f04f 30ff 	mov.w	r0, #4294967295
 8001970:	f7ff ff8e 	bl	8001890 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001974:	4b05      	ldr	r3, [pc, #20]	; (800198c <SysTick_Config+0x40>)
 8001976:	2200      	movs	r2, #0
 8001978:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800197a:	4b04      	ldr	r3, [pc, #16]	; (800198c <SysTick_Config+0x40>)
 800197c:	2207      	movs	r2, #7
 800197e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001980:	2300      	movs	r3, #0
}
 8001982:	4618      	mov	r0, r3
 8001984:	3708      	adds	r7, #8
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	e000e010 	.word	0xe000e010

08001990 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001998:	6878      	ldr	r0, [r7, #4]
 800199a:	f7ff ff29 	bl	80017f0 <__NVIC_SetPriorityGrouping>
}
 800199e:	bf00      	nop
 80019a0:	3708      	adds	r7, #8
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}

080019a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019a6:	b580      	push	{r7, lr}
 80019a8:	b086      	sub	sp, #24
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	4603      	mov	r3, r0
 80019ae:	60b9      	str	r1, [r7, #8]
 80019b0:	607a      	str	r2, [r7, #4]
 80019b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019b4:	2300      	movs	r3, #0
 80019b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019b8:	f7ff ff3e 	bl	8001838 <__NVIC_GetPriorityGrouping>
 80019bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019be:	687a      	ldr	r2, [r7, #4]
 80019c0:	68b9      	ldr	r1, [r7, #8]
 80019c2:	6978      	ldr	r0, [r7, #20]
 80019c4:	f7ff ff8e 	bl	80018e4 <NVIC_EncodePriority>
 80019c8:	4602      	mov	r2, r0
 80019ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019ce:	4611      	mov	r1, r2
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7ff ff5d 	bl	8001890 <__NVIC_SetPriority>
}
 80019d6:	bf00      	nop
 80019d8:	3718      	adds	r7, #24
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}

080019de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019de:	b580      	push	{r7, lr}
 80019e0:	b082      	sub	sp, #8
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	4603      	mov	r3, r0
 80019e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ec:	4618      	mov	r0, r3
 80019ee:	f7ff ff31 	bl	8001854 <__NVIC_EnableIRQ>
}
 80019f2:	bf00      	nop
 80019f4:	3708      	adds	r7, #8
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}

080019fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019fa:	b580      	push	{r7, lr}
 80019fc:	b082      	sub	sp, #8
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f7ff ffa2 	bl	800194c <SysTick_Config>
 8001a08:	4603      	mov	r3, r0
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3708      	adds	r7, #8
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}

08001a12 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001a12:	b580      	push	{r7, lr}
 8001a14:	b082      	sub	sp, #8
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d101      	bne.n	8001a24 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001a20:	2301      	movs	r3, #1
 8001a22:	e00e      	b.n	8001a42 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	795b      	ldrb	r3, [r3, #5]
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d105      	bne.n	8001a3a <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2200      	movs	r2, #0
 8001a32:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	f7ff fd51 	bl	80014dc <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001a40:	2300      	movs	r3, #0
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3708      	adds	r7, #8
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}

08001a4a <HAL_CRC_Accumulate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8001a4a:	b480      	push	{r7}
 8001a4c:	b087      	sub	sp, #28
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	60f8      	str	r0, [r7, #12]
 8001a52:	60b9      	str	r1, [r7, #8]
 8001a54:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8001a56:	2300      	movs	r3, #0
 8001a58:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	2202      	movs	r2, #2
 8001a5e:	715a      	strb	r2, [r3, #5]

  /* Enter Data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 8001a60:	2300      	movs	r3, #0
 8001a62:	617b      	str	r3, [r7, #20]
 8001a64:	e00a      	b.n	8001a7c <HAL_CRC_Accumulate+0x32>
  {
    hcrc->Instance->DR = pBuffer[index];
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	68ba      	ldr	r2, [r7, #8]
 8001a6c:	441a      	add	r2, r3
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	6812      	ldr	r2, [r2, #0]
 8001a74:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	3301      	adds	r3, #1
 8001a7a:	617b      	str	r3, [r7, #20]
 8001a7c:	697a      	ldr	r2, [r7, #20]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d3f0      	bcc.n	8001a66 <HAL_CRC_Accumulate+0x1c>
  }
  temp = hcrc->Instance->DR;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	2201      	movs	r2, #1
 8001a90:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 8001a92:	693b      	ldr	r3, [r7, #16]
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	371c      	adds	r7, #28
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr

08001aa0 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b086      	sub	sp, #24
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	60f8      	str	r0, [r7, #12]
 8001aa8:	60b9      	str	r1, [r7, #8]
 8001aaa:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001ab2:	4b23      	ldr	r3, [pc, #140]	; (8001b40 <HAL_FLASH_Program+0xa0>)
 8001ab4:	7e1b      	ldrb	r3, [r3, #24]
 8001ab6:	2b01      	cmp	r3, #1
 8001ab8:	d101      	bne.n	8001abe <HAL_FLASH_Program+0x1e>
 8001aba:	2302      	movs	r3, #2
 8001abc:	e03b      	b.n	8001b36 <HAL_FLASH_Program+0x96>
 8001abe:	4b20      	ldr	r3, [pc, #128]	; (8001b40 <HAL_FLASH_Program+0xa0>)
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001ac4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001ac8:	f000 f89c 	bl	8001c04 <FLASH_WaitForLastOperation>
 8001acc:	4603      	mov	r3, r0
 8001ace:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8001ad0:	7dfb      	ldrb	r3, [r7, #23]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d12b      	bne.n	8001b2e <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d105      	bne.n	8001ae8 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8001adc:	783b      	ldrb	r3, [r7, #0]
 8001ade:	4619      	mov	r1, r3
 8001ae0:	68b8      	ldr	r0, [r7, #8]
 8001ae2:	f000 f945 	bl	8001d70 <FLASH_Program_Byte>
 8001ae6:	e016      	b.n	8001b16 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	d105      	bne.n	8001afa <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8001aee:	883b      	ldrh	r3, [r7, #0]
 8001af0:	4619      	mov	r1, r3
 8001af2:	68b8      	ldr	r0, [r7, #8]
 8001af4:	f000 f918 	bl	8001d28 <FLASH_Program_HalfWord>
 8001af8:	e00d      	b.n	8001b16 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	2b02      	cmp	r3, #2
 8001afe:	d105      	bne.n	8001b0c <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	4619      	mov	r1, r3
 8001b04:	68b8      	ldr	r0, [r7, #8]
 8001b06:	f000 f8ed 	bl	8001ce4 <FLASH_Program_Word>
 8001b0a:	e004      	b.n	8001b16 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8001b0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001b10:	68b8      	ldr	r0, [r7, #8]
 8001b12:	f000 f8b7 	bl	8001c84 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001b16:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001b1a:	f000 f873 	bl	8001c04 <FLASH_WaitForLastOperation>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8001b22:	4b08      	ldr	r3, [pc, #32]	; (8001b44 <HAL_FLASH_Program+0xa4>)
 8001b24:	691b      	ldr	r3, [r3, #16]
 8001b26:	4a07      	ldr	r2, [pc, #28]	; (8001b44 <HAL_FLASH_Program+0xa4>)
 8001b28:	f023 0301 	bic.w	r3, r3, #1
 8001b2c:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001b2e:	4b04      	ldr	r3, [pc, #16]	; (8001b40 <HAL_FLASH_Program+0xa0>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	761a      	strb	r2, [r3, #24]
  
  return status;
 8001b34:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3718      	adds	r7, #24
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	20000188 	.word	0x20000188
 8001b44:	40023c00 	.word	0x40023c00

08001b48 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001b52:	4b0b      	ldr	r3, [pc, #44]	; (8001b80 <HAL_FLASH_Unlock+0x38>)
 8001b54:	691b      	ldr	r3, [r3, #16]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	da0b      	bge.n	8001b72 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001b5a:	4b09      	ldr	r3, [pc, #36]	; (8001b80 <HAL_FLASH_Unlock+0x38>)
 8001b5c:	4a09      	ldr	r2, [pc, #36]	; (8001b84 <HAL_FLASH_Unlock+0x3c>)
 8001b5e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001b60:	4b07      	ldr	r3, [pc, #28]	; (8001b80 <HAL_FLASH_Unlock+0x38>)
 8001b62:	4a09      	ldr	r2, [pc, #36]	; (8001b88 <HAL_FLASH_Unlock+0x40>)
 8001b64:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001b66:	4b06      	ldr	r3, [pc, #24]	; (8001b80 <HAL_FLASH_Unlock+0x38>)
 8001b68:	691b      	ldr	r3, [r3, #16]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	da01      	bge.n	8001b72 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001b72:	79fb      	ldrb	r3, [r7, #7]
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	370c      	adds	r7, #12
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr
 8001b80:	40023c00 	.word	0x40023c00
 8001b84:	45670123 	.word	0x45670123
 8001b88:	cdef89ab 	.word	0xcdef89ab

08001b8c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8001b90:	4b05      	ldr	r3, [pc, #20]	; (8001ba8 <HAL_FLASH_Lock+0x1c>)
 8001b92:	691b      	ldr	r3, [r3, #16]
 8001b94:	4a04      	ldr	r2, [pc, #16]	; (8001ba8 <HAL_FLASH_Lock+0x1c>)
 8001b96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001b9a:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8001b9c:	2300      	movs	r3, #0
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr
 8001ba8:	40023c00 	.word	0x40023c00

08001bac <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0
  if((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
 8001bb0:	4b09      	ldr	r3, [pc, #36]	; (8001bd8 <HAL_FLASH_OB_Unlock+0x2c>)
 8001bb2:	695b      	ldr	r3, [r3, #20]
 8001bb4:	f003 0301 	and.w	r3, r3, #1
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d007      	beq.n	8001bcc <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    FLASH->OPTKEYR = FLASH_OPT_KEY1;
 8001bbc:	4b06      	ldr	r3, [pc, #24]	; (8001bd8 <HAL_FLASH_OB_Unlock+0x2c>)
 8001bbe:	4a07      	ldr	r2, [pc, #28]	; (8001bdc <HAL_FLASH_OB_Unlock+0x30>)
 8001bc0:	609a      	str	r2, [r3, #8]
    FLASH->OPTKEYR = FLASH_OPT_KEY2;
 8001bc2:	4b05      	ldr	r3, [pc, #20]	; (8001bd8 <HAL_FLASH_OB_Unlock+0x2c>)
 8001bc4:	4a06      	ldr	r2, [pc, #24]	; (8001be0 <HAL_FLASH_OB_Unlock+0x34>)
 8001bc6:	609a      	str	r2, [r3, #8]
  else
  {
    return HAL_ERROR;
  }  
  
  return HAL_OK;  
 8001bc8:	2300      	movs	r3, #0
 8001bca:	e000      	b.n	8001bce <HAL_FLASH_OB_Unlock+0x22>
    return HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr
 8001bd8:	40023c00 	.word	0x40023c00
 8001bdc:	08192a3b 	.word	0x08192a3b
 8001be0:	4c5d6e7f 	.word	0x4c5d6e7f

08001be4 <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Control Registers access.
  * @retval HAL Status 
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8001be8:	4b05      	ldr	r3, [pc, #20]	; (8001c00 <HAL_FLASH_OB_Lock+0x1c>)
 8001bea:	695b      	ldr	r3, [r3, #20]
 8001bec:	4a04      	ldr	r2, [pc, #16]	; (8001c00 <HAL_FLASH_OB_Lock+0x1c>)
 8001bee:	f043 0301 	orr.w	r3, r3, #1
 8001bf2:	6153      	str	r3, [r2, #20]
  
  return HAL_OK;  
 8001bf4:	2300      	movs	r3, #0
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr
 8001c00:	40023c00 	.word	0x40023c00

08001c04 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b084      	sub	sp, #16
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001c10:	4b1a      	ldr	r3, [pc, #104]	; (8001c7c <FLASH_WaitForLastOperation+0x78>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8001c16:	f7ff fddf 	bl	80017d8 <HAL_GetTick>
 8001c1a:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001c1c:	e010      	b.n	8001c40 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c24:	d00c      	beq.n	8001c40 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d007      	beq.n	8001c3c <FLASH_WaitForLastOperation+0x38>
 8001c2c:	f7ff fdd4 	bl	80017d8 <HAL_GetTick>
 8001c30:	4602      	mov	r2, r0
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	687a      	ldr	r2, [r7, #4]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d201      	bcs.n	8001c40 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8001c3c:	2303      	movs	r3, #3
 8001c3e:	e019      	b.n	8001c74 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001c40:	4b0f      	ldr	r3, [pc, #60]	; (8001c80 <FLASH_WaitForLastOperation+0x7c>)
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d1e8      	bne.n	8001c1e <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001c4c:	4b0c      	ldr	r3, [pc, #48]	; (8001c80 <FLASH_WaitForLastOperation+0x7c>)
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	f003 0301 	and.w	r3, r3, #1
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d002      	beq.n	8001c5e <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001c58:	4b09      	ldr	r3, [pc, #36]	; (8001c80 <FLASH_WaitForLastOperation+0x7c>)
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8001c5e:	4b08      	ldr	r3, [pc, #32]	; (8001c80 <FLASH_WaitForLastOperation+0x7c>)
 8001c60:	68db      	ldr	r3, [r3, #12]
 8001c62:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d003      	beq.n	8001c72 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001c6a:	f000 f8a3 	bl	8001db4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e000      	b.n	8001c74 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8001c72:	2300      	movs	r3, #0
  
}  
 8001c74:	4618      	mov	r0, r3
 8001c76:	3710      	adds	r7, #16
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	20000188 	.word	0x20000188
 8001c80:	40023c00 	.word	0x40023c00

08001c84 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001c84:	b490      	push	{r4, r7}
 8001c86:	b084      	sub	sp, #16
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	60f8      	str	r0, [r7, #12]
 8001c8c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001c90:	4b13      	ldr	r3, [pc, #76]	; (8001ce0 <FLASH_Program_DoubleWord+0x5c>)
 8001c92:	691b      	ldr	r3, [r3, #16]
 8001c94:	4a12      	ldr	r2, [pc, #72]	; (8001ce0 <FLASH_Program_DoubleWord+0x5c>)
 8001c96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c9a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8001c9c:	4b10      	ldr	r3, [pc, #64]	; (8001ce0 <FLASH_Program_DoubleWord+0x5c>)
 8001c9e:	691b      	ldr	r3, [r3, #16]
 8001ca0:	4a0f      	ldr	r2, [pc, #60]	; (8001ce0 <FLASH_Program_DoubleWord+0x5c>)
 8001ca2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001ca6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001ca8:	4b0d      	ldr	r3, [pc, #52]	; (8001ce0 <FLASH_Program_DoubleWord+0x5c>)
 8001caa:	691b      	ldr	r3, [r3, #16]
 8001cac:	4a0c      	ldr	r2, [pc, #48]	; (8001ce0 <FLASH_Program_DoubleWord+0x5c>)
 8001cae:	f043 0301 	orr.w	r3, r3, #1
 8001cb2:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	683a      	ldr	r2, [r7, #0]
 8001cb8:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8001cba:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8001cbe:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001cc2:	f04f 0300 	mov.w	r3, #0
 8001cc6:	f04f 0400 	mov.w	r4, #0
 8001cca:	0013      	movs	r3, r2
 8001ccc:	2400      	movs	r4, #0
 8001cce:	68fa      	ldr	r2, [r7, #12]
 8001cd0:	3204      	adds	r2, #4
 8001cd2:	6013      	str	r3, [r2, #0]
}
 8001cd4:	bf00      	nop
 8001cd6:	3710      	adds	r7, #16
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bc90      	pop	{r4, r7}
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	40023c00 	.word	0x40023c00

08001ce4 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
 8001cec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001cee:	4b0d      	ldr	r3, [pc, #52]	; (8001d24 <FLASH_Program_Word+0x40>)
 8001cf0:	691b      	ldr	r3, [r3, #16]
 8001cf2:	4a0c      	ldr	r2, [pc, #48]	; (8001d24 <FLASH_Program_Word+0x40>)
 8001cf4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001cf8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8001cfa:	4b0a      	ldr	r3, [pc, #40]	; (8001d24 <FLASH_Program_Word+0x40>)
 8001cfc:	691b      	ldr	r3, [r3, #16]
 8001cfe:	4a09      	ldr	r2, [pc, #36]	; (8001d24 <FLASH_Program_Word+0x40>)
 8001d00:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d04:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001d06:	4b07      	ldr	r3, [pc, #28]	; (8001d24 <FLASH_Program_Word+0x40>)
 8001d08:	691b      	ldr	r3, [r3, #16]
 8001d0a:	4a06      	ldr	r2, [pc, #24]	; (8001d24 <FLASH_Program_Word+0x40>)
 8001d0c:	f043 0301 	orr.w	r3, r3, #1
 8001d10:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	683a      	ldr	r2, [r7, #0]
 8001d16:	601a      	str	r2, [r3, #0]
}
 8001d18:	bf00      	nop
 8001d1a:	370c      	adds	r7, #12
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr
 8001d24:	40023c00 	.word	0x40023c00

08001d28 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	460b      	mov	r3, r1
 8001d32:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001d34:	4b0d      	ldr	r3, [pc, #52]	; (8001d6c <FLASH_Program_HalfWord+0x44>)
 8001d36:	691b      	ldr	r3, [r3, #16]
 8001d38:	4a0c      	ldr	r2, [pc, #48]	; (8001d6c <FLASH_Program_HalfWord+0x44>)
 8001d3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d3e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8001d40:	4b0a      	ldr	r3, [pc, #40]	; (8001d6c <FLASH_Program_HalfWord+0x44>)
 8001d42:	691b      	ldr	r3, [r3, #16]
 8001d44:	4a09      	ldr	r2, [pc, #36]	; (8001d6c <FLASH_Program_HalfWord+0x44>)
 8001d46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d4a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001d4c:	4b07      	ldr	r3, [pc, #28]	; (8001d6c <FLASH_Program_HalfWord+0x44>)
 8001d4e:	691b      	ldr	r3, [r3, #16]
 8001d50:	4a06      	ldr	r2, [pc, #24]	; (8001d6c <FLASH_Program_HalfWord+0x44>)
 8001d52:	f043 0301 	orr.w	r3, r3, #1
 8001d56:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	887a      	ldrh	r2, [r7, #2]
 8001d5c:	801a      	strh	r2, [r3, #0]
}
 8001d5e:	bf00      	nop
 8001d60:	370c      	adds	r7, #12
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	40023c00 	.word	0x40023c00

08001d70 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
 8001d78:	460b      	mov	r3, r1
 8001d7a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001d7c:	4b0c      	ldr	r3, [pc, #48]	; (8001db0 <FLASH_Program_Byte+0x40>)
 8001d7e:	691b      	ldr	r3, [r3, #16]
 8001d80:	4a0b      	ldr	r2, [pc, #44]	; (8001db0 <FLASH_Program_Byte+0x40>)
 8001d82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d86:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8001d88:	4b09      	ldr	r3, [pc, #36]	; (8001db0 <FLASH_Program_Byte+0x40>)
 8001d8a:	4a09      	ldr	r2, [pc, #36]	; (8001db0 <FLASH_Program_Byte+0x40>)
 8001d8c:	691b      	ldr	r3, [r3, #16]
 8001d8e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001d90:	4b07      	ldr	r3, [pc, #28]	; (8001db0 <FLASH_Program_Byte+0x40>)
 8001d92:	691b      	ldr	r3, [r3, #16]
 8001d94:	4a06      	ldr	r2, [pc, #24]	; (8001db0 <FLASH_Program_Byte+0x40>)
 8001d96:	f043 0301 	orr.w	r3, r3, #1
 8001d9a:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	78fa      	ldrb	r2, [r7, #3]
 8001da0:	701a      	strb	r2, [r3, #0]
}
 8001da2:	bf00      	nop
 8001da4:	370c      	adds	r7, #12
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	40023c00 	.word	0x40023c00

08001db4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001db8:	4b2f      	ldr	r3, [pc, #188]	; (8001e78 <FLASH_SetErrorCode+0xc4>)
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	f003 0310 	and.w	r3, r3, #16
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d008      	beq.n	8001dd6 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001dc4:	4b2d      	ldr	r3, [pc, #180]	; (8001e7c <FLASH_SetErrorCode+0xc8>)
 8001dc6:	69db      	ldr	r3, [r3, #28]
 8001dc8:	f043 0310 	orr.w	r3, r3, #16
 8001dcc:	4a2b      	ldr	r2, [pc, #172]	; (8001e7c <FLASH_SetErrorCode+0xc8>)
 8001dce:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8001dd0:	4b29      	ldr	r3, [pc, #164]	; (8001e78 <FLASH_SetErrorCode+0xc4>)
 8001dd2:	2210      	movs	r2, #16
 8001dd4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8001dd6:	4b28      	ldr	r3, [pc, #160]	; (8001e78 <FLASH_SetErrorCode+0xc4>)
 8001dd8:	68db      	ldr	r3, [r3, #12]
 8001dda:	f003 0320 	and.w	r3, r3, #32
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d008      	beq.n	8001df4 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001de2:	4b26      	ldr	r3, [pc, #152]	; (8001e7c <FLASH_SetErrorCode+0xc8>)
 8001de4:	69db      	ldr	r3, [r3, #28]
 8001de6:	f043 0308 	orr.w	r3, r3, #8
 8001dea:	4a24      	ldr	r2, [pc, #144]	; (8001e7c <FLASH_SetErrorCode+0xc8>)
 8001dec:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8001dee:	4b22      	ldr	r3, [pc, #136]	; (8001e78 <FLASH_SetErrorCode+0xc4>)
 8001df0:	2220      	movs	r2, #32
 8001df2:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001df4:	4b20      	ldr	r3, [pc, #128]	; (8001e78 <FLASH_SetErrorCode+0xc4>)
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d008      	beq.n	8001e12 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001e00:	4b1e      	ldr	r3, [pc, #120]	; (8001e7c <FLASH_SetErrorCode+0xc8>)
 8001e02:	69db      	ldr	r3, [r3, #28]
 8001e04:	f043 0304 	orr.w	r3, r3, #4
 8001e08:	4a1c      	ldr	r2, [pc, #112]	; (8001e7c <FLASH_SetErrorCode+0xc8>)
 8001e0a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8001e0c:	4b1a      	ldr	r3, [pc, #104]	; (8001e78 <FLASH_SetErrorCode+0xc4>)
 8001e0e:	2240      	movs	r2, #64	; 0x40
 8001e10:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8001e12:	4b19      	ldr	r3, [pc, #100]	; (8001e78 <FLASH_SetErrorCode+0xc4>)
 8001e14:	68db      	ldr	r3, [r3, #12]
 8001e16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d008      	beq.n	8001e30 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8001e1e:	4b17      	ldr	r3, [pc, #92]	; (8001e7c <FLASH_SetErrorCode+0xc8>)
 8001e20:	69db      	ldr	r3, [r3, #28]
 8001e22:	f043 0302 	orr.w	r3, r3, #2
 8001e26:	4a15      	ldr	r2, [pc, #84]	; (8001e7c <FLASH_SetErrorCode+0xc8>)
 8001e28:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8001e2a:	4b13      	ldr	r3, [pc, #76]	; (8001e78 <FLASH_SetErrorCode+0xc4>)
 8001e2c:	2280      	movs	r2, #128	; 0x80
 8001e2e:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8001e30:	4b11      	ldr	r3, [pc, #68]	; (8001e78 <FLASH_SetErrorCode+0xc4>)
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d009      	beq.n	8001e50 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8001e3c:	4b0f      	ldr	r3, [pc, #60]	; (8001e7c <FLASH_SetErrorCode+0xc8>)
 8001e3e:	69db      	ldr	r3, [r3, #28]
 8001e40:	f043 0301 	orr.w	r3, r3, #1
 8001e44:	4a0d      	ldr	r2, [pc, #52]	; (8001e7c <FLASH_SetErrorCode+0xc8>)
 8001e46:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8001e48:	4b0b      	ldr	r3, [pc, #44]	; (8001e78 <FLASH_SetErrorCode+0xc4>)
 8001e4a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e4e:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8001e50:	4b09      	ldr	r3, [pc, #36]	; (8001e78 <FLASH_SetErrorCode+0xc4>)
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	f003 0302 	and.w	r3, r3, #2
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d008      	beq.n	8001e6e <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8001e5c:	4b07      	ldr	r3, [pc, #28]	; (8001e7c <FLASH_SetErrorCode+0xc8>)
 8001e5e:	69db      	ldr	r3, [r3, #28]
 8001e60:	f043 0320 	orr.w	r3, r3, #32
 8001e64:	4a05      	ldr	r2, [pc, #20]	; (8001e7c <FLASH_SetErrorCode+0xc8>)
 8001e66:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8001e68:	4b03      	ldr	r3, [pc, #12]	; (8001e78 <FLASH_SetErrorCode+0xc4>)
 8001e6a:	2202      	movs	r2, #2
 8001e6c:	60da      	str	r2, [r3, #12]
  }
}
 8001e6e:	bf00      	nop
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr
 8001e78:	40023c00 	.word	0x40023c00
 8001e7c:	20000188 	.word	0x20000188

08001e80 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b084      	sub	sp, #16
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001e92:	4b32      	ldr	r3, [pc, #200]	; (8001f5c <HAL_FLASHEx_Erase+0xdc>)
 8001e94:	7e1b      	ldrb	r3, [r3, #24]
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d101      	bne.n	8001e9e <HAL_FLASHEx_Erase+0x1e>
 8001e9a:	2302      	movs	r3, #2
 8001e9c:	e05a      	b.n	8001f54 <HAL_FLASHEx_Erase+0xd4>
 8001e9e:	4b2f      	ldr	r3, [pc, #188]	; (8001f5c <HAL_FLASHEx_Erase+0xdc>)
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001ea4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001ea8:	f7ff feac 	bl	8001c04 <FLASH_WaitForLastOperation>
 8001eac:	4603      	mov	r3, r0
 8001eae:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8001eb0:	7bfb      	ldrb	r3, [r7, #15]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d14a      	bne.n	8001f4c <HAL_FLASHEx_Erase+0xcc>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	f04f 32ff 	mov.w	r2, #4294967295
 8001ebc:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d117      	bne.n	8001ef6 <HAL_FLASHEx_Erase+0x76>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	691b      	ldr	r3, [r3, #16]
 8001eca:	b2da      	uxtb	r2, r3
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	4610      	mov	r0, r2
 8001ed4:	f000 f86a 	bl	8001fac <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001ed8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001edc:	f7ff fe92 	bl	8001c04 <FLASH_WaitForLastOperation>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8001ee4:	4b1e      	ldr	r3, [pc, #120]	; (8001f60 <HAL_FLASHEx_Erase+0xe0>)
 8001ee6:	691b      	ldr	r3, [r3, #16]
 8001ee8:	4a1d      	ldr	r2, [pc, #116]	; (8001f60 <HAL_FLASHEx_Erase+0xe0>)
 8001eea:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001eee:	f023 0304 	bic.w	r3, r3, #4
 8001ef2:	6113      	str	r3, [r2, #16]
 8001ef4:	e028      	b.n	8001f48 <HAL_FLASHEx_Erase+0xc8>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	60bb      	str	r3, [r7, #8]
 8001efc:	e01c      	b.n	8001f38 <HAL_FLASHEx_Erase+0xb8>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	691b      	ldr	r3, [r3, #16]
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	4619      	mov	r1, r3
 8001f06:	68b8      	ldr	r0, [r7, #8]
 8001f08:	f000 f88a 	bl	8002020 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001f0c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001f10:	f7ff fe78 	bl	8001c04 <FLASH_WaitForLastOperation>
 8001f14:	4603      	mov	r3, r0
 8001f16:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8001f18:	4b11      	ldr	r3, [pc, #68]	; (8001f60 <HAL_FLASHEx_Erase+0xe0>)
 8001f1a:	691b      	ldr	r3, [r3, #16]
 8001f1c:	4a10      	ldr	r2, [pc, #64]	; (8001f60 <HAL_FLASHEx_Erase+0xe0>)
 8001f1e:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8001f22:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8001f24:	7bfb      	ldrb	r3, [r7, #15]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d003      	beq.n	8001f32 <HAL_FLASHEx_Erase+0xb2>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	68ba      	ldr	r2, [r7, #8]
 8001f2e:	601a      	str	r2, [r3, #0]
          break;
 8001f30:	e00a      	b.n	8001f48 <HAL_FLASHEx_Erase+0xc8>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	3301      	adds	r3, #1
 8001f36:	60bb      	str	r3, [r7, #8]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	68da      	ldr	r2, [r3, #12]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	4413      	add	r3, r2
 8001f42:	68ba      	ldr	r2, [r7, #8]
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d3da      	bcc.n	8001efe <HAL_FLASHEx_Erase+0x7e>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 8001f48:	f000 f904 	bl	8002154 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001f4c:	4b03      	ldr	r3, [pc, #12]	; (8001f5c <HAL_FLASHEx_Erase+0xdc>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	761a      	strb	r2, [r3, #24]

  return status;
 8001f52:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3710      	adds	r7, #16
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	20000188 	.word	0x20000188
 8001f60:	40023c00 	.word	0x40023c00

08001f64 <HAL_FLASHEx_OBGetConfig>:
  *         contains the configuration information for the programming.
  * 
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER | OPTIONBYTE_BOR;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	220f      	movs	r2, #15
 8001f70:	601a      	str	r2, [r3, #0]

  /*Get WRP*/
  pOBInit->WRPSector = (uint32_t)FLASH_OB_GetWRP();
 8001f72:	f000 f8b3 	bl	80020dc <FLASH_OB_GetWRP>
 8001f76:	4603      	mov	r3, r0
 8001f78:	461a      	mov	r2, r3
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	609a      	str	r2, [r3, #8]

  /*Get RDP Level*/
  pOBInit->RDPLevel = (uint32_t)FLASH_OB_GetRDP();
 8001f7e:	f000 f8b9 	bl	80020f4 <FLASH_OB_GetRDP>
 8001f82:	4603      	mov	r3, r0
 8001f84:	461a      	mov	r2, r3
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	611a      	str	r2, [r3, #16]

  /*Get USER*/
  pOBInit->USERConfig = (uint8_t)FLASH_OB_GetUser();
 8001f8a:	f000 f897 	bl	80020bc <FLASH_OB_GetUser>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	461a      	mov	r2, r3
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	761a      	strb	r2, [r3, #24]

  /*Get BOR Level*/
  pOBInit->BORLevel = (uint32_t)FLASH_OB_GetBOR();
 8001f96:	f000 f8cd 	bl	8002134 <FLASH_OB_GetBOR>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	615a      	str	r2, [r3, #20]
}
 8001fa2:	bf00      	nop
 8001fa4:	3708      	adds	r7, #8
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
	...

08001fac <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	6039      	str	r1, [r7, #0]
 8001fb6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* if the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001fb8:	4b18      	ldr	r3, [pc, #96]	; (800201c <FLASH_MassErase+0x70>)
 8001fba:	691b      	ldr	r3, [r3, #16]
 8001fbc:	4a17      	ldr	r2, [pc, #92]	; (800201c <FLASH_MassErase+0x70>)
 8001fbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fc2:	6113      	str	r3, [r2, #16]

  if(Banks == FLASH_BANK_BOTH)
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	2b03      	cmp	r3, #3
 8001fc8:	d108      	bne.n	8001fdc <FLASH_MassErase+0x30>
  {
    /* bank1 & bank2 will be erased*/
    FLASH->CR |= FLASH_MER_BIT;
 8001fca:	4b14      	ldr	r3, [pc, #80]	; (800201c <FLASH_MassErase+0x70>)
 8001fcc:	691b      	ldr	r3, [r3, #16]
 8001fce:	4a13      	ldr	r2, [pc, #76]	; (800201c <FLASH_MassErase+0x70>)
 8001fd0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fd4:	f043 0304 	orr.w	r3, r3, #4
 8001fd8:	6113      	str	r3, [r2, #16]
 8001fda:	e00f      	b.n	8001ffc <FLASH_MassErase+0x50>
  }
  else if(Banks == FLASH_BANK_1)
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d106      	bne.n	8001ff0 <FLASH_MassErase+0x44>
  {
    /*Only bank1 will be erased*/
    FLASH->CR |= FLASH_CR_MER1;
 8001fe2:	4b0e      	ldr	r3, [pc, #56]	; (800201c <FLASH_MassErase+0x70>)
 8001fe4:	691b      	ldr	r3, [r3, #16]
 8001fe6:	4a0d      	ldr	r2, [pc, #52]	; (800201c <FLASH_MassErase+0x70>)
 8001fe8:	f043 0304 	orr.w	r3, r3, #4
 8001fec:	6113      	str	r3, [r2, #16]
 8001fee:	e005      	b.n	8001ffc <FLASH_MassErase+0x50>
  }
  else
  {
    /*Only bank2 will be erased*/
    FLASH->CR |= FLASH_CR_MER2;
 8001ff0:	4b0a      	ldr	r3, [pc, #40]	; (800201c <FLASH_MassErase+0x70>)
 8001ff2:	691b      	ldr	r3, [r3, #16]
 8001ff4:	4a09      	ldr	r2, [pc, #36]	; (800201c <FLASH_MassErase+0x70>)
 8001ff6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ffa:	6113      	str	r3, [r2, #16]
  }
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8001ffc:	4b07      	ldr	r3, [pc, #28]	; (800201c <FLASH_MassErase+0x70>)
 8001ffe:	691a      	ldr	r2, [r3, #16]
 8002000:	79fb      	ldrb	r3, [r7, #7]
 8002002:	021b      	lsls	r3, r3, #8
 8002004:	4313      	orrs	r3, r2
 8002006:	4a05      	ldr	r2, [pc, #20]	; (800201c <FLASH_MassErase+0x70>)
 8002008:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800200c:	6113      	str	r3, [r2, #16]
}
 800200e:	bf00      	nop
 8002010:	370c      	adds	r7, #12
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop
 800201c:	40023c00 	.word	0x40023c00

08002020 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8002020:	b480      	push	{r7}
 8002022:	b085      	sub	sp, #20
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
 8002028:	460b      	mov	r3, r1
 800202a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 800202c:	2300      	movs	r3, #0
 800202e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8002030:	78fb      	ldrb	r3, [r7, #3]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d102      	bne.n	800203c <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8002036:	2300      	movs	r3, #0
 8002038:	60fb      	str	r3, [r7, #12]
 800203a:	e010      	b.n	800205e <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800203c:	78fb      	ldrb	r3, [r7, #3]
 800203e:	2b01      	cmp	r3, #1
 8002040:	d103      	bne.n	800204a <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8002042:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002046:	60fb      	str	r3, [r7, #12]
 8002048:	e009      	b.n	800205e <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800204a:	78fb      	ldrb	r3, [r7, #3]
 800204c:	2b02      	cmp	r3, #2
 800204e:	d103      	bne.n	8002058 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8002050:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002054:	60fb      	str	r3, [r7, #12]
 8002056:	e002      	b.n	800205e <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8002058:	f44f 7340 	mov.w	r3, #768	; 0x300
 800205c:	60fb      	str	r3, [r7, #12]
  }

  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if(Sector > FLASH_SECTOR_11) 
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2b0b      	cmp	r3, #11
 8002062:	d902      	bls.n	800206a <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4U;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	3304      	adds	r3, #4
 8002068:	607b      	str	r3, [r7, #4]
  }
  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800206a:	4b13      	ldr	r3, [pc, #76]	; (80020b8 <FLASH_Erase_Sector+0x98>)
 800206c:	691b      	ldr	r3, [r3, #16]
 800206e:	4a12      	ldr	r2, [pc, #72]	; (80020b8 <FLASH_Erase_Sector+0x98>)
 8002070:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002074:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8002076:	4b10      	ldr	r3, [pc, #64]	; (80020b8 <FLASH_Erase_Sector+0x98>)
 8002078:	691a      	ldr	r2, [r3, #16]
 800207a:	490f      	ldr	r1, [pc, #60]	; (80020b8 <FLASH_Erase_Sector+0x98>)
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	4313      	orrs	r3, r2
 8002080:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8002082:	4b0d      	ldr	r3, [pc, #52]	; (80020b8 <FLASH_Erase_Sector+0x98>)
 8002084:	691b      	ldr	r3, [r3, #16]
 8002086:	4a0c      	ldr	r2, [pc, #48]	; (80020b8 <FLASH_Erase_Sector+0x98>)
 8002088:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800208c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800208e:	4b0a      	ldr	r3, [pc, #40]	; (80020b8 <FLASH_Erase_Sector+0x98>)
 8002090:	691a      	ldr	r2, [r3, #16]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	00db      	lsls	r3, r3, #3
 8002096:	4313      	orrs	r3, r2
 8002098:	4a07      	ldr	r2, [pc, #28]	; (80020b8 <FLASH_Erase_Sector+0x98>)
 800209a:	f043 0302 	orr.w	r3, r3, #2
 800209e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80020a0:	4b05      	ldr	r3, [pc, #20]	; (80020b8 <FLASH_Erase_Sector+0x98>)
 80020a2:	691b      	ldr	r3, [r3, #16]
 80020a4:	4a04      	ldr	r2, [pc, #16]	; (80020b8 <FLASH_Erase_Sector+0x98>)
 80020a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020aa:	6113      	str	r3, [r2, #16]
}
 80020ac:	bf00      	nop
 80020ae:	3714      	adds	r7, #20
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr
 80020b8:	40023c00 	.word	0x40023c00

080020bc <FLASH_OB_GetUser>:
  * @brief  Return the FLASH User Option Byte value.
  * @retval uint8_t FLASH User Option Bytes values: IWDG_SW(Bit0), RST_STOP(Bit1)
  *         and RST_STDBY(Bit2).
  */
static uint8_t FLASH_OB_GetUser(void)
{
 80020bc:	b480      	push	{r7}
 80020be:	af00      	add	r7, sp, #0
  /* Return the User Option Byte */
  return ((uint8_t)(FLASH->OPTCR & 0xE0));
 80020c0:	4b05      	ldr	r3, [pc, #20]	; (80020d8 <FLASH_OB_GetUser+0x1c>)
 80020c2:	695b      	ldr	r3, [r3, #20]
 80020c4:	b2db      	uxtb	r3, r3
 80020c6:	f023 031f 	bic.w	r3, r3, #31
 80020ca:	b2db      	uxtb	r3, r3
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
 80020d6:	bf00      	nop
 80020d8:	40023c00 	.word	0x40023c00

080020dc <FLASH_OB_GetWRP>:
/**
  * @brief  Return the FLASH Write Protection Option Bytes value.
  * @retval uint16_t FLASH Write Protection Option Bytes value
  */
static uint16_t FLASH_OB_GetWRP(void)
{
 80020dc:	b480      	push	{r7}
 80020de:	af00      	add	r7, sp, #0
  /* Return the FLASH write protection Register value */
  return (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
 80020e0:	4b03      	ldr	r3, [pc, #12]	; (80020f0 <FLASH_OB_GetWRP+0x14>)
 80020e2:	881b      	ldrh	r3, [r3, #0]
 80020e4:	b29b      	uxth	r3, r3
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr
 80020f0:	40023c16 	.word	0x40023c16

080020f4 <FLASH_OB_GetRDP>:
  *            @arg OB_RDP_LEVEL_0: No protection
  *            @arg OB_RDP_LEVEL_1: Read protection of the memory
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  */
static uint8_t FLASH_OB_GetRDP(void)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
  uint8_t readstatus = OB_RDP_LEVEL_0;
 80020fa:	23aa      	movs	r3, #170	; 0xaa
 80020fc:	71fb      	strb	r3, [r7, #7]

  if((*(__IO uint8_t*)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_2))
 80020fe:	4b0c      	ldr	r3, [pc, #48]	; (8002130 <FLASH_OB_GetRDP+0x3c>)
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	b2db      	uxtb	r3, r3
 8002104:	2bcc      	cmp	r3, #204	; 0xcc
 8002106:	d102      	bne.n	800210e <FLASH_OB_GetRDP+0x1a>
  {
    readstatus = OB_RDP_LEVEL_2;
 8002108:	23cc      	movs	r3, #204	; 0xcc
 800210a:	71fb      	strb	r3, [r7, #7]
 800210c:	e009      	b.n	8002122 <FLASH_OB_GetRDP+0x2e>
  }
  else if((*(__IO uint8_t*)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_0))
 800210e:	4b08      	ldr	r3, [pc, #32]	; (8002130 <FLASH_OB_GetRDP+0x3c>)
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	b2db      	uxtb	r3, r3
 8002114:	2baa      	cmp	r3, #170	; 0xaa
 8002116:	d102      	bne.n	800211e <FLASH_OB_GetRDP+0x2a>
  {
    readstatus = OB_RDP_LEVEL_0;
 8002118:	23aa      	movs	r3, #170	; 0xaa
 800211a:	71fb      	strb	r3, [r7, #7]
 800211c:	e001      	b.n	8002122 <FLASH_OB_GetRDP+0x2e>
  }
  else 
  {
    readstatus = OB_RDP_LEVEL_1;
 800211e:	2355      	movs	r3, #85	; 0x55
 8002120:	71fb      	strb	r3, [r7, #7]
  }

  return readstatus;
 8002122:	79fb      	ldrb	r3, [r7, #7]
}
 8002124:	4618      	mov	r0, r3
 8002126:	370c      	adds	r7, #12
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr
 8002130:	40023c15 	.word	0x40023c15

08002134 <FLASH_OB_GetBOR>:
  *           - OB_BOR_LEVEL2: Supply voltage ranges from 2.4 to 2.7 V
  *           - OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *           - OB_BOR_OFF   : Supply voltage ranges from 1.62 to 2.1 V  
  */
static uint8_t FLASH_OB_GetBOR(void)
{
 8002134:	b480      	push	{r7}
 8002136:	af00      	add	r7, sp, #0
  /* Return the FLASH BOR level */
  return (uint8_t)(*(__IO uint8_t *)(OPTCR_BYTE0_ADDRESS) & (uint8_t)0x0C);
 8002138:	4b05      	ldr	r3, [pc, #20]	; (8002150 <FLASH_OB_GetBOR+0x1c>)
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	b2db      	uxtb	r3, r3
 800213e:	f003 030c 	and.w	r3, r3, #12
 8002142:	b2db      	uxtb	r3, r3
}
 8002144:	4618      	mov	r0, r3
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr
 800214e:	bf00      	nop
 8002150:	40023c14 	.word	0x40023c14

08002154 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8002158:	4b20      	ldr	r3, [pc, #128]	; (80021dc <FLASH_FlushCaches+0x88>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002160:	2b00      	cmp	r3, #0
 8002162:	d017      	beq.n	8002194 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8002164:	4b1d      	ldr	r3, [pc, #116]	; (80021dc <FLASH_FlushCaches+0x88>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a1c      	ldr	r2, [pc, #112]	; (80021dc <FLASH_FlushCaches+0x88>)
 800216a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800216e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8002170:	4b1a      	ldr	r3, [pc, #104]	; (80021dc <FLASH_FlushCaches+0x88>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a19      	ldr	r2, [pc, #100]	; (80021dc <FLASH_FlushCaches+0x88>)
 8002176:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800217a:	6013      	str	r3, [r2, #0]
 800217c:	4b17      	ldr	r3, [pc, #92]	; (80021dc <FLASH_FlushCaches+0x88>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a16      	ldr	r2, [pc, #88]	; (80021dc <FLASH_FlushCaches+0x88>)
 8002182:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002186:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002188:	4b14      	ldr	r3, [pc, #80]	; (80021dc <FLASH_FlushCaches+0x88>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a13      	ldr	r2, [pc, #76]	; (80021dc <FLASH_FlushCaches+0x88>)
 800218e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002192:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8002194:	4b11      	ldr	r3, [pc, #68]	; (80021dc <FLASH_FlushCaches+0x88>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800219c:	2b00      	cmp	r3, #0
 800219e:	d017      	beq.n	80021d0 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80021a0:	4b0e      	ldr	r3, [pc, #56]	; (80021dc <FLASH_FlushCaches+0x88>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a0d      	ldr	r2, [pc, #52]	; (80021dc <FLASH_FlushCaches+0x88>)
 80021a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80021aa:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80021ac:	4b0b      	ldr	r3, [pc, #44]	; (80021dc <FLASH_FlushCaches+0x88>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a0a      	ldr	r2, [pc, #40]	; (80021dc <FLASH_FlushCaches+0x88>)
 80021b2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80021b6:	6013      	str	r3, [r2, #0]
 80021b8:	4b08      	ldr	r3, [pc, #32]	; (80021dc <FLASH_FlushCaches+0x88>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a07      	ldr	r2, [pc, #28]	; (80021dc <FLASH_FlushCaches+0x88>)
 80021be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80021c2:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80021c4:	4b05      	ldr	r3, [pc, #20]	; (80021dc <FLASH_FlushCaches+0x88>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a04      	ldr	r2, [pc, #16]	; (80021dc <FLASH_FlushCaches+0x88>)
 80021ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021ce:	6013      	str	r3, [r2, #0]
  }
}
 80021d0:	bf00      	nop
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop
 80021dc:	40023c00 	.word	0x40023c00

080021e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b089      	sub	sp, #36	; 0x24
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021ea:	2300      	movs	r3, #0
 80021ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021ee:	2300      	movs	r3, #0
 80021f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021f2:	2300      	movs	r3, #0
 80021f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021f6:	2300      	movs	r3, #0
 80021f8:	61fb      	str	r3, [r7, #28]
 80021fa:	e177      	b.n	80024ec <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021fc:	2201      	movs	r2, #1
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	fa02 f303 	lsl.w	r3, r2, r3
 8002204:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	697a      	ldr	r2, [r7, #20]
 800220c:	4013      	ands	r3, r2
 800220e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002210:	693a      	ldr	r2, [r7, #16]
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	429a      	cmp	r2, r3
 8002216:	f040 8166 	bne.w	80024e6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	2b01      	cmp	r3, #1
 8002220:	d00b      	beq.n	800223a <HAL_GPIO_Init+0x5a>
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	2b02      	cmp	r3, #2
 8002228:	d007      	beq.n	800223a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800222e:	2b11      	cmp	r3, #17
 8002230:	d003      	beq.n	800223a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	2b12      	cmp	r3, #18
 8002238:	d130      	bne.n	800229c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002240:	69fb      	ldr	r3, [r7, #28]
 8002242:	005b      	lsls	r3, r3, #1
 8002244:	2203      	movs	r2, #3
 8002246:	fa02 f303 	lsl.w	r3, r2, r3
 800224a:	43db      	mvns	r3, r3
 800224c:	69ba      	ldr	r2, [r7, #24]
 800224e:	4013      	ands	r3, r2
 8002250:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	68da      	ldr	r2, [r3, #12]
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	005b      	lsls	r3, r3, #1
 800225a:	fa02 f303 	lsl.w	r3, r2, r3
 800225e:	69ba      	ldr	r2, [r7, #24]
 8002260:	4313      	orrs	r3, r2
 8002262:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	69ba      	ldr	r2, [r7, #24]
 8002268:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002270:	2201      	movs	r2, #1
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	fa02 f303 	lsl.w	r3, r2, r3
 8002278:	43db      	mvns	r3, r3
 800227a:	69ba      	ldr	r2, [r7, #24]
 800227c:	4013      	ands	r3, r2
 800227e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	091b      	lsrs	r3, r3, #4
 8002286:	f003 0201 	and.w	r2, r3, #1
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	fa02 f303 	lsl.w	r3, r2, r3
 8002290:	69ba      	ldr	r2, [r7, #24]
 8002292:	4313      	orrs	r3, r2
 8002294:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	69ba      	ldr	r2, [r7, #24]
 800229a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	005b      	lsls	r3, r3, #1
 80022a6:	2203      	movs	r2, #3
 80022a8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ac:	43db      	mvns	r3, r3
 80022ae:	69ba      	ldr	r2, [r7, #24]
 80022b0:	4013      	ands	r3, r2
 80022b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	689a      	ldr	r2, [r3, #8]
 80022b8:	69fb      	ldr	r3, [r7, #28]
 80022ba:	005b      	lsls	r3, r3, #1
 80022bc:	fa02 f303 	lsl.w	r3, r2, r3
 80022c0:	69ba      	ldr	r2, [r7, #24]
 80022c2:	4313      	orrs	r3, r2
 80022c4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	69ba      	ldr	r2, [r7, #24]
 80022ca:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	2b02      	cmp	r3, #2
 80022d2:	d003      	beq.n	80022dc <HAL_GPIO_Init+0xfc>
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	2b12      	cmp	r3, #18
 80022da:	d123      	bne.n	8002324 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022dc:	69fb      	ldr	r3, [r7, #28]
 80022de:	08da      	lsrs	r2, r3, #3
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	3208      	adds	r2, #8
 80022e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	f003 0307 	and.w	r3, r3, #7
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	220f      	movs	r2, #15
 80022f4:	fa02 f303 	lsl.w	r3, r2, r3
 80022f8:	43db      	mvns	r3, r3
 80022fa:	69ba      	ldr	r2, [r7, #24]
 80022fc:	4013      	ands	r3, r2
 80022fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	691a      	ldr	r2, [r3, #16]
 8002304:	69fb      	ldr	r3, [r7, #28]
 8002306:	f003 0307 	and.w	r3, r3, #7
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	fa02 f303 	lsl.w	r3, r2, r3
 8002310:	69ba      	ldr	r2, [r7, #24]
 8002312:	4313      	orrs	r3, r2
 8002314:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	08da      	lsrs	r2, r3, #3
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	3208      	adds	r2, #8
 800231e:	69b9      	ldr	r1, [r7, #24]
 8002320:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	005b      	lsls	r3, r3, #1
 800232e:	2203      	movs	r2, #3
 8002330:	fa02 f303 	lsl.w	r3, r2, r3
 8002334:	43db      	mvns	r3, r3
 8002336:	69ba      	ldr	r2, [r7, #24]
 8002338:	4013      	ands	r3, r2
 800233a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f003 0203 	and.w	r2, r3, #3
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	005b      	lsls	r3, r3, #1
 8002348:	fa02 f303 	lsl.w	r3, r2, r3
 800234c:	69ba      	ldr	r2, [r7, #24]
 800234e:	4313      	orrs	r3, r2
 8002350:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	69ba      	ldr	r2, [r7, #24]
 8002356:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002360:	2b00      	cmp	r3, #0
 8002362:	f000 80c0 	beq.w	80024e6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002366:	2300      	movs	r3, #0
 8002368:	60fb      	str	r3, [r7, #12]
 800236a:	4b65      	ldr	r3, [pc, #404]	; (8002500 <HAL_GPIO_Init+0x320>)
 800236c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800236e:	4a64      	ldr	r2, [pc, #400]	; (8002500 <HAL_GPIO_Init+0x320>)
 8002370:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002374:	6453      	str	r3, [r2, #68]	; 0x44
 8002376:	4b62      	ldr	r3, [pc, #392]	; (8002500 <HAL_GPIO_Init+0x320>)
 8002378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800237a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800237e:	60fb      	str	r3, [r7, #12]
 8002380:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002382:	4a60      	ldr	r2, [pc, #384]	; (8002504 <HAL_GPIO_Init+0x324>)
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	089b      	lsrs	r3, r3, #2
 8002388:	3302      	adds	r3, #2
 800238a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800238e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	f003 0303 	and.w	r3, r3, #3
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	220f      	movs	r2, #15
 800239a:	fa02 f303 	lsl.w	r3, r2, r3
 800239e:	43db      	mvns	r3, r3
 80023a0:	69ba      	ldr	r2, [r7, #24]
 80023a2:	4013      	ands	r3, r2
 80023a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4a57      	ldr	r2, [pc, #348]	; (8002508 <HAL_GPIO_Init+0x328>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d037      	beq.n	800241e <HAL_GPIO_Init+0x23e>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4a56      	ldr	r2, [pc, #344]	; (800250c <HAL_GPIO_Init+0x32c>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d031      	beq.n	800241a <HAL_GPIO_Init+0x23a>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4a55      	ldr	r2, [pc, #340]	; (8002510 <HAL_GPIO_Init+0x330>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d02b      	beq.n	8002416 <HAL_GPIO_Init+0x236>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4a54      	ldr	r2, [pc, #336]	; (8002514 <HAL_GPIO_Init+0x334>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d025      	beq.n	8002412 <HAL_GPIO_Init+0x232>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4a53      	ldr	r2, [pc, #332]	; (8002518 <HAL_GPIO_Init+0x338>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d01f      	beq.n	800240e <HAL_GPIO_Init+0x22e>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a52      	ldr	r2, [pc, #328]	; (800251c <HAL_GPIO_Init+0x33c>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d019      	beq.n	800240a <HAL_GPIO_Init+0x22a>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4a51      	ldr	r2, [pc, #324]	; (8002520 <HAL_GPIO_Init+0x340>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d013      	beq.n	8002406 <HAL_GPIO_Init+0x226>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4a50      	ldr	r2, [pc, #320]	; (8002524 <HAL_GPIO_Init+0x344>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d00d      	beq.n	8002402 <HAL_GPIO_Init+0x222>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4a4f      	ldr	r2, [pc, #316]	; (8002528 <HAL_GPIO_Init+0x348>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d007      	beq.n	80023fe <HAL_GPIO_Init+0x21e>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4a4e      	ldr	r2, [pc, #312]	; (800252c <HAL_GPIO_Init+0x34c>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d101      	bne.n	80023fa <HAL_GPIO_Init+0x21a>
 80023f6:	2309      	movs	r3, #9
 80023f8:	e012      	b.n	8002420 <HAL_GPIO_Init+0x240>
 80023fa:	230a      	movs	r3, #10
 80023fc:	e010      	b.n	8002420 <HAL_GPIO_Init+0x240>
 80023fe:	2308      	movs	r3, #8
 8002400:	e00e      	b.n	8002420 <HAL_GPIO_Init+0x240>
 8002402:	2307      	movs	r3, #7
 8002404:	e00c      	b.n	8002420 <HAL_GPIO_Init+0x240>
 8002406:	2306      	movs	r3, #6
 8002408:	e00a      	b.n	8002420 <HAL_GPIO_Init+0x240>
 800240a:	2305      	movs	r3, #5
 800240c:	e008      	b.n	8002420 <HAL_GPIO_Init+0x240>
 800240e:	2304      	movs	r3, #4
 8002410:	e006      	b.n	8002420 <HAL_GPIO_Init+0x240>
 8002412:	2303      	movs	r3, #3
 8002414:	e004      	b.n	8002420 <HAL_GPIO_Init+0x240>
 8002416:	2302      	movs	r3, #2
 8002418:	e002      	b.n	8002420 <HAL_GPIO_Init+0x240>
 800241a:	2301      	movs	r3, #1
 800241c:	e000      	b.n	8002420 <HAL_GPIO_Init+0x240>
 800241e:	2300      	movs	r3, #0
 8002420:	69fa      	ldr	r2, [r7, #28]
 8002422:	f002 0203 	and.w	r2, r2, #3
 8002426:	0092      	lsls	r2, r2, #2
 8002428:	4093      	lsls	r3, r2
 800242a:	69ba      	ldr	r2, [r7, #24]
 800242c:	4313      	orrs	r3, r2
 800242e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002430:	4934      	ldr	r1, [pc, #208]	; (8002504 <HAL_GPIO_Init+0x324>)
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	089b      	lsrs	r3, r3, #2
 8002436:	3302      	adds	r3, #2
 8002438:	69ba      	ldr	r2, [r7, #24]
 800243a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800243e:	4b3c      	ldr	r3, [pc, #240]	; (8002530 <HAL_GPIO_Init+0x350>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	43db      	mvns	r3, r3
 8002448:	69ba      	ldr	r2, [r7, #24]
 800244a:	4013      	ands	r3, r2
 800244c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002456:	2b00      	cmp	r3, #0
 8002458:	d003      	beq.n	8002462 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800245a:	69ba      	ldr	r2, [r7, #24]
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	4313      	orrs	r3, r2
 8002460:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002462:	4a33      	ldr	r2, [pc, #204]	; (8002530 <HAL_GPIO_Init+0x350>)
 8002464:	69bb      	ldr	r3, [r7, #24]
 8002466:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002468:	4b31      	ldr	r3, [pc, #196]	; (8002530 <HAL_GPIO_Init+0x350>)
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	43db      	mvns	r3, r3
 8002472:	69ba      	ldr	r2, [r7, #24]
 8002474:	4013      	ands	r3, r2
 8002476:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002480:	2b00      	cmp	r3, #0
 8002482:	d003      	beq.n	800248c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002484:	69ba      	ldr	r2, [r7, #24]
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	4313      	orrs	r3, r2
 800248a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800248c:	4a28      	ldr	r2, [pc, #160]	; (8002530 <HAL_GPIO_Init+0x350>)
 800248e:	69bb      	ldr	r3, [r7, #24]
 8002490:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002492:	4b27      	ldr	r3, [pc, #156]	; (8002530 <HAL_GPIO_Init+0x350>)
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	43db      	mvns	r3, r3
 800249c:	69ba      	ldr	r2, [r7, #24]
 800249e:	4013      	ands	r3, r2
 80024a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d003      	beq.n	80024b6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80024ae:	69ba      	ldr	r2, [r7, #24]
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	4313      	orrs	r3, r2
 80024b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024b6:	4a1e      	ldr	r2, [pc, #120]	; (8002530 <HAL_GPIO_Init+0x350>)
 80024b8:	69bb      	ldr	r3, [r7, #24]
 80024ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024bc:	4b1c      	ldr	r3, [pc, #112]	; (8002530 <HAL_GPIO_Init+0x350>)
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	43db      	mvns	r3, r3
 80024c6:	69ba      	ldr	r2, [r7, #24]
 80024c8:	4013      	ands	r3, r2
 80024ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d003      	beq.n	80024e0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80024d8:	69ba      	ldr	r2, [r7, #24]
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	4313      	orrs	r3, r2
 80024de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024e0:	4a13      	ldr	r2, [pc, #76]	; (8002530 <HAL_GPIO_Init+0x350>)
 80024e2:	69bb      	ldr	r3, [r7, #24]
 80024e4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	3301      	adds	r3, #1
 80024ea:	61fb      	str	r3, [r7, #28]
 80024ec:	69fb      	ldr	r3, [r7, #28]
 80024ee:	2b0f      	cmp	r3, #15
 80024f0:	f67f ae84 	bls.w	80021fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80024f4:	bf00      	nop
 80024f6:	3724      	adds	r7, #36	; 0x24
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr
 8002500:	40023800 	.word	0x40023800
 8002504:	40013800 	.word	0x40013800
 8002508:	40020000 	.word	0x40020000
 800250c:	40020400 	.word	0x40020400
 8002510:	40020800 	.word	0x40020800
 8002514:	40020c00 	.word	0x40020c00
 8002518:	40021000 	.word	0x40021000
 800251c:	40021400 	.word	0x40021400
 8002520:	40021800 	.word	0x40021800
 8002524:	40021c00 	.word	0x40021c00
 8002528:	40022000 	.word	0x40022000
 800252c:	40022400 	.word	0x40022400
 8002530:	40013c00 	.word	0x40013c00

08002534 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002534:	b480      	push	{r7}
 8002536:	b085      	sub	sp, #20
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	460b      	mov	r3, r1
 800253e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	691a      	ldr	r2, [r3, #16]
 8002544:	887b      	ldrh	r3, [r7, #2]
 8002546:	4013      	ands	r3, r2
 8002548:	2b00      	cmp	r3, #0
 800254a:	d002      	beq.n	8002552 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800254c:	2301      	movs	r3, #1
 800254e:	73fb      	strb	r3, [r7, #15]
 8002550:	e001      	b.n	8002556 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002552:	2300      	movs	r3, #0
 8002554:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002556:	7bfb      	ldrb	r3, [r7, #15]
}
 8002558:	4618      	mov	r0, r3
 800255a:	3714      	adds	r7, #20
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr

08002564 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002564:	b480      	push	{r7}
 8002566:	b083      	sub	sp, #12
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
 800256c:	460b      	mov	r3, r1
 800256e:	807b      	strh	r3, [r7, #2]
 8002570:	4613      	mov	r3, r2
 8002572:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002574:	787b      	ldrb	r3, [r7, #1]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d003      	beq.n	8002582 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800257a:	887a      	ldrh	r2, [r7, #2]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002580:	e003      	b.n	800258a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002582:	887b      	ldrh	r3, [r7, #2]
 8002584:	041a      	lsls	r2, r3, #16
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	619a      	str	r2, [r3, #24]
}
 800258a:	bf00      	nop
 800258c:	370c      	adds	r7, #12
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr
	...

08002598 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b082      	sub	sp, #8
 800259c:	af00      	add	r7, sp, #0
 800259e:	4603      	mov	r3, r0
 80025a0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80025a2:	4b08      	ldr	r3, [pc, #32]	; (80025c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025a4:	695a      	ldr	r2, [r3, #20]
 80025a6:	88fb      	ldrh	r3, [r7, #6]
 80025a8:	4013      	ands	r3, r2
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d006      	beq.n	80025bc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80025ae:	4a05      	ldr	r2, [pc, #20]	; (80025c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025b0:	88fb      	ldrh	r3, [r7, #6]
 80025b2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80025b4:	88fb      	ldrh	r3, [r7, #6]
 80025b6:	4618      	mov	r0, r3
 80025b8:	f000 f806 	bl	80025c8 <HAL_GPIO_EXTI_Callback>
  }
}
 80025bc:	bf00      	nop
 80025be:	3708      	adds	r7, #8
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	40013c00 	.word	0x40013c00

080025c8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	4603      	mov	r3, r0
 80025d0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80025d2:	bf00      	nop
 80025d4:	370c      	adds	r7, #12
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr
	...

080025e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b086      	sub	sp, #24
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d101      	bne.n	80025f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e25b      	b.n	8002aaa <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 0301 	and.w	r3, r3, #1
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d075      	beq.n	80026ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80025fe:	4ba3      	ldr	r3, [pc, #652]	; (800288c <HAL_RCC_OscConfig+0x2ac>)
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	f003 030c 	and.w	r3, r3, #12
 8002606:	2b04      	cmp	r3, #4
 8002608:	d00c      	beq.n	8002624 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800260a:	4ba0      	ldr	r3, [pc, #640]	; (800288c <HAL_RCC_OscConfig+0x2ac>)
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002612:	2b08      	cmp	r3, #8
 8002614:	d112      	bne.n	800263c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002616:	4b9d      	ldr	r3, [pc, #628]	; (800288c <HAL_RCC_OscConfig+0x2ac>)
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800261e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002622:	d10b      	bne.n	800263c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002624:	4b99      	ldr	r3, [pc, #612]	; (800288c <HAL_RCC_OscConfig+0x2ac>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800262c:	2b00      	cmp	r3, #0
 800262e:	d05b      	beq.n	80026e8 <HAL_RCC_OscConfig+0x108>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d157      	bne.n	80026e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	e236      	b.n	8002aaa <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002644:	d106      	bne.n	8002654 <HAL_RCC_OscConfig+0x74>
 8002646:	4b91      	ldr	r3, [pc, #580]	; (800288c <HAL_RCC_OscConfig+0x2ac>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a90      	ldr	r2, [pc, #576]	; (800288c <HAL_RCC_OscConfig+0x2ac>)
 800264c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002650:	6013      	str	r3, [r2, #0]
 8002652:	e01d      	b.n	8002690 <HAL_RCC_OscConfig+0xb0>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800265c:	d10c      	bne.n	8002678 <HAL_RCC_OscConfig+0x98>
 800265e:	4b8b      	ldr	r3, [pc, #556]	; (800288c <HAL_RCC_OscConfig+0x2ac>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a8a      	ldr	r2, [pc, #552]	; (800288c <HAL_RCC_OscConfig+0x2ac>)
 8002664:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002668:	6013      	str	r3, [r2, #0]
 800266a:	4b88      	ldr	r3, [pc, #544]	; (800288c <HAL_RCC_OscConfig+0x2ac>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a87      	ldr	r2, [pc, #540]	; (800288c <HAL_RCC_OscConfig+0x2ac>)
 8002670:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002674:	6013      	str	r3, [r2, #0]
 8002676:	e00b      	b.n	8002690 <HAL_RCC_OscConfig+0xb0>
 8002678:	4b84      	ldr	r3, [pc, #528]	; (800288c <HAL_RCC_OscConfig+0x2ac>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a83      	ldr	r2, [pc, #524]	; (800288c <HAL_RCC_OscConfig+0x2ac>)
 800267e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002682:	6013      	str	r3, [r2, #0]
 8002684:	4b81      	ldr	r3, [pc, #516]	; (800288c <HAL_RCC_OscConfig+0x2ac>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a80      	ldr	r2, [pc, #512]	; (800288c <HAL_RCC_OscConfig+0x2ac>)
 800268a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800268e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d013      	beq.n	80026c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002698:	f7ff f89e 	bl	80017d8 <HAL_GetTick>
 800269c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800269e:	e008      	b.n	80026b2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026a0:	f7ff f89a 	bl	80017d8 <HAL_GetTick>
 80026a4:	4602      	mov	r2, r0
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	2b64      	cmp	r3, #100	; 0x64
 80026ac:	d901      	bls.n	80026b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80026ae:	2303      	movs	r3, #3
 80026b0:	e1fb      	b.n	8002aaa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026b2:	4b76      	ldr	r3, [pc, #472]	; (800288c <HAL_RCC_OscConfig+0x2ac>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d0f0      	beq.n	80026a0 <HAL_RCC_OscConfig+0xc0>
 80026be:	e014      	b.n	80026ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026c0:	f7ff f88a 	bl	80017d8 <HAL_GetTick>
 80026c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026c6:	e008      	b.n	80026da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026c8:	f7ff f886 	bl	80017d8 <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	2b64      	cmp	r3, #100	; 0x64
 80026d4:	d901      	bls.n	80026da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80026d6:	2303      	movs	r3, #3
 80026d8:	e1e7      	b.n	8002aaa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026da:	4b6c      	ldr	r3, [pc, #432]	; (800288c <HAL_RCC_OscConfig+0x2ac>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d1f0      	bne.n	80026c8 <HAL_RCC_OscConfig+0xe8>
 80026e6:	e000      	b.n	80026ea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 0302 	and.w	r3, r3, #2
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d063      	beq.n	80027be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80026f6:	4b65      	ldr	r3, [pc, #404]	; (800288c <HAL_RCC_OscConfig+0x2ac>)
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	f003 030c 	and.w	r3, r3, #12
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d00b      	beq.n	800271a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002702:	4b62      	ldr	r3, [pc, #392]	; (800288c <HAL_RCC_OscConfig+0x2ac>)
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800270a:	2b08      	cmp	r3, #8
 800270c:	d11c      	bne.n	8002748 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800270e:	4b5f      	ldr	r3, [pc, #380]	; (800288c <HAL_RCC_OscConfig+0x2ac>)
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d116      	bne.n	8002748 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800271a:	4b5c      	ldr	r3, [pc, #368]	; (800288c <HAL_RCC_OscConfig+0x2ac>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0302 	and.w	r3, r3, #2
 8002722:	2b00      	cmp	r3, #0
 8002724:	d005      	beq.n	8002732 <HAL_RCC_OscConfig+0x152>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	68db      	ldr	r3, [r3, #12]
 800272a:	2b01      	cmp	r3, #1
 800272c:	d001      	beq.n	8002732 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e1bb      	b.n	8002aaa <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002732:	4b56      	ldr	r3, [pc, #344]	; (800288c <HAL_RCC_OscConfig+0x2ac>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	691b      	ldr	r3, [r3, #16]
 800273e:	00db      	lsls	r3, r3, #3
 8002740:	4952      	ldr	r1, [pc, #328]	; (800288c <HAL_RCC_OscConfig+0x2ac>)
 8002742:	4313      	orrs	r3, r2
 8002744:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002746:	e03a      	b.n	80027be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d020      	beq.n	8002792 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002750:	4b4f      	ldr	r3, [pc, #316]	; (8002890 <HAL_RCC_OscConfig+0x2b0>)
 8002752:	2201      	movs	r2, #1
 8002754:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002756:	f7ff f83f 	bl	80017d8 <HAL_GetTick>
 800275a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800275c:	e008      	b.n	8002770 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800275e:	f7ff f83b 	bl	80017d8 <HAL_GetTick>
 8002762:	4602      	mov	r2, r0
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	1ad3      	subs	r3, r2, r3
 8002768:	2b02      	cmp	r3, #2
 800276a:	d901      	bls.n	8002770 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800276c:	2303      	movs	r3, #3
 800276e:	e19c      	b.n	8002aaa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002770:	4b46      	ldr	r3, [pc, #280]	; (800288c <HAL_RCC_OscConfig+0x2ac>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0302 	and.w	r3, r3, #2
 8002778:	2b00      	cmp	r3, #0
 800277a:	d0f0      	beq.n	800275e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800277c:	4b43      	ldr	r3, [pc, #268]	; (800288c <HAL_RCC_OscConfig+0x2ac>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	691b      	ldr	r3, [r3, #16]
 8002788:	00db      	lsls	r3, r3, #3
 800278a:	4940      	ldr	r1, [pc, #256]	; (800288c <HAL_RCC_OscConfig+0x2ac>)
 800278c:	4313      	orrs	r3, r2
 800278e:	600b      	str	r3, [r1, #0]
 8002790:	e015      	b.n	80027be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002792:	4b3f      	ldr	r3, [pc, #252]	; (8002890 <HAL_RCC_OscConfig+0x2b0>)
 8002794:	2200      	movs	r2, #0
 8002796:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002798:	f7ff f81e 	bl	80017d8 <HAL_GetTick>
 800279c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800279e:	e008      	b.n	80027b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027a0:	f7ff f81a 	bl	80017d8 <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	2b02      	cmp	r3, #2
 80027ac:	d901      	bls.n	80027b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	e17b      	b.n	8002aaa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027b2:	4b36      	ldr	r3, [pc, #216]	; (800288c <HAL_RCC_OscConfig+0x2ac>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0302 	and.w	r3, r3, #2
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d1f0      	bne.n	80027a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 0308 	and.w	r3, r3, #8
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d030      	beq.n	800282c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	695b      	ldr	r3, [r3, #20]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d016      	beq.n	8002800 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027d2:	4b30      	ldr	r3, [pc, #192]	; (8002894 <HAL_RCC_OscConfig+0x2b4>)
 80027d4:	2201      	movs	r2, #1
 80027d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027d8:	f7fe fffe 	bl	80017d8 <HAL_GetTick>
 80027dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027de:	e008      	b.n	80027f2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027e0:	f7fe fffa 	bl	80017d8 <HAL_GetTick>
 80027e4:	4602      	mov	r2, r0
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	d901      	bls.n	80027f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80027ee:	2303      	movs	r3, #3
 80027f0:	e15b      	b.n	8002aaa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027f2:	4b26      	ldr	r3, [pc, #152]	; (800288c <HAL_RCC_OscConfig+0x2ac>)
 80027f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027f6:	f003 0302 	and.w	r3, r3, #2
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d0f0      	beq.n	80027e0 <HAL_RCC_OscConfig+0x200>
 80027fe:	e015      	b.n	800282c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002800:	4b24      	ldr	r3, [pc, #144]	; (8002894 <HAL_RCC_OscConfig+0x2b4>)
 8002802:	2200      	movs	r2, #0
 8002804:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002806:	f7fe ffe7 	bl	80017d8 <HAL_GetTick>
 800280a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800280c:	e008      	b.n	8002820 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800280e:	f7fe ffe3 	bl	80017d8 <HAL_GetTick>
 8002812:	4602      	mov	r2, r0
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	1ad3      	subs	r3, r2, r3
 8002818:	2b02      	cmp	r3, #2
 800281a:	d901      	bls.n	8002820 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800281c:	2303      	movs	r3, #3
 800281e:	e144      	b.n	8002aaa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002820:	4b1a      	ldr	r3, [pc, #104]	; (800288c <HAL_RCC_OscConfig+0x2ac>)
 8002822:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002824:	f003 0302 	and.w	r3, r3, #2
 8002828:	2b00      	cmp	r3, #0
 800282a:	d1f0      	bne.n	800280e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 0304 	and.w	r3, r3, #4
 8002834:	2b00      	cmp	r3, #0
 8002836:	f000 80a0 	beq.w	800297a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800283a:	2300      	movs	r3, #0
 800283c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800283e:	4b13      	ldr	r3, [pc, #76]	; (800288c <HAL_RCC_OscConfig+0x2ac>)
 8002840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002842:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002846:	2b00      	cmp	r3, #0
 8002848:	d10f      	bne.n	800286a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800284a:	2300      	movs	r3, #0
 800284c:	60bb      	str	r3, [r7, #8]
 800284e:	4b0f      	ldr	r3, [pc, #60]	; (800288c <HAL_RCC_OscConfig+0x2ac>)
 8002850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002852:	4a0e      	ldr	r2, [pc, #56]	; (800288c <HAL_RCC_OscConfig+0x2ac>)
 8002854:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002858:	6413      	str	r3, [r2, #64]	; 0x40
 800285a:	4b0c      	ldr	r3, [pc, #48]	; (800288c <HAL_RCC_OscConfig+0x2ac>)
 800285c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002862:	60bb      	str	r3, [r7, #8]
 8002864:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002866:	2301      	movs	r3, #1
 8002868:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800286a:	4b0b      	ldr	r3, [pc, #44]	; (8002898 <HAL_RCC_OscConfig+0x2b8>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002872:	2b00      	cmp	r3, #0
 8002874:	d121      	bne.n	80028ba <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002876:	4b08      	ldr	r3, [pc, #32]	; (8002898 <HAL_RCC_OscConfig+0x2b8>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a07      	ldr	r2, [pc, #28]	; (8002898 <HAL_RCC_OscConfig+0x2b8>)
 800287c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002880:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002882:	f7fe ffa9 	bl	80017d8 <HAL_GetTick>
 8002886:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002888:	e011      	b.n	80028ae <HAL_RCC_OscConfig+0x2ce>
 800288a:	bf00      	nop
 800288c:	40023800 	.word	0x40023800
 8002890:	42470000 	.word	0x42470000
 8002894:	42470e80 	.word	0x42470e80
 8002898:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800289c:	f7fe ff9c 	bl	80017d8 <HAL_GetTick>
 80028a0:	4602      	mov	r2, r0
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	2b02      	cmp	r3, #2
 80028a8:	d901      	bls.n	80028ae <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80028aa:	2303      	movs	r3, #3
 80028ac:	e0fd      	b.n	8002aaa <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028ae:	4b81      	ldr	r3, [pc, #516]	; (8002ab4 <HAL_RCC_OscConfig+0x4d4>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d0f0      	beq.n	800289c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d106      	bne.n	80028d0 <HAL_RCC_OscConfig+0x2f0>
 80028c2:	4b7d      	ldr	r3, [pc, #500]	; (8002ab8 <HAL_RCC_OscConfig+0x4d8>)
 80028c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028c6:	4a7c      	ldr	r2, [pc, #496]	; (8002ab8 <HAL_RCC_OscConfig+0x4d8>)
 80028c8:	f043 0301 	orr.w	r3, r3, #1
 80028cc:	6713      	str	r3, [r2, #112]	; 0x70
 80028ce:	e01c      	b.n	800290a <HAL_RCC_OscConfig+0x32a>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	2b05      	cmp	r3, #5
 80028d6:	d10c      	bne.n	80028f2 <HAL_RCC_OscConfig+0x312>
 80028d8:	4b77      	ldr	r3, [pc, #476]	; (8002ab8 <HAL_RCC_OscConfig+0x4d8>)
 80028da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028dc:	4a76      	ldr	r2, [pc, #472]	; (8002ab8 <HAL_RCC_OscConfig+0x4d8>)
 80028de:	f043 0304 	orr.w	r3, r3, #4
 80028e2:	6713      	str	r3, [r2, #112]	; 0x70
 80028e4:	4b74      	ldr	r3, [pc, #464]	; (8002ab8 <HAL_RCC_OscConfig+0x4d8>)
 80028e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028e8:	4a73      	ldr	r2, [pc, #460]	; (8002ab8 <HAL_RCC_OscConfig+0x4d8>)
 80028ea:	f043 0301 	orr.w	r3, r3, #1
 80028ee:	6713      	str	r3, [r2, #112]	; 0x70
 80028f0:	e00b      	b.n	800290a <HAL_RCC_OscConfig+0x32a>
 80028f2:	4b71      	ldr	r3, [pc, #452]	; (8002ab8 <HAL_RCC_OscConfig+0x4d8>)
 80028f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028f6:	4a70      	ldr	r2, [pc, #448]	; (8002ab8 <HAL_RCC_OscConfig+0x4d8>)
 80028f8:	f023 0301 	bic.w	r3, r3, #1
 80028fc:	6713      	str	r3, [r2, #112]	; 0x70
 80028fe:	4b6e      	ldr	r3, [pc, #440]	; (8002ab8 <HAL_RCC_OscConfig+0x4d8>)
 8002900:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002902:	4a6d      	ldr	r2, [pc, #436]	; (8002ab8 <HAL_RCC_OscConfig+0x4d8>)
 8002904:	f023 0304 	bic.w	r3, r3, #4
 8002908:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d015      	beq.n	800293e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002912:	f7fe ff61 	bl	80017d8 <HAL_GetTick>
 8002916:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002918:	e00a      	b.n	8002930 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800291a:	f7fe ff5d 	bl	80017d8 <HAL_GetTick>
 800291e:	4602      	mov	r2, r0
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	1ad3      	subs	r3, r2, r3
 8002924:	f241 3288 	movw	r2, #5000	; 0x1388
 8002928:	4293      	cmp	r3, r2
 800292a:	d901      	bls.n	8002930 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800292c:	2303      	movs	r3, #3
 800292e:	e0bc      	b.n	8002aaa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002930:	4b61      	ldr	r3, [pc, #388]	; (8002ab8 <HAL_RCC_OscConfig+0x4d8>)
 8002932:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002934:	f003 0302 	and.w	r3, r3, #2
 8002938:	2b00      	cmp	r3, #0
 800293a:	d0ee      	beq.n	800291a <HAL_RCC_OscConfig+0x33a>
 800293c:	e014      	b.n	8002968 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800293e:	f7fe ff4b 	bl	80017d8 <HAL_GetTick>
 8002942:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002944:	e00a      	b.n	800295c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002946:	f7fe ff47 	bl	80017d8 <HAL_GetTick>
 800294a:	4602      	mov	r2, r0
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	1ad3      	subs	r3, r2, r3
 8002950:	f241 3288 	movw	r2, #5000	; 0x1388
 8002954:	4293      	cmp	r3, r2
 8002956:	d901      	bls.n	800295c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002958:	2303      	movs	r3, #3
 800295a:	e0a6      	b.n	8002aaa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800295c:	4b56      	ldr	r3, [pc, #344]	; (8002ab8 <HAL_RCC_OscConfig+0x4d8>)
 800295e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002960:	f003 0302 	and.w	r3, r3, #2
 8002964:	2b00      	cmp	r3, #0
 8002966:	d1ee      	bne.n	8002946 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002968:	7dfb      	ldrb	r3, [r7, #23]
 800296a:	2b01      	cmp	r3, #1
 800296c:	d105      	bne.n	800297a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800296e:	4b52      	ldr	r3, [pc, #328]	; (8002ab8 <HAL_RCC_OscConfig+0x4d8>)
 8002970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002972:	4a51      	ldr	r2, [pc, #324]	; (8002ab8 <HAL_RCC_OscConfig+0x4d8>)
 8002974:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002978:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	699b      	ldr	r3, [r3, #24]
 800297e:	2b00      	cmp	r3, #0
 8002980:	f000 8092 	beq.w	8002aa8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002984:	4b4c      	ldr	r3, [pc, #304]	; (8002ab8 <HAL_RCC_OscConfig+0x4d8>)
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	f003 030c 	and.w	r3, r3, #12
 800298c:	2b08      	cmp	r3, #8
 800298e:	d05c      	beq.n	8002a4a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	699b      	ldr	r3, [r3, #24]
 8002994:	2b02      	cmp	r3, #2
 8002996:	d141      	bne.n	8002a1c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002998:	4b48      	ldr	r3, [pc, #288]	; (8002abc <HAL_RCC_OscConfig+0x4dc>)
 800299a:	2200      	movs	r2, #0
 800299c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800299e:	f7fe ff1b 	bl	80017d8 <HAL_GetTick>
 80029a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029a4:	e008      	b.n	80029b8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029a6:	f7fe ff17 	bl	80017d8 <HAL_GetTick>
 80029aa:	4602      	mov	r2, r0
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	1ad3      	subs	r3, r2, r3
 80029b0:	2b02      	cmp	r3, #2
 80029b2:	d901      	bls.n	80029b8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80029b4:	2303      	movs	r3, #3
 80029b6:	e078      	b.n	8002aaa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029b8:	4b3f      	ldr	r3, [pc, #252]	; (8002ab8 <HAL_RCC_OscConfig+0x4d8>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d1f0      	bne.n	80029a6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	69da      	ldr	r2, [r3, #28]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6a1b      	ldr	r3, [r3, #32]
 80029cc:	431a      	orrs	r2, r3
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d2:	019b      	lsls	r3, r3, #6
 80029d4:	431a      	orrs	r2, r3
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029da:	085b      	lsrs	r3, r3, #1
 80029dc:	3b01      	subs	r3, #1
 80029de:	041b      	lsls	r3, r3, #16
 80029e0:	431a      	orrs	r2, r3
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e6:	061b      	lsls	r3, r3, #24
 80029e8:	4933      	ldr	r1, [pc, #204]	; (8002ab8 <HAL_RCC_OscConfig+0x4d8>)
 80029ea:	4313      	orrs	r3, r2
 80029ec:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029ee:	4b33      	ldr	r3, [pc, #204]	; (8002abc <HAL_RCC_OscConfig+0x4dc>)
 80029f0:	2201      	movs	r2, #1
 80029f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029f4:	f7fe fef0 	bl	80017d8 <HAL_GetTick>
 80029f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029fa:	e008      	b.n	8002a0e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029fc:	f7fe feec 	bl	80017d8 <HAL_GetTick>
 8002a00:	4602      	mov	r2, r0
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	2b02      	cmp	r3, #2
 8002a08:	d901      	bls.n	8002a0e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e04d      	b.n	8002aaa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a0e:	4b2a      	ldr	r3, [pc, #168]	; (8002ab8 <HAL_RCC_OscConfig+0x4d8>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d0f0      	beq.n	80029fc <HAL_RCC_OscConfig+0x41c>
 8002a1a:	e045      	b.n	8002aa8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a1c:	4b27      	ldr	r3, [pc, #156]	; (8002abc <HAL_RCC_OscConfig+0x4dc>)
 8002a1e:	2200      	movs	r2, #0
 8002a20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a22:	f7fe fed9 	bl	80017d8 <HAL_GetTick>
 8002a26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a28:	e008      	b.n	8002a3c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a2a:	f7fe fed5 	bl	80017d8 <HAL_GetTick>
 8002a2e:	4602      	mov	r2, r0
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	1ad3      	subs	r3, r2, r3
 8002a34:	2b02      	cmp	r3, #2
 8002a36:	d901      	bls.n	8002a3c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002a38:	2303      	movs	r3, #3
 8002a3a:	e036      	b.n	8002aaa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a3c:	4b1e      	ldr	r3, [pc, #120]	; (8002ab8 <HAL_RCC_OscConfig+0x4d8>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d1f0      	bne.n	8002a2a <HAL_RCC_OscConfig+0x44a>
 8002a48:	e02e      	b.n	8002aa8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	699b      	ldr	r3, [r3, #24]
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	d101      	bne.n	8002a56 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e029      	b.n	8002aaa <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a56:	4b18      	ldr	r3, [pc, #96]	; (8002ab8 <HAL_RCC_OscConfig+0x4d8>)
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	69db      	ldr	r3, [r3, #28]
 8002a66:	429a      	cmp	r2, r3
 8002a68:	d11c      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d115      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002a78:	68fa      	ldr	r2, [r7, #12]
 8002a7a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002a7e:	4013      	ands	r3, r2
 8002a80:	687a      	ldr	r2, [r7, #4]
 8002a82:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d10d      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002a92:	429a      	cmp	r2, r3
 8002a94:	d106      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d001      	beq.n	8002aa8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e000      	b.n	8002aaa <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002aa8:	2300      	movs	r3, #0
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3718      	adds	r7, #24
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	40007000 	.word	0x40007000
 8002ab8:	40023800 	.word	0x40023800
 8002abc:	42470060 	.word	0x42470060

08002ac0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b084      	sub	sp, #16
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d101      	bne.n	8002ad4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e0cc      	b.n	8002c6e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ad4:	4b68      	ldr	r3, [pc, #416]	; (8002c78 <HAL_RCC_ClockConfig+0x1b8>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 030f 	and.w	r3, r3, #15
 8002adc:	683a      	ldr	r2, [r7, #0]
 8002ade:	429a      	cmp	r2, r3
 8002ae0:	d90c      	bls.n	8002afc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ae2:	4b65      	ldr	r3, [pc, #404]	; (8002c78 <HAL_RCC_ClockConfig+0x1b8>)
 8002ae4:	683a      	ldr	r2, [r7, #0]
 8002ae6:	b2d2      	uxtb	r2, r2
 8002ae8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aea:	4b63      	ldr	r3, [pc, #396]	; (8002c78 <HAL_RCC_ClockConfig+0x1b8>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 030f 	and.w	r3, r3, #15
 8002af2:	683a      	ldr	r2, [r7, #0]
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d001      	beq.n	8002afc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e0b8      	b.n	8002c6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 0302 	and.w	r3, r3, #2
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d020      	beq.n	8002b4a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 0304 	and.w	r3, r3, #4
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d005      	beq.n	8002b20 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b14:	4b59      	ldr	r3, [pc, #356]	; (8002c7c <HAL_RCC_ClockConfig+0x1bc>)
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	4a58      	ldr	r2, [pc, #352]	; (8002c7c <HAL_RCC_ClockConfig+0x1bc>)
 8002b1a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b1e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 0308 	and.w	r3, r3, #8
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d005      	beq.n	8002b38 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b2c:	4b53      	ldr	r3, [pc, #332]	; (8002c7c <HAL_RCC_ClockConfig+0x1bc>)
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	4a52      	ldr	r2, [pc, #328]	; (8002c7c <HAL_RCC_ClockConfig+0x1bc>)
 8002b32:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b36:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b38:	4b50      	ldr	r3, [pc, #320]	; (8002c7c <HAL_RCC_ClockConfig+0x1bc>)
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	494d      	ldr	r1, [pc, #308]	; (8002c7c <HAL_RCC_ClockConfig+0x1bc>)
 8002b46:	4313      	orrs	r3, r2
 8002b48:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 0301 	and.w	r3, r3, #1
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d044      	beq.n	8002be0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d107      	bne.n	8002b6e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b5e:	4b47      	ldr	r3, [pc, #284]	; (8002c7c <HAL_RCC_ClockConfig+0x1bc>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d119      	bne.n	8002b9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e07f      	b.n	8002c6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	2b02      	cmp	r3, #2
 8002b74:	d003      	beq.n	8002b7e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b7a:	2b03      	cmp	r3, #3
 8002b7c:	d107      	bne.n	8002b8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b7e:	4b3f      	ldr	r3, [pc, #252]	; (8002c7c <HAL_RCC_ClockConfig+0x1bc>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d109      	bne.n	8002b9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e06f      	b.n	8002c6e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b8e:	4b3b      	ldr	r3, [pc, #236]	; (8002c7c <HAL_RCC_ClockConfig+0x1bc>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 0302 	and.w	r3, r3, #2
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d101      	bne.n	8002b9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e067      	b.n	8002c6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b9e:	4b37      	ldr	r3, [pc, #220]	; (8002c7c <HAL_RCC_ClockConfig+0x1bc>)
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	f023 0203 	bic.w	r2, r3, #3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	4934      	ldr	r1, [pc, #208]	; (8002c7c <HAL_RCC_ClockConfig+0x1bc>)
 8002bac:	4313      	orrs	r3, r2
 8002bae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bb0:	f7fe fe12 	bl	80017d8 <HAL_GetTick>
 8002bb4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bb6:	e00a      	b.n	8002bce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bb8:	f7fe fe0e 	bl	80017d8 <HAL_GetTick>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d901      	bls.n	8002bce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002bca:	2303      	movs	r3, #3
 8002bcc:	e04f      	b.n	8002c6e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bce:	4b2b      	ldr	r3, [pc, #172]	; (8002c7c <HAL_RCC_ClockConfig+0x1bc>)
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	f003 020c 	and.w	r2, r3, #12
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d1eb      	bne.n	8002bb8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002be0:	4b25      	ldr	r3, [pc, #148]	; (8002c78 <HAL_RCC_ClockConfig+0x1b8>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 030f 	and.w	r3, r3, #15
 8002be8:	683a      	ldr	r2, [r7, #0]
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d20c      	bcs.n	8002c08 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bee:	4b22      	ldr	r3, [pc, #136]	; (8002c78 <HAL_RCC_ClockConfig+0x1b8>)
 8002bf0:	683a      	ldr	r2, [r7, #0]
 8002bf2:	b2d2      	uxtb	r2, r2
 8002bf4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bf6:	4b20      	ldr	r3, [pc, #128]	; (8002c78 <HAL_RCC_ClockConfig+0x1b8>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 030f 	and.w	r3, r3, #15
 8002bfe:	683a      	ldr	r2, [r7, #0]
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d001      	beq.n	8002c08 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	e032      	b.n	8002c6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 0304 	and.w	r3, r3, #4
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d008      	beq.n	8002c26 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c14:	4b19      	ldr	r3, [pc, #100]	; (8002c7c <HAL_RCC_ClockConfig+0x1bc>)
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	4916      	ldr	r1, [pc, #88]	; (8002c7c <HAL_RCC_ClockConfig+0x1bc>)
 8002c22:	4313      	orrs	r3, r2
 8002c24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 0308 	and.w	r3, r3, #8
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d009      	beq.n	8002c46 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c32:	4b12      	ldr	r3, [pc, #72]	; (8002c7c <HAL_RCC_ClockConfig+0x1bc>)
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	691b      	ldr	r3, [r3, #16]
 8002c3e:	00db      	lsls	r3, r3, #3
 8002c40:	490e      	ldr	r1, [pc, #56]	; (8002c7c <HAL_RCC_ClockConfig+0x1bc>)
 8002c42:	4313      	orrs	r3, r2
 8002c44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c46:	f000 f821 	bl	8002c8c <HAL_RCC_GetSysClockFreq>
 8002c4a:	4601      	mov	r1, r0
 8002c4c:	4b0b      	ldr	r3, [pc, #44]	; (8002c7c <HAL_RCC_ClockConfig+0x1bc>)
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	091b      	lsrs	r3, r3, #4
 8002c52:	f003 030f 	and.w	r3, r3, #15
 8002c56:	4a0a      	ldr	r2, [pc, #40]	; (8002c80 <HAL_RCC_ClockConfig+0x1c0>)
 8002c58:	5cd3      	ldrb	r3, [r2, r3]
 8002c5a:	fa21 f303 	lsr.w	r3, r1, r3
 8002c5e:	4a09      	ldr	r2, [pc, #36]	; (8002c84 <HAL_RCC_ClockConfig+0x1c4>)
 8002c60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002c62:	4b09      	ldr	r3, [pc, #36]	; (8002c88 <HAL_RCC_ClockConfig+0x1c8>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4618      	mov	r0, r3
 8002c68:	f7fe fd72 	bl	8001750 <HAL_InitTick>

  return HAL_OK;
 8002c6c:	2300      	movs	r3, #0
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3710      	adds	r7, #16
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	40023c00 	.word	0x40023c00
 8002c7c:	40023800 	.word	0x40023800
 8002c80:	08003f24 	.word	0x08003f24
 8002c84:	2000000c 	.word	0x2000000c
 8002c88:	20000010 	.word	0x20000010

08002c8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c8e:	b085      	sub	sp, #20
 8002c90:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002c92:	2300      	movs	r3, #0
 8002c94:	607b      	str	r3, [r7, #4]
 8002c96:	2300      	movs	r3, #0
 8002c98:	60fb      	str	r3, [r7, #12]
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ca2:	4b63      	ldr	r3, [pc, #396]	; (8002e30 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	f003 030c 	and.w	r3, r3, #12
 8002caa:	2b04      	cmp	r3, #4
 8002cac:	d007      	beq.n	8002cbe <HAL_RCC_GetSysClockFreq+0x32>
 8002cae:	2b08      	cmp	r3, #8
 8002cb0:	d008      	beq.n	8002cc4 <HAL_RCC_GetSysClockFreq+0x38>
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	f040 80b4 	bne.w	8002e20 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002cb8:	4b5e      	ldr	r3, [pc, #376]	; (8002e34 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002cba:	60bb      	str	r3, [r7, #8]
       break;
 8002cbc:	e0b3      	b.n	8002e26 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002cbe:	4b5e      	ldr	r3, [pc, #376]	; (8002e38 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002cc0:	60bb      	str	r3, [r7, #8]
      break;
 8002cc2:	e0b0      	b.n	8002e26 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002cc4:	4b5a      	ldr	r3, [pc, #360]	; (8002e30 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ccc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002cce:	4b58      	ldr	r3, [pc, #352]	; (8002e30 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d04a      	beq.n	8002d70 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cda:	4b55      	ldr	r3, [pc, #340]	; (8002e30 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	099b      	lsrs	r3, r3, #6
 8002ce0:	f04f 0400 	mov.w	r4, #0
 8002ce4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002ce8:	f04f 0200 	mov.w	r2, #0
 8002cec:	ea03 0501 	and.w	r5, r3, r1
 8002cf0:	ea04 0602 	and.w	r6, r4, r2
 8002cf4:	4629      	mov	r1, r5
 8002cf6:	4632      	mov	r2, r6
 8002cf8:	f04f 0300 	mov.w	r3, #0
 8002cfc:	f04f 0400 	mov.w	r4, #0
 8002d00:	0154      	lsls	r4, r2, #5
 8002d02:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002d06:	014b      	lsls	r3, r1, #5
 8002d08:	4619      	mov	r1, r3
 8002d0a:	4622      	mov	r2, r4
 8002d0c:	1b49      	subs	r1, r1, r5
 8002d0e:	eb62 0206 	sbc.w	r2, r2, r6
 8002d12:	f04f 0300 	mov.w	r3, #0
 8002d16:	f04f 0400 	mov.w	r4, #0
 8002d1a:	0194      	lsls	r4, r2, #6
 8002d1c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002d20:	018b      	lsls	r3, r1, #6
 8002d22:	1a5b      	subs	r3, r3, r1
 8002d24:	eb64 0402 	sbc.w	r4, r4, r2
 8002d28:	f04f 0100 	mov.w	r1, #0
 8002d2c:	f04f 0200 	mov.w	r2, #0
 8002d30:	00e2      	lsls	r2, r4, #3
 8002d32:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002d36:	00d9      	lsls	r1, r3, #3
 8002d38:	460b      	mov	r3, r1
 8002d3a:	4614      	mov	r4, r2
 8002d3c:	195b      	adds	r3, r3, r5
 8002d3e:	eb44 0406 	adc.w	r4, r4, r6
 8002d42:	f04f 0100 	mov.w	r1, #0
 8002d46:	f04f 0200 	mov.w	r2, #0
 8002d4a:	0262      	lsls	r2, r4, #9
 8002d4c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002d50:	0259      	lsls	r1, r3, #9
 8002d52:	460b      	mov	r3, r1
 8002d54:	4614      	mov	r4, r2
 8002d56:	4618      	mov	r0, r3
 8002d58:	4621      	mov	r1, r4
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	f04f 0400 	mov.w	r4, #0
 8002d60:	461a      	mov	r2, r3
 8002d62:	4623      	mov	r3, r4
 8002d64:	f7fd fa42 	bl	80001ec <__aeabi_uldivmod>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	460c      	mov	r4, r1
 8002d6c:	60fb      	str	r3, [r7, #12]
 8002d6e:	e049      	b.n	8002e04 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d70:	4b2f      	ldr	r3, [pc, #188]	; (8002e30 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	099b      	lsrs	r3, r3, #6
 8002d76:	f04f 0400 	mov.w	r4, #0
 8002d7a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002d7e:	f04f 0200 	mov.w	r2, #0
 8002d82:	ea03 0501 	and.w	r5, r3, r1
 8002d86:	ea04 0602 	and.w	r6, r4, r2
 8002d8a:	4629      	mov	r1, r5
 8002d8c:	4632      	mov	r2, r6
 8002d8e:	f04f 0300 	mov.w	r3, #0
 8002d92:	f04f 0400 	mov.w	r4, #0
 8002d96:	0154      	lsls	r4, r2, #5
 8002d98:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002d9c:	014b      	lsls	r3, r1, #5
 8002d9e:	4619      	mov	r1, r3
 8002da0:	4622      	mov	r2, r4
 8002da2:	1b49      	subs	r1, r1, r5
 8002da4:	eb62 0206 	sbc.w	r2, r2, r6
 8002da8:	f04f 0300 	mov.w	r3, #0
 8002dac:	f04f 0400 	mov.w	r4, #0
 8002db0:	0194      	lsls	r4, r2, #6
 8002db2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002db6:	018b      	lsls	r3, r1, #6
 8002db8:	1a5b      	subs	r3, r3, r1
 8002dba:	eb64 0402 	sbc.w	r4, r4, r2
 8002dbe:	f04f 0100 	mov.w	r1, #0
 8002dc2:	f04f 0200 	mov.w	r2, #0
 8002dc6:	00e2      	lsls	r2, r4, #3
 8002dc8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002dcc:	00d9      	lsls	r1, r3, #3
 8002dce:	460b      	mov	r3, r1
 8002dd0:	4614      	mov	r4, r2
 8002dd2:	195b      	adds	r3, r3, r5
 8002dd4:	eb44 0406 	adc.w	r4, r4, r6
 8002dd8:	f04f 0100 	mov.w	r1, #0
 8002ddc:	f04f 0200 	mov.w	r2, #0
 8002de0:	02a2      	lsls	r2, r4, #10
 8002de2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002de6:	0299      	lsls	r1, r3, #10
 8002de8:	460b      	mov	r3, r1
 8002dea:	4614      	mov	r4, r2
 8002dec:	4618      	mov	r0, r3
 8002dee:	4621      	mov	r1, r4
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	f04f 0400 	mov.w	r4, #0
 8002df6:	461a      	mov	r2, r3
 8002df8:	4623      	mov	r3, r4
 8002dfa:	f7fd f9f7 	bl	80001ec <__aeabi_uldivmod>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	460c      	mov	r4, r1
 8002e02:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002e04:	4b0a      	ldr	r3, [pc, #40]	; (8002e30 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	0c1b      	lsrs	r3, r3, #16
 8002e0a:	f003 0303 	and.w	r3, r3, #3
 8002e0e:	3301      	adds	r3, #1
 8002e10:	005b      	lsls	r3, r3, #1
 8002e12:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002e14:	68fa      	ldr	r2, [r7, #12]
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e1c:	60bb      	str	r3, [r7, #8]
      break;
 8002e1e:	e002      	b.n	8002e26 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e20:	4b04      	ldr	r3, [pc, #16]	; (8002e34 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002e22:	60bb      	str	r3, [r7, #8]
      break;
 8002e24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e26:	68bb      	ldr	r3, [r7, #8]
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3714      	adds	r7, #20
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e30:	40023800 	.word	0x40023800
 8002e34:	00f42400 	.word	0x00f42400
 8002e38:	007a1200 	.word	0x007a1200

08002e3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e40:	4b03      	ldr	r3, [pc, #12]	; (8002e50 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e42:	681b      	ldr	r3, [r3, #0]
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr
 8002e4e:	bf00      	nop
 8002e50:	2000000c 	.word	0x2000000c

08002e54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002e58:	f7ff fff0 	bl	8002e3c <HAL_RCC_GetHCLKFreq>
 8002e5c:	4601      	mov	r1, r0
 8002e5e:	4b05      	ldr	r3, [pc, #20]	; (8002e74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	0a9b      	lsrs	r3, r3, #10
 8002e64:	f003 0307 	and.w	r3, r3, #7
 8002e68:	4a03      	ldr	r2, [pc, #12]	; (8002e78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e6a:	5cd3      	ldrb	r3, [r2, r3]
 8002e6c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	bd80      	pop	{r7, pc}
 8002e74:	40023800 	.word	0x40023800
 8002e78:	08003f34 	.word	0x08003f34

08002e7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002e80:	f7ff ffdc 	bl	8002e3c <HAL_RCC_GetHCLKFreq>
 8002e84:	4601      	mov	r1, r0
 8002e86:	4b05      	ldr	r3, [pc, #20]	; (8002e9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	0b5b      	lsrs	r3, r3, #13
 8002e8c:	f003 0307 	and.w	r3, r3, #7
 8002e90:	4a03      	ldr	r2, [pc, #12]	; (8002ea0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e92:	5cd3      	ldrb	r3, [r2, r3]
 8002e94:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	40023800 	.word	0x40023800
 8002ea0:	08003f34 	.word	0x08003f34

08002ea4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b082      	sub	sp, #8
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d101      	bne.n	8002eb6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e03f      	b.n	8002f36 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d106      	bne.n	8002ed0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	f7fe fb28 	bl	8001520 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2224      	movs	r2, #36	; 0x24
 8002ed4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	68da      	ldr	r2, [r3, #12]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ee6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ee8:	6878      	ldr	r0, [r7, #4]
 8002eea:	f000 f9b1 	bl	8003250 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	691a      	ldr	r2, [r3, #16]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002efc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	695a      	ldr	r2, [r3, #20]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f0c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	68da      	ldr	r2, [r3, #12]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f1c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2220      	movs	r2, #32
 8002f28:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2220      	movs	r2, #32
 8002f30:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002f34:	2300      	movs	r3, #0
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3708      	adds	r7, #8
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}

08002f3e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f3e:	b580      	push	{r7, lr}
 8002f40:	b088      	sub	sp, #32
 8002f42:	af02      	add	r7, sp, #8
 8002f44:	60f8      	str	r0, [r7, #12]
 8002f46:	60b9      	str	r1, [r7, #8]
 8002f48:	603b      	str	r3, [r7, #0]
 8002f4a:	4613      	mov	r3, r2
 8002f4c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	2b20      	cmp	r3, #32
 8002f5c:	f040 8083 	bne.w	8003066 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d002      	beq.n	8002f6c <HAL_UART_Transmit+0x2e>
 8002f66:	88fb      	ldrh	r3, [r7, #6]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d101      	bne.n	8002f70 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e07b      	b.n	8003068 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d101      	bne.n	8002f7e <HAL_UART_Transmit+0x40>
 8002f7a:	2302      	movs	r3, #2
 8002f7c:	e074      	b.n	8003068 <HAL_UART_Transmit+0x12a>
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2201      	movs	r2, #1
 8002f82:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2221      	movs	r2, #33	; 0x21
 8002f90:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002f94:	f7fe fc20 	bl	80017d8 <HAL_GetTick>
 8002f98:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	88fa      	ldrh	r2, [r7, #6]
 8002f9e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	88fa      	ldrh	r2, [r7, #6]
 8002fa4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002fae:	e042      	b.n	8003036 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002fb4:	b29b      	uxth	r3, r3
 8002fb6:	3b01      	subs	r3, #1
 8002fb8:	b29a      	uxth	r2, r3
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fc6:	d122      	bne.n	800300e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	9300      	str	r3, [sp, #0]
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	2180      	movs	r1, #128	; 0x80
 8002fd2:	68f8      	ldr	r0, [r7, #12]
 8002fd4:	f000 f8f2 	bl	80031bc <UART_WaitOnFlagUntilTimeout>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d001      	beq.n	8002fe2 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	e042      	b.n	8003068 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	881b      	ldrh	r3, [r3, #0]
 8002fea:	461a      	mov	r2, r3
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ff4:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	691b      	ldr	r3, [r3, #16]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d103      	bne.n	8003006 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	3302      	adds	r3, #2
 8003002:	60bb      	str	r3, [r7, #8]
 8003004:	e017      	b.n	8003036 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	3301      	adds	r3, #1
 800300a:	60bb      	str	r3, [r7, #8]
 800300c:	e013      	b.n	8003036 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	9300      	str	r3, [sp, #0]
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	2200      	movs	r2, #0
 8003016:	2180      	movs	r1, #128	; 0x80
 8003018:	68f8      	ldr	r0, [r7, #12]
 800301a:	f000 f8cf 	bl	80031bc <UART_WaitOnFlagUntilTimeout>
 800301e:	4603      	mov	r3, r0
 8003020:	2b00      	cmp	r3, #0
 8003022:	d001      	beq.n	8003028 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8003024:	2303      	movs	r3, #3
 8003026:	e01f      	b.n	8003068 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	1c5a      	adds	r2, r3, #1
 800302c:	60ba      	str	r2, [r7, #8]
 800302e:	781a      	ldrb	r2, [r3, #0]
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800303a:	b29b      	uxth	r3, r3
 800303c:	2b00      	cmp	r3, #0
 800303e:	d1b7      	bne.n	8002fb0 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	9300      	str	r3, [sp, #0]
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	2200      	movs	r2, #0
 8003048:	2140      	movs	r1, #64	; 0x40
 800304a:	68f8      	ldr	r0, [r7, #12]
 800304c:	f000 f8b6 	bl	80031bc <UART_WaitOnFlagUntilTimeout>
 8003050:	4603      	mov	r3, r0
 8003052:	2b00      	cmp	r3, #0
 8003054:	d001      	beq.n	800305a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8003056:	2303      	movs	r3, #3
 8003058:	e006      	b.n	8003068 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2220      	movs	r2, #32
 800305e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003062:	2300      	movs	r3, #0
 8003064:	e000      	b.n	8003068 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003066:	2302      	movs	r3, #2
  }
}
 8003068:	4618      	mov	r0, r3
 800306a:	3718      	adds	r7, #24
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}

08003070 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b088      	sub	sp, #32
 8003074:	af02      	add	r7, sp, #8
 8003076:	60f8      	str	r0, [r7, #12]
 8003078:	60b9      	str	r1, [r7, #8]
 800307a:	603b      	str	r3, [r7, #0]
 800307c:	4613      	mov	r3, r2
 800307e:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003080:	2300      	movs	r3, #0
 8003082:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800308a:	b2db      	uxtb	r3, r3
 800308c:	2b20      	cmp	r3, #32
 800308e:	f040 8090 	bne.w	80031b2 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d002      	beq.n	800309e <HAL_UART_Receive+0x2e>
 8003098:	88fb      	ldrh	r3, [r7, #6]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d101      	bne.n	80030a2 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e088      	b.n	80031b4 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d101      	bne.n	80030b0 <HAL_UART_Receive+0x40>
 80030ac:	2302      	movs	r3, #2
 80030ae:	e081      	b.n	80031b4 <HAL_UART_Receive+0x144>
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2201      	movs	r2, #1
 80030b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2200      	movs	r2, #0
 80030bc:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2222      	movs	r2, #34	; 0x22
 80030c2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80030c6:	f7fe fb87 	bl	80017d8 <HAL_GetTick>
 80030ca:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	88fa      	ldrh	r2, [r7, #6]
 80030d0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	88fa      	ldrh	r2, [r7, #6]
 80030d6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2200      	movs	r2, #0
 80030dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80030e0:	e05c      	b.n	800319c <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80030e6:	b29b      	uxth	r3, r3
 80030e8:	3b01      	subs	r3, #1
 80030ea:	b29a      	uxth	r2, r3
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030f8:	d12b      	bne.n	8003152 <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	9300      	str	r3, [sp, #0]
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	2200      	movs	r2, #0
 8003102:	2120      	movs	r1, #32
 8003104:	68f8      	ldr	r0, [r7, #12]
 8003106:	f000 f859 	bl	80031bc <UART_WaitOnFlagUntilTimeout>
 800310a:	4603      	mov	r3, r0
 800310c:	2b00      	cmp	r3, #0
 800310e:	d001      	beq.n	8003114 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 8003110:	2303      	movs	r3, #3
 8003112:	e04f      	b.n	80031b4 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	691b      	ldr	r3, [r3, #16]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d10c      	bne.n	800313a <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	b29b      	uxth	r3, r3
 8003128:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800312c:	b29a      	uxth	r2, r3
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	3302      	adds	r3, #2
 8003136:	60bb      	str	r3, [r7, #8]
 8003138:	e030      	b.n	800319c <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	b29b      	uxth	r3, r3
 8003142:	b2db      	uxtb	r3, r3
 8003144:	b29a      	uxth	r2, r3
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	3301      	adds	r3, #1
 800314e:	60bb      	str	r3, [r7, #8]
 8003150:	e024      	b.n	800319c <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	9300      	str	r3, [sp, #0]
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	2200      	movs	r2, #0
 800315a:	2120      	movs	r1, #32
 800315c:	68f8      	ldr	r0, [r7, #12]
 800315e:	f000 f82d 	bl	80031bc <UART_WaitOnFlagUntilTimeout>
 8003162:	4603      	mov	r3, r0
 8003164:	2b00      	cmp	r3, #0
 8003166:	d001      	beq.n	800316c <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8003168:	2303      	movs	r3, #3
 800316a:	e023      	b.n	80031b4 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	691b      	ldr	r3, [r3, #16]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d108      	bne.n	8003186 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	6859      	ldr	r1, [r3, #4]
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	1c5a      	adds	r2, r3, #1
 800317e:	60ba      	str	r2, [r7, #8]
 8003180:	b2ca      	uxtb	r2, r1
 8003182:	701a      	strb	r2, [r3, #0]
 8003184:	e00a      	b.n	800319c <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	b2da      	uxtb	r2, r3
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	1c59      	adds	r1, r3, #1
 8003192:	60b9      	str	r1, [r7, #8]
 8003194:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003198:	b2d2      	uxtb	r2, r2
 800319a:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80031a0:	b29b      	uxth	r3, r3
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d19d      	bne.n	80030e2 <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2220      	movs	r2, #32
 80031aa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 80031ae:	2300      	movs	r3, #0
 80031b0:	e000      	b.n	80031b4 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 80031b2:	2302      	movs	r3, #2
  }
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	3718      	adds	r7, #24
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}

080031bc <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b084      	sub	sp, #16
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	60f8      	str	r0, [r7, #12]
 80031c4:	60b9      	str	r1, [r7, #8]
 80031c6:	603b      	str	r3, [r7, #0]
 80031c8:	4613      	mov	r3, r2
 80031ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031cc:	e02c      	b.n	8003228 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031ce:	69bb      	ldr	r3, [r7, #24]
 80031d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031d4:	d028      	beq.n	8003228 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80031d6:	69bb      	ldr	r3, [r7, #24]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d007      	beq.n	80031ec <UART_WaitOnFlagUntilTimeout+0x30>
 80031dc:	f7fe fafc 	bl	80017d8 <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	69ba      	ldr	r2, [r7, #24]
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d21d      	bcs.n	8003228 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	68da      	ldr	r2, [r3, #12]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80031fa:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	695a      	ldr	r2, [r3, #20]
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f022 0201 	bic.w	r2, r2, #1
 800320a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2220      	movs	r2, #32
 8003210:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2220      	movs	r2, #32
 8003218:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2200      	movs	r2, #0
 8003220:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003224:	2303      	movs	r3, #3
 8003226:	e00f      	b.n	8003248 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	4013      	ands	r3, r2
 8003232:	68ba      	ldr	r2, [r7, #8]
 8003234:	429a      	cmp	r2, r3
 8003236:	bf0c      	ite	eq
 8003238:	2301      	moveq	r3, #1
 800323a:	2300      	movne	r3, #0
 800323c:	b2db      	uxtb	r3, r3
 800323e:	461a      	mov	r2, r3
 8003240:	79fb      	ldrb	r3, [r7, #7]
 8003242:	429a      	cmp	r2, r3
 8003244:	d0c3      	beq.n	80031ce <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003246:	2300      	movs	r3, #0
}
 8003248:	4618      	mov	r0, r3
 800324a:	3710      	adds	r7, #16
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}

08003250 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003254:	b085      	sub	sp, #20
 8003256:	af00      	add	r7, sp, #0
 8003258:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	691b      	ldr	r3, [r3, #16]
 8003260:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	68da      	ldr	r2, [r3, #12]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	430a      	orrs	r2, r1
 800326e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	689a      	ldr	r2, [r3, #8]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	691b      	ldr	r3, [r3, #16]
 8003278:	431a      	orrs	r2, r3
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	695b      	ldr	r3, [r3, #20]
 800327e:	431a      	orrs	r2, r3
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	69db      	ldr	r3, [r3, #28]
 8003284:	4313      	orrs	r3, r2
 8003286:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	68db      	ldr	r3, [r3, #12]
 800328e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003292:	f023 030c 	bic.w	r3, r3, #12
 8003296:	687a      	ldr	r2, [r7, #4]
 8003298:	6812      	ldr	r2, [r2, #0]
 800329a:	68f9      	ldr	r1, [r7, #12]
 800329c:	430b      	orrs	r3, r1
 800329e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	695b      	ldr	r3, [r3, #20]
 80032a6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	699a      	ldr	r2, [r3, #24]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	430a      	orrs	r2, r1
 80032b4:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	69db      	ldr	r3, [r3, #28]
 80032ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032be:	f040 818b 	bne.w	80035d8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4ac1      	ldr	r2, [pc, #772]	; (80035cc <UART_SetConfig+0x37c>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d005      	beq.n	80032d8 <UART_SetConfig+0x88>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4abf      	ldr	r2, [pc, #764]	; (80035d0 <UART_SetConfig+0x380>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	f040 80bd 	bne.w	8003452 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80032d8:	f7ff fdd0 	bl	8002e7c <HAL_RCC_GetPCLK2Freq>
 80032dc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	461d      	mov	r5, r3
 80032e2:	f04f 0600 	mov.w	r6, #0
 80032e6:	46a8      	mov	r8, r5
 80032e8:	46b1      	mov	r9, r6
 80032ea:	eb18 0308 	adds.w	r3, r8, r8
 80032ee:	eb49 0409 	adc.w	r4, r9, r9
 80032f2:	4698      	mov	r8, r3
 80032f4:	46a1      	mov	r9, r4
 80032f6:	eb18 0805 	adds.w	r8, r8, r5
 80032fa:	eb49 0906 	adc.w	r9, r9, r6
 80032fe:	f04f 0100 	mov.w	r1, #0
 8003302:	f04f 0200 	mov.w	r2, #0
 8003306:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800330a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800330e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003312:	4688      	mov	r8, r1
 8003314:	4691      	mov	r9, r2
 8003316:	eb18 0005 	adds.w	r0, r8, r5
 800331a:	eb49 0106 	adc.w	r1, r9, r6
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	461d      	mov	r5, r3
 8003324:	f04f 0600 	mov.w	r6, #0
 8003328:	196b      	adds	r3, r5, r5
 800332a:	eb46 0406 	adc.w	r4, r6, r6
 800332e:	461a      	mov	r2, r3
 8003330:	4623      	mov	r3, r4
 8003332:	f7fc ff5b 	bl	80001ec <__aeabi_uldivmod>
 8003336:	4603      	mov	r3, r0
 8003338:	460c      	mov	r4, r1
 800333a:	461a      	mov	r2, r3
 800333c:	4ba5      	ldr	r3, [pc, #660]	; (80035d4 <UART_SetConfig+0x384>)
 800333e:	fba3 2302 	umull	r2, r3, r3, r2
 8003342:	095b      	lsrs	r3, r3, #5
 8003344:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	461d      	mov	r5, r3
 800334c:	f04f 0600 	mov.w	r6, #0
 8003350:	46a9      	mov	r9, r5
 8003352:	46b2      	mov	sl, r6
 8003354:	eb19 0309 	adds.w	r3, r9, r9
 8003358:	eb4a 040a 	adc.w	r4, sl, sl
 800335c:	4699      	mov	r9, r3
 800335e:	46a2      	mov	sl, r4
 8003360:	eb19 0905 	adds.w	r9, r9, r5
 8003364:	eb4a 0a06 	adc.w	sl, sl, r6
 8003368:	f04f 0100 	mov.w	r1, #0
 800336c:	f04f 0200 	mov.w	r2, #0
 8003370:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003374:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003378:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800337c:	4689      	mov	r9, r1
 800337e:	4692      	mov	sl, r2
 8003380:	eb19 0005 	adds.w	r0, r9, r5
 8003384:	eb4a 0106 	adc.w	r1, sl, r6
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	461d      	mov	r5, r3
 800338e:	f04f 0600 	mov.w	r6, #0
 8003392:	196b      	adds	r3, r5, r5
 8003394:	eb46 0406 	adc.w	r4, r6, r6
 8003398:	461a      	mov	r2, r3
 800339a:	4623      	mov	r3, r4
 800339c:	f7fc ff26 	bl	80001ec <__aeabi_uldivmod>
 80033a0:	4603      	mov	r3, r0
 80033a2:	460c      	mov	r4, r1
 80033a4:	461a      	mov	r2, r3
 80033a6:	4b8b      	ldr	r3, [pc, #556]	; (80035d4 <UART_SetConfig+0x384>)
 80033a8:	fba3 1302 	umull	r1, r3, r3, r2
 80033ac:	095b      	lsrs	r3, r3, #5
 80033ae:	2164      	movs	r1, #100	; 0x64
 80033b0:	fb01 f303 	mul.w	r3, r1, r3
 80033b4:	1ad3      	subs	r3, r2, r3
 80033b6:	00db      	lsls	r3, r3, #3
 80033b8:	3332      	adds	r3, #50	; 0x32
 80033ba:	4a86      	ldr	r2, [pc, #536]	; (80035d4 <UART_SetConfig+0x384>)
 80033bc:	fba2 2303 	umull	r2, r3, r2, r3
 80033c0:	095b      	lsrs	r3, r3, #5
 80033c2:	005b      	lsls	r3, r3, #1
 80033c4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80033c8:	4498      	add	r8, r3
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	461d      	mov	r5, r3
 80033ce:	f04f 0600 	mov.w	r6, #0
 80033d2:	46a9      	mov	r9, r5
 80033d4:	46b2      	mov	sl, r6
 80033d6:	eb19 0309 	adds.w	r3, r9, r9
 80033da:	eb4a 040a 	adc.w	r4, sl, sl
 80033de:	4699      	mov	r9, r3
 80033e0:	46a2      	mov	sl, r4
 80033e2:	eb19 0905 	adds.w	r9, r9, r5
 80033e6:	eb4a 0a06 	adc.w	sl, sl, r6
 80033ea:	f04f 0100 	mov.w	r1, #0
 80033ee:	f04f 0200 	mov.w	r2, #0
 80033f2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80033f6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80033fa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80033fe:	4689      	mov	r9, r1
 8003400:	4692      	mov	sl, r2
 8003402:	eb19 0005 	adds.w	r0, r9, r5
 8003406:	eb4a 0106 	adc.w	r1, sl, r6
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	461d      	mov	r5, r3
 8003410:	f04f 0600 	mov.w	r6, #0
 8003414:	196b      	adds	r3, r5, r5
 8003416:	eb46 0406 	adc.w	r4, r6, r6
 800341a:	461a      	mov	r2, r3
 800341c:	4623      	mov	r3, r4
 800341e:	f7fc fee5 	bl	80001ec <__aeabi_uldivmod>
 8003422:	4603      	mov	r3, r0
 8003424:	460c      	mov	r4, r1
 8003426:	461a      	mov	r2, r3
 8003428:	4b6a      	ldr	r3, [pc, #424]	; (80035d4 <UART_SetConfig+0x384>)
 800342a:	fba3 1302 	umull	r1, r3, r3, r2
 800342e:	095b      	lsrs	r3, r3, #5
 8003430:	2164      	movs	r1, #100	; 0x64
 8003432:	fb01 f303 	mul.w	r3, r1, r3
 8003436:	1ad3      	subs	r3, r2, r3
 8003438:	00db      	lsls	r3, r3, #3
 800343a:	3332      	adds	r3, #50	; 0x32
 800343c:	4a65      	ldr	r2, [pc, #404]	; (80035d4 <UART_SetConfig+0x384>)
 800343e:	fba2 2303 	umull	r2, r3, r2, r3
 8003442:	095b      	lsrs	r3, r3, #5
 8003444:	f003 0207 	and.w	r2, r3, #7
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4442      	add	r2, r8
 800344e:	609a      	str	r2, [r3, #8]
 8003450:	e26f      	b.n	8003932 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003452:	f7ff fcff 	bl	8002e54 <HAL_RCC_GetPCLK1Freq>
 8003456:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	461d      	mov	r5, r3
 800345c:	f04f 0600 	mov.w	r6, #0
 8003460:	46a8      	mov	r8, r5
 8003462:	46b1      	mov	r9, r6
 8003464:	eb18 0308 	adds.w	r3, r8, r8
 8003468:	eb49 0409 	adc.w	r4, r9, r9
 800346c:	4698      	mov	r8, r3
 800346e:	46a1      	mov	r9, r4
 8003470:	eb18 0805 	adds.w	r8, r8, r5
 8003474:	eb49 0906 	adc.w	r9, r9, r6
 8003478:	f04f 0100 	mov.w	r1, #0
 800347c:	f04f 0200 	mov.w	r2, #0
 8003480:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003484:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003488:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800348c:	4688      	mov	r8, r1
 800348e:	4691      	mov	r9, r2
 8003490:	eb18 0005 	adds.w	r0, r8, r5
 8003494:	eb49 0106 	adc.w	r1, r9, r6
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	461d      	mov	r5, r3
 800349e:	f04f 0600 	mov.w	r6, #0
 80034a2:	196b      	adds	r3, r5, r5
 80034a4:	eb46 0406 	adc.w	r4, r6, r6
 80034a8:	461a      	mov	r2, r3
 80034aa:	4623      	mov	r3, r4
 80034ac:	f7fc fe9e 	bl	80001ec <__aeabi_uldivmod>
 80034b0:	4603      	mov	r3, r0
 80034b2:	460c      	mov	r4, r1
 80034b4:	461a      	mov	r2, r3
 80034b6:	4b47      	ldr	r3, [pc, #284]	; (80035d4 <UART_SetConfig+0x384>)
 80034b8:	fba3 2302 	umull	r2, r3, r3, r2
 80034bc:	095b      	lsrs	r3, r3, #5
 80034be:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	461d      	mov	r5, r3
 80034c6:	f04f 0600 	mov.w	r6, #0
 80034ca:	46a9      	mov	r9, r5
 80034cc:	46b2      	mov	sl, r6
 80034ce:	eb19 0309 	adds.w	r3, r9, r9
 80034d2:	eb4a 040a 	adc.w	r4, sl, sl
 80034d6:	4699      	mov	r9, r3
 80034d8:	46a2      	mov	sl, r4
 80034da:	eb19 0905 	adds.w	r9, r9, r5
 80034de:	eb4a 0a06 	adc.w	sl, sl, r6
 80034e2:	f04f 0100 	mov.w	r1, #0
 80034e6:	f04f 0200 	mov.w	r2, #0
 80034ea:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80034ee:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80034f2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80034f6:	4689      	mov	r9, r1
 80034f8:	4692      	mov	sl, r2
 80034fa:	eb19 0005 	adds.w	r0, r9, r5
 80034fe:	eb4a 0106 	adc.w	r1, sl, r6
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	461d      	mov	r5, r3
 8003508:	f04f 0600 	mov.w	r6, #0
 800350c:	196b      	adds	r3, r5, r5
 800350e:	eb46 0406 	adc.w	r4, r6, r6
 8003512:	461a      	mov	r2, r3
 8003514:	4623      	mov	r3, r4
 8003516:	f7fc fe69 	bl	80001ec <__aeabi_uldivmod>
 800351a:	4603      	mov	r3, r0
 800351c:	460c      	mov	r4, r1
 800351e:	461a      	mov	r2, r3
 8003520:	4b2c      	ldr	r3, [pc, #176]	; (80035d4 <UART_SetConfig+0x384>)
 8003522:	fba3 1302 	umull	r1, r3, r3, r2
 8003526:	095b      	lsrs	r3, r3, #5
 8003528:	2164      	movs	r1, #100	; 0x64
 800352a:	fb01 f303 	mul.w	r3, r1, r3
 800352e:	1ad3      	subs	r3, r2, r3
 8003530:	00db      	lsls	r3, r3, #3
 8003532:	3332      	adds	r3, #50	; 0x32
 8003534:	4a27      	ldr	r2, [pc, #156]	; (80035d4 <UART_SetConfig+0x384>)
 8003536:	fba2 2303 	umull	r2, r3, r2, r3
 800353a:	095b      	lsrs	r3, r3, #5
 800353c:	005b      	lsls	r3, r3, #1
 800353e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003542:	4498      	add	r8, r3
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	461d      	mov	r5, r3
 8003548:	f04f 0600 	mov.w	r6, #0
 800354c:	46a9      	mov	r9, r5
 800354e:	46b2      	mov	sl, r6
 8003550:	eb19 0309 	adds.w	r3, r9, r9
 8003554:	eb4a 040a 	adc.w	r4, sl, sl
 8003558:	4699      	mov	r9, r3
 800355a:	46a2      	mov	sl, r4
 800355c:	eb19 0905 	adds.w	r9, r9, r5
 8003560:	eb4a 0a06 	adc.w	sl, sl, r6
 8003564:	f04f 0100 	mov.w	r1, #0
 8003568:	f04f 0200 	mov.w	r2, #0
 800356c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003570:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003574:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003578:	4689      	mov	r9, r1
 800357a:	4692      	mov	sl, r2
 800357c:	eb19 0005 	adds.w	r0, r9, r5
 8003580:	eb4a 0106 	adc.w	r1, sl, r6
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	461d      	mov	r5, r3
 800358a:	f04f 0600 	mov.w	r6, #0
 800358e:	196b      	adds	r3, r5, r5
 8003590:	eb46 0406 	adc.w	r4, r6, r6
 8003594:	461a      	mov	r2, r3
 8003596:	4623      	mov	r3, r4
 8003598:	f7fc fe28 	bl	80001ec <__aeabi_uldivmod>
 800359c:	4603      	mov	r3, r0
 800359e:	460c      	mov	r4, r1
 80035a0:	461a      	mov	r2, r3
 80035a2:	4b0c      	ldr	r3, [pc, #48]	; (80035d4 <UART_SetConfig+0x384>)
 80035a4:	fba3 1302 	umull	r1, r3, r3, r2
 80035a8:	095b      	lsrs	r3, r3, #5
 80035aa:	2164      	movs	r1, #100	; 0x64
 80035ac:	fb01 f303 	mul.w	r3, r1, r3
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	00db      	lsls	r3, r3, #3
 80035b4:	3332      	adds	r3, #50	; 0x32
 80035b6:	4a07      	ldr	r2, [pc, #28]	; (80035d4 <UART_SetConfig+0x384>)
 80035b8:	fba2 2303 	umull	r2, r3, r2, r3
 80035bc:	095b      	lsrs	r3, r3, #5
 80035be:	f003 0207 	and.w	r2, r3, #7
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4442      	add	r2, r8
 80035c8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80035ca:	e1b2      	b.n	8003932 <UART_SetConfig+0x6e2>
 80035cc:	40011000 	.word	0x40011000
 80035d0:	40011400 	.word	0x40011400
 80035d4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4ad7      	ldr	r2, [pc, #860]	; (800393c <UART_SetConfig+0x6ec>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d005      	beq.n	80035ee <UART_SetConfig+0x39e>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4ad6      	ldr	r2, [pc, #856]	; (8003940 <UART_SetConfig+0x6f0>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	f040 80d1 	bne.w	8003790 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80035ee:	f7ff fc45 	bl	8002e7c <HAL_RCC_GetPCLK2Freq>
 80035f2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	469a      	mov	sl, r3
 80035f8:	f04f 0b00 	mov.w	fp, #0
 80035fc:	46d0      	mov	r8, sl
 80035fe:	46d9      	mov	r9, fp
 8003600:	eb18 0308 	adds.w	r3, r8, r8
 8003604:	eb49 0409 	adc.w	r4, r9, r9
 8003608:	4698      	mov	r8, r3
 800360a:	46a1      	mov	r9, r4
 800360c:	eb18 080a 	adds.w	r8, r8, sl
 8003610:	eb49 090b 	adc.w	r9, r9, fp
 8003614:	f04f 0100 	mov.w	r1, #0
 8003618:	f04f 0200 	mov.w	r2, #0
 800361c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003620:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003624:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003628:	4688      	mov	r8, r1
 800362a:	4691      	mov	r9, r2
 800362c:	eb1a 0508 	adds.w	r5, sl, r8
 8003630:	eb4b 0609 	adc.w	r6, fp, r9
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	4619      	mov	r1, r3
 800363a:	f04f 0200 	mov.w	r2, #0
 800363e:	f04f 0300 	mov.w	r3, #0
 8003642:	f04f 0400 	mov.w	r4, #0
 8003646:	0094      	lsls	r4, r2, #2
 8003648:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800364c:	008b      	lsls	r3, r1, #2
 800364e:	461a      	mov	r2, r3
 8003650:	4623      	mov	r3, r4
 8003652:	4628      	mov	r0, r5
 8003654:	4631      	mov	r1, r6
 8003656:	f7fc fdc9 	bl	80001ec <__aeabi_uldivmod>
 800365a:	4603      	mov	r3, r0
 800365c:	460c      	mov	r4, r1
 800365e:	461a      	mov	r2, r3
 8003660:	4bb8      	ldr	r3, [pc, #736]	; (8003944 <UART_SetConfig+0x6f4>)
 8003662:	fba3 2302 	umull	r2, r3, r3, r2
 8003666:	095b      	lsrs	r3, r3, #5
 8003668:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	469b      	mov	fp, r3
 8003670:	f04f 0c00 	mov.w	ip, #0
 8003674:	46d9      	mov	r9, fp
 8003676:	46e2      	mov	sl, ip
 8003678:	eb19 0309 	adds.w	r3, r9, r9
 800367c:	eb4a 040a 	adc.w	r4, sl, sl
 8003680:	4699      	mov	r9, r3
 8003682:	46a2      	mov	sl, r4
 8003684:	eb19 090b 	adds.w	r9, r9, fp
 8003688:	eb4a 0a0c 	adc.w	sl, sl, ip
 800368c:	f04f 0100 	mov.w	r1, #0
 8003690:	f04f 0200 	mov.w	r2, #0
 8003694:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003698:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800369c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80036a0:	4689      	mov	r9, r1
 80036a2:	4692      	mov	sl, r2
 80036a4:	eb1b 0509 	adds.w	r5, fp, r9
 80036a8:	eb4c 060a 	adc.w	r6, ip, sl
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	4619      	mov	r1, r3
 80036b2:	f04f 0200 	mov.w	r2, #0
 80036b6:	f04f 0300 	mov.w	r3, #0
 80036ba:	f04f 0400 	mov.w	r4, #0
 80036be:	0094      	lsls	r4, r2, #2
 80036c0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80036c4:	008b      	lsls	r3, r1, #2
 80036c6:	461a      	mov	r2, r3
 80036c8:	4623      	mov	r3, r4
 80036ca:	4628      	mov	r0, r5
 80036cc:	4631      	mov	r1, r6
 80036ce:	f7fc fd8d 	bl	80001ec <__aeabi_uldivmod>
 80036d2:	4603      	mov	r3, r0
 80036d4:	460c      	mov	r4, r1
 80036d6:	461a      	mov	r2, r3
 80036d8:	4b9a      	ldr	r3, [pc, #616]	; (8003944 <UART_SetConfig+0x6f4>)
 80036da:	fba3 1302 	umull	r1, r3, r3, r2
 80036de:	095b      	lsrs	r3, r3, #5
 80036e0:	2164      	movs	r1, #100	; 0x64
 80036e2:	fb01 f303 	mul.w	r3, r1, r3
 80036e6:	1ad3      	subs	r3, r2, r3
 80036e8:	011b      	lsls	r3, r3, #4
 80036ea:	3332      	adds	r3, #50	; 0x32
 80036ec:	4a95      	ldr	r2, [pc, #596]	; (8003944 <UART_SetConfig+0x6f4>)
 80036ee:	fba2 2303 	umull	r2, r3, r2, r3
 80036f2:	095b      	lsrs	r3, r3, #5
 80036f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036f8:	4498      	add	r8, r3
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	469b      	mov	fp, r3
 80036fe:	f04f 0c00 	mov.w	ip, #0
 8003702:	46d9      	mov	r9, fp
 8003704:	46e2      	mov	sl, ip
 8003706:	eb19 0309 	adds.w	r3, r9, r9
 800370a:	eb4a 040a 	adc.w	r4, sl, sl
 800370e:	4699      	mov	r9, r3
 8003710:	46a2      	mov	sl, r4
 8003712:	eb19 090b 	adds.w	r9, r9, fp
 8003716:	eb4a 0a0c 	adc.w	sl, sl, ip
 800371a:	f04f 0100 	mov.w	r1, #0
 800371e:	f04f 0200 	mov.w	r2, #0
 8003722:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003726:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800372a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800372e:	4689      	mov	r9, r1
 8003730:	4692      	mov	sl, r2
 8003732:	eb1b 0509 	adds.w	r5, fp, r9
 8003736:	eb4c 060a 	adc.w	r6, ip, sl
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	4619      	mov	r1, r3
 8003740:	f04f 0200 	mov.w	r2, #0
 8003744:	f04f 0300 	mov.w	r3, #0
 8003748:	f04f 0400 	mov.w	r4, #0
 800374c:	0094      	lsls	r4, r2, #2
 800374e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003752:	008b      	lsls	r3, r1, #2
 8003754:	461a      	mov	r2, r3
 8003756:	4623      	mov	r3, r4
 8003758:	4628      	mov	r0, r5
 800375a:	4631      	mov	r1, r6
 800375c:	f7fc fd46 	bl	80001ec <__aeabi_uldivmod>
 8003760:	4603      	mov	r3, r0
 8003762:	460c      	mov	r4, r1
 8003764:	461a      	mov	r2, r3
 8003766:	4b77      	ldr	r3, [pc, #476]	; (8003944 <UART_SetConfig+0x6f4>)
 8003768:	fba3 1302 	umull	r1, r3, r3, r2
 800376c:	095b      	lsrs	r3, r3, #5
 800376e:	2164      	movs	r1, #100	; 0x64
 8003770:	fb01 f303 	mul.w	r3, r1, r3
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	011b      	lsls	r3, r3, #4
 8003778:	3332      	adds	r3, #50	; 0x32
 800377a:	4a72      	ldr	r2, [pc, #456]	; (8003944 <UART_SetConfig+0x6f4>)
 800377c:	fba2 2303 	umull	r2, r3, r2, r3
 8003780:	095b      	lsrs	r3, r3, #5
 8003782:	f003 020f 	and.w	r2, r3, #15
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4442      	add	r2, r8
 800378c:	609a      	str	r2, [r3, #8]
 800378e:	e0d0      	b.n	8003932 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003790:	f7ff fb60 	bl	8002e54 <HAL_RCC_GetPCLK1Freq>
 8003794:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	469a      	mov	sl, r3
 800379a:	f04f 0b00 	mov.w	fp, #0
 800379e:	46d0      	mov	r8, sl
 80037a0:	46d9      	mov	r9, fp
 80037a2:	eb18 0308 	adds.w	r3, r8, r8
 80037a6:	eb49 0409 	adc.w	r4, r9, r9
 80037aa:	4698      	mov	r8, r3
 80037ac:	46a1      	mov	r9, r4
 80037ae:	eb18 080a 	adds.w	r8, r8, sl
 80037b2:	eb49 090b 	adc.w	r9, r9, fp
 80037b6:	f04f 0100 	mov.w	r1, #0
 80037ba:	f04f 0200 	mov.w	r2, #0
 80037be:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80037c2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80037c6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80037ca:	4688      	mov	r8, r1
 80037cc:	4691      	mov	r9, r2
 80037ce:	eb1a 0508 	adds.w	r5, sl, r8
 80037d2:	eb4b 0609 	adc.w	r6, fp, r9
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	4619      	mov	r1, r3
 80037dc:	f04f 0200 	mov.w	r2, #0
 80037e0:	f04f 0300 	mov.w	r3, #0
 80037e4:	f04f 0400 	mov.w	r4, #0
 80037e8:	0094      	lsls	r4, r2, #2
 80037ea:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80037ee:	008b      	lsls	r3, r1, #2
 80037f0:	461a      	mov	r2, r3
 80037f2:	4623      	mov	r3, r4
 80037f4:	4628      	mov	r0, r5
 80037f6:	4631      	mov	r1, r6
 80037f8:	f7fc fcf8 	bl	80001ec <__aeabi_uldivmod>
 80037fc:	4603      	mov	r3, r0
 80037fe:	460c      	mov	r4, r1
 8003800:	461a      	mov	r2, r3
 8003802:	4b50      	ldr	r3, [pc, #320]	; (8003944 <UART_SetConfig+0x6f4>)
 8003804:	fba3 2302 	umull	r2, r3, r3, r2
 8003808:	095b      	lsrs	r3, r3, #5
 800380a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	469b      	mov	fp, r3
 8003812:	f04f 0c00 	mov.w	ip, #0
 8003816:	46d9      	mov	r9, fp
 8003818:	46e2      	mov	sl, ip
 800381a:	eb19 0309 	adds.w	r3, r9, r9
 800381e:	eb4a 040a 	adc.w	r4, sl, sl
 8003822:	4699      	mov	r9, r3
 8003824:	46a2      	mov	sl, r4
 8003826:	eb19 090b 	adds.w	r9, r9, fp
 800382a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800382e:	f04f 0100 	mov.w	r1, #0
 8003832:	f04f 0200 	mov.w	r2, #0
 8003836:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800383a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800383e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003842:	4689      	mov	r9, r1
 8003844:	4692      	mov	sl, r2
 8003846:	eb1b 0509 	adds.w	r5, fp, r9
 800384a:	eb4c 060a 	adc.w	r6, ip, sl
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	4619      	mov	r1, r3
 8003854:	f04f 0200 	mov.w	r2, #0
 8003858:	f04f 0300 	mov.w	r3, #0
 800385c:	f04f 0400 	mov.w	r4, #0
 8003860:	0094      	lsls	r4, r2, #2
 8003862:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003866:	008b      	lsls	r3, r1, #2
 8003868:	461a      	mov	r2, r3
 800386a:	4623      	mov	r3, r4
 800386c:	4628      	mov	r0, r5
 800386e:	4631      	mov	r1, r6
 8003870:	f7fc fcbc 	bl	80001ec <__aeabi_uldivmod>
 8003874:	4603      	mov	r3, r0
 8003876:	460c      	mov	r4, r1
 8003878:	461a      	mov	r2, r3
 800387a:	4b32      	ldr	r3, [pc, #200]	; (8003944 <UART_SetConfig+0x6f4>)
 800387c:	fba3 1302 	umull	r1, r3, r3, r2
 8003880:	095b      	lsrs	r3, r3, #5
 8003882:	2164      	movs	r1, #100	; 0x64
 8003884:	fb01 f303 	mul.w	r3, r1, r3
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	011b      	lsls	r3, r3, #4
 800388c:	3332      	adds	r3, #50	; 0x32
 800388e:	4a2d      	ldr	r2, [pc, #180]	; (8003944 <UART_SetConfig+0x6f4>)
 8003890:	fba2 2303 	umull	r2, r3, r2, r3
 8003894:	095b      	lsrs	r3, r3, #5
 8003896:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800389a:	4498      	add	r8, r3
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	469b      	mov	fp, r3
 80038a0:	f04f 0c00 	mov.w	ip, #0
 80038a4:	46d9      	mov	r9, fp
 80038a6:	46e2      	mov	sl, ip
 80038a8:	eb19 0309 	adds.w	r3, r9, r9
 80038ac:	eb4a 040a 	adc.w	r4, sl, sl
 80038b0:	4699      	mov	r9, r3
 80038b2:	46a2      	mov	sl, r4
 80038b4:	eb19 090b 	adds.w	r9, r9, fp
 80038b8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80038bc:	f04f 0100 	mov.w	r1, #0
 80038c0:	f04f 0200 	mov.w	r2, #0
 80038c4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80038c8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80038cc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80038d0:	4689      	mov	r9, r1
 80038d2:	4692      	mov	sl, r2
 80038d4:	eb1b 0509 	adds.w	r5, fp, r9
 80038d8:	eb4c 060a 	adc.w	r6, ip, sl
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	4619      	mov	r1, r3
 80038e2:	f04f 0200 	mov.w	r2, #0
 80038e6:	f04f 0300 	mov.w	r3, #0
 80038ea:	f04f 0400 	mov.w	r4, #0
 80038ee:	0094      	lsls	r4, r2, #2
 80038f0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80038f4:	008b      	lsls	r3, r1, #2
 80038f6:	461a      	mov	r2, r3
 80038f8:	4623      	mov	r3, r4
 80038fa:	4628      	mov	r0, r5
 80038fc:	4631      	mov	r1, r6
 80038fe:	f7fc fc75 	bl	80001ec <__aeabi_uldivmod>
 8003902:	4603      	mov	r3, r0
 8003904:	460c      	mov	r4, r1
 8003906:	461a      	mov	r2, r3
 8003908:	4b0e      	ldr	r3, [pc, #56]	; (8003944 <UART_SetConfig+0x6f4>)
 800390a:	fba3 1302 	umull	r1, r3, r3, r2
 800390e:	095b      	lsrs	r3, r3, #5
 8003910:	2164      	movs	r1, #100	; 0x64
 8003912:	fb01 f303 	mul.w	r3, r1, r3
 8003916:	1ad3      	subs	r3, r2, r3
 8003918:	011b      	lsls	r3, r3, #4
 800391a:	3332      	adds	r3, #50	; 0x32
 800391c:	4a09      	ldr	r2, [pc, #36]	; (8003944 <UART_SetConfig+0x6f4>)
 800391e:	fba2 2303 	umull	r2, r3, r2, r3
 8003922:	095b      	lsrs	r3, r3, #5
 8003924:	f003 020f 	and.w	r2, r3, #15
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4442      	add	r2, r8
 800392e:	609a      	str	r2, [r3, #8]
}
 8003930:	e7ff      	b.n	8003932 <UART_SetConfig+0x6e2>
 8003932:	bf00      	nop
 8003934:	3714      	adds	r7, #20
 8003936:	46bd      	mov	sp, r7
 8003938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800393c:	40011000 	.word	0x40011000
 8003940:	40011400 	.word	0x40011400
 8003944:	51eb851f 	.word	0x51eb851f

08003948 <__libc_init_array>:
 8003948:	b570      	push	{r4, r5, r6, lr}
 800394a:	4e0d      	ldr	r6, [pc, #52]	; (8003980 <__libc_init_array+0x38>)
 800394c:	4c0d      	ldr	r4, [pc, #52]	; (8003984 <__libc_init_array+0x3c>)
 800394e:	1ba4      	subs	r4, r4, r6
 8003950:	10a4      	asrs	r4, r4, #2
 8003952:	2500      	movs	r5, #0
 8003954:	42a5      	cmp	r5, r4
 8003956:	d109      	bne.n	800396c <__libc_init_array+0x24>
 8003958:	4e0b      	ldr	r6, [pc, #44]	; (8003988 <__libc_init_array+0x40>)
 800395a:	4c0c      	ldr	r4, [pc, #48]	; (800398c <__libc_init_array+0x44>)
 800395c:	f000 f820 	bl	80039a0 <_init>
 8003960:	1ba4      	subs	r4, r4, r6
 8003962:	10a4      	asrs	r4, r4, #2
 8003964:	2500      	movs	r5, #0
 8003966:	42a5      	cmp	r5, r4
 8003968:	d105      	bne.n	8003976 <__libc_init_array+0x2e>
 800396a:	bd70      	pop	{r4, r5, r6, pc}
 800396c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003970:	4798      	blx	r3
 8003972:	3501      	adds	r5, #1
 8003974:	e7ee      	b.n	8003954 <__libc_init_array+0xc>
 8003976:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800397a:	4798      	blx	r3
 800397c:	3501      	adds	r5, #1
 800397e:	e7f2      	b.n	8003966 <__libc_init_array+0x1e>
 8003980:	08003f44 	.word	0x08003f44
 8003984:	08003f44 	.word	0x08003f44
 8003988:	08003f44 	.word	0x08003f44
 800398c:	08003f48 	.word	0x08003f48

08003990 <memset>:
 8003990:	4402      	add	r2, r0
 8003992:	4603      	mov	r3, r0
 8003994:	4293      	cmp	r3, r2
 8003996:	d100      	bne.n	800399a <memset+0xa>
 8003998:	4770      	bx	lr
 800399a:	f803 1b01 	strb.w	r1, [r3], #1
 800399e:	e7f9      	b.n	8003994 <memset+0x4>

080039a0 <_init>:
 80039a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039a2:	bf00      	nop
 80039a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039a6:	bc08      	pop	{r3}
 80039a8:	469e      	mov	lr, r3
 80039aa:	4770      	bx	lr

080039ac <_fini>:
 80039ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039ae:	bf00      	nop
 80039b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039b2:	bc08      	pop	{r3}
 80039b4:	469e      	mov	lr, r3
 80039b6:	4770      	bx	lr
